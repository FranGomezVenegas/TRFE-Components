{"version":3,"file":"515.fa743f3a.iframe.bundle.js","mappings":";;AAMA;AAEA;;AAIA;;AAEA;;;AAGA;;;AA2BA;;;;AAIA;AACA;;;;AAIA;AACA;AAEA;AACA;;AAEA;;AAEA;;;AAKA;;AAEA;AACA;AACA;AACA;;;;AAfA;;;;AAwBA;AACA;;;;AAIA;AACA;;;;;;AAMA;;;;AAIA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AAGA;;;;;;AAbA;;;;AA2BA;AA5GA;;;AA+JA;;;;AAIA;AACA;;;;AAIA;AACA;AAEA;AACA;;AAEA;;AAEA;;;AAKA;;AAEA;AACA;AACA;AACA;;;;AAfA;;;;AAwBA;AACA;;;;AAIA;AACA;;;;;;;AAOA;;AAEA;AASA;;AAIA;;AAEA;;AAOA;;AAKA;AACA;;;;;;AAMA;;AAIA;AAEA;AAGA;AAGA;AA6CA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;;;AAGA;;AAEA;;AAEA;AACA;;;;;AASA;;;AAIA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAtJA;;;AAKA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;;;;AAKA;;;;;;;;AAQA;;;AAIA;;AAIA;;;;;;;;;;;;AAgIA;;AA7MA;AAtNA;;;;;AA+GA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDA;;AAuCA;;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;;AAIA;AACA;AACA;;AAEA;;;;AAKA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAGA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAaA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAKA;AAoBA;AACA;AAGA;;;;;AAKA;;AAEA;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;;;;AAKA;;AAIA;AACA;AACA;AACA;AACA;;;;;AAOA;;AAsHA;AAUA;AACA;AACA;AACA;AAGA;;AAKA","sources":["webpack://@trazit/tr-procedures/./src/components/DragDropTable/dragdroptable.template.js","webpack://@trazit/tr-procedures/./src/components/DragDropTable/drag-drop.js"],"sourcesContent":["import { html } from \"lit-element\";\r\nimport '@material/mwc-icon';\r\n\r\nexport const template = (props, data, lang, thisComponent) => {    \r\n  return html`\r\n    <div style=\"display:flex; flex-direction:row; gap:12px;\">\r\n      ${props.definition.map((curTable, ii) => \r\n      html`\r\n        ${curTable.name === undefined || curTable.type === undefined ? \r\n          html`The object ${ii} has no name or type attribute, this is mandatory`\r\n          :html` \r\n            <div style=\"display:flex; flex-direction:column; gap:12px; align-items: center;\">\r\n              ${curTable.title === undefined ? html`` : html` \r\n                <p style=\"width: 100%; display: flex; justify-content: center;\">\r\n                  <span class=\"title\">${curTable.title[\"label_\" + lang]}</span>\r\n                </p>\r\n              `}              \r\n              ${curTable.type === 'table' ? myTable(curTable, data, lang, props, thisComponent) : html``}\r\n              ${curTable.type === 'cards' ? cardSomeElementsRepititiveObjects(curTable, data, lang, props, thisComponent) : html``}\r\n              ${curTable.type !== 'table' && curTable.type !== 'cards' ? \r\n                html`The type ${curTable.type} is not recognized` \r\n                : \r\n                html``\r\n              }\r\n            </div>\r\n          `\r\n        }  \r\n      `)}        \r\n    </div>\r\n  `;\r\n\r\n}\r\n\r\nfunction myTable(elem, dataArr, lang, props, thisComponent) {  \r\n  dataArr=getDataFromRoot(elem, dataArr)\r\n if(dataArr && Object.keys(elem.smartFilter.filterValues).length != 0){\r\n    dataArr=applyFilterToTheData(dataArr,elem.smartFilter.filterValues);\r\n }\r\n \r\n\r\n const renderTable = () => {\r\n  return html`\r\n      <div style=\"flex:1;\">\r\n          <!-- Smart Filter UI -->\r\n          ${elem.smartFilter ? html`\r\n              <div class=\"smart-filter-container\">\r\n                  <div>\r\n                      <span>\r\n                          <button class=\"smart-filter-button\" @click=\"${() => { thisComponent.toggleFilterDialog(elem.name) }}\">\r\n                              ${elem.smartFilter?.displayFilterButton?.title[\"label_\" + lang]}\r\n                          </button>\r\n                      </span>\r\n                  </div>\r\n                  <div id=\"smartFilterDiv_${elem.name}\" ?hidden=\"${thisComponent.hideFilters(elem.name)}\">\r\n                      ${elem.smartFilter?.dialogInfo?.fields?.map((fld, i) =>\r\n                          html`\r\n                              ${!fld ? html`` : html`\r\n                                  ${fld.type === 'select' ? html`\r\n                                      <div class=\"smart-filter-field layout horizontal flex center-center\">\r\n                                          <mwc-select id=\"list1\" name=\"${fld.name}\">\r\n                                              <mwc-list-item value=\"\" name=\"\">Select</mwc-list-item>\r\n                                              ${fld.select_options.map((c, i) =>\r\n                                                  html`<mwc-list-item value=\"${c.value}\" name=\"${c.name}\">${c[\"lable_\" + lang]}</mwc-list-item>`\r\n                                              )}\r\n                                          </mwc-select>\r\n                                      </div>\r\n                                  ` : html`\r\n                                      <div class=\"smart-filter-field layout horizontal flex center-center\">\r\n                                          <mwc-textfield class=\"layout flex\" id=\"smartFilter_text_${i}\" type=\"text\"\r\n                                              value=${fld.default_value ? fld.default_value : ''}\r\n                                              label=\"${fld[\"label_\" + lang]}\"\r\n                                              @keypress=${e => e.keyCode == 13 && thisComponent.genomaSuperDialogClickedAction()}>\r\n                                          </mwc-textfield>\r\n                                      </div>\r\n                                  `}\r\n                              `}\r\n                          `\r\n                      )}\r\n                      <div class=\"smart-filter-actions\">\r\n                          <span>\r\n                              <button class=\"smart-filter-button\" @click=\"${() => handleFilter(elem, thisComponent)}\">\r\n                                  ${elem.smartFilter?.applyFilterButton?.title[\"label_\" + lang]}\r\n                              </button>\r\n                          </span>\r\n                          <span>\r\n                              <button class=\"smart-filter-button\" @click=\"${() => handleClear(elem, thisComponent)}\">\r\n                                  ${elem.smartFilter?.clearFilterButton?.title[\"label_\" + lang]}\r\n                              </button>\r\n                          </span>\r\n                      </div>\r\n                  </div>\r\n              </div>\r\n          ` : undefined}\r\n          <!-- Table -->\r\n          <table class=\"dragdropable TRAZiT-DefinitionArea\">\r\n              <thead>\r\n                  ${elem.columns.map((column, i) => html`<th>${column[\"label_\" + lang]}</th>`)}\r\n              </thead>\r\n              <tbody>\r\n                  ${dataArr === undefined || !Array.isArray(dataArr) ? html `No Data` :\r\n                      html`\r\n                          ${dataArr.map((p, idx) => html`\r\n                              <tr class=\"dragdropabletr\" draggable=\"${elem.dragEnable}\"\r\n                                  @dragstart=${(e) => props.dragTableTr(e, elem, p)}\r\n                                  @dragover=${(e) => props.allowDropTr(e)}\r\n                                  @drop=${(e) => props.dropTableTr(e, elem, p)}>\r\n                                  ${elem.columns.map((fld, index) =>\r\n                                      html`<td>${p[fld.name]}</td>`\r\n                                  )}\r\n                                  ${elem.row_buttons === undefined ? html`` : html`\r\n                                      <td>\r\n                                          <div class=\"layout horizontal center flex wrap\">\r\n                                              ${thisComponent.getButtonForRows(elem.row_buttons, p, false, parentData)}\r\n                                          </div>\r\n                                      </td>\r\n                                  `}\r\n                              </tr>\r\n                          `)}\r\n                      `}\r\n              </tbody>\r\n          </table>\r\n      </div>\r\n  `;\r\n};\r\n\r\n\r\n  return renderTable();\r\n}\r\n\r\n\r\nfunction handleFilter(elem,thisComponent){\r\n  let filterDiv = thisComponent.shadowRoot.querySelectorAll(`#smartFilterDiv_${elem.name} mwc-textfield`)\r\n  console.log(filterDiv)\r\n  let selectFilterDiv = thisComponent.shadowRoot.querySelector(`#smartFilterDiv_${elem.name} mwc-select`)          \r\n  filterDiv.forEach((elm,i) => {\r\n    let value = elm.shadowRoot.querySelector('.mdc-text-field__input').value\r\n    if (elem.smartFilter.dialogInfo.fields[i]?.name) {\r\n      elem.smartFilter.filterValues[elem.smartFilter.dialogInfo.fields[i].name] = value\r\n    }                      \r\n  })\r\n  if (selectFilterDiv) {\r\n    let name = selectFilterDiv.getAttribute('name')\r\n    let value = selectFilterDiv.shadowRoot.querySelector('input').value;\r\n    console.log(selectFilterDiv.shadowRoot.querySelector('input'))\r\n    elem.smartFilter.filterValues[name] = value\r\n  }            \r\n  thisComponent.requestUpdate(); \r\n}\r\n\r\n\r\nfunction handleClear(elem,thisComponent){\r\n  elem.smartFilter.filterValues = {}\r\n      let filterDiv = thisComponent.shadowRoot.querySelectorAll(`#smartFilterDiv_${elem.name} mwc-textfield`)\r\n      let selectFilterDiv = thisComponent.shadowRoot.querySelector(`#smartFilterDiv_${elem.name} mwc-select`)    \r\n      if (selectFilterDiv) {\r\n        selectFilterDiv.shadowRoot.querySelector('input').value = 'null'\r\n      }\r\n     \r\n      filterDiv.forEach((elm, i) => {\r\n        const input = elm.shadowRoot.querySelector('.mdc-text-field__input');\r\n        if (input) {\r\n            input.value = '';\r\n        }\r\n    });       \r\n    thisComponent.requestUpdate()\r\n}\r\nfunction cardSomeElementsRepititiveObjects(elem, data, lang, props,thisComponent) {\r\n  //console.log('cardSomeElementsRepititiveObjects', 'elem', elem, 'data', data)\r\n  \r\n  data = getDataFromRoot(elem, data);\r\n  if(data && Object.keys(elem.smartFilter.filterValues).length != 0){\r\n    data=applyFilterToTheData(data,elem.smartFilter.filterValues);\r\n }\r\n  console.log('cardSomeElementsRepititiveObjects >> getDataFromRoot', 'elem', elem, 'data', data)\r\n  return html`\r\n      <div style=\"flex:1;\">\r\n      <!-- Smart Filter UI -->\r\n      ${elem.smartFilter ? html`\r\n                        <div class=\"smart-filter-container\">\r\n                  <div>\r\n                      <span>\r\n                          <button class=\"smart-filter-button\" @click=\"${() => { thisComponent.toggleFilterDialog(elem.name) }}\">\r\n                              ${elem.smartFilter?.displayFilterButton?.title[\"label_\" + lang]}\r\n                          </button>\r\n                      </span>\r\n                  </div>\r\n                  <div id=\"smartFilterDiv_${elem.name}\" ?hidden=\"${thisComponent.hideFilters(elem.name)}\">\r\n                      ${elem.smartFilter?.dialogInfo?.fields?.map((fld, i) =>\r\n                          html`\r\n                              ${!fld ? html`` : html`\r\n                                  ${fld.type === 'select' ? html`\r\n                                      <div class=\"smart-filter-field layout horizontal flex center-center\">\r\n                                          <mwc-select id=\"list1\" name=\"${fld.name}\">\r\n                                              <mwc-list-item value=\"\" name=\"\">Select</mwc-list-item>\r\n                                              ${fld.select_options.map((c, i) =>\r\n                                                  html`<mwc-list-item value=\"${c.value}\" name=\"${c.name}\">${c[\"lable_\" + lang]}</mwc-list-item>`\r\n                                              )}\r\n                                          </mwc-select>\r\n                                      </div>\r\n                                  ` : html`\r\n                                      <div class=\"smart-filter-field layout horizontal flex center-center\">\r\n                                          <mwc-textfield class=\"layout flex\" id=\"smartFilter_text_${i}\" type=\"text\"\r\n                                              value=${fld.default_value ? fld.default_value : ''}\r\n                                              label=\"${fld[\"label_\" + lang]}\"\r\n                                              @keypress=${e => e.keyCode == 13 && thisComponent.genomaSuperDialogClickedAction()}>\r\n                                          </mwc-textfield>\r\n                                      </div>\r\n                                  `}\r\n                              `}\r\n                          `\r\n                      )}\r\n                      <div class=\"smart-filter-actions\">\r\n                          <span>\r\n                              <button class=\"smart-filter-button\" @click=\"${() => handleFilter(elem, thisComponent)}\">\r\n                                  ${elem.smartFilter?.applyFilterButton?.title[\"label_\" + lang]}\r\n                              </button>\r\n                          </span>\r\n                          <span>\r\n                              <button class=\"smart-filter-button\" @click=\"${() => handleClear(elem, thisComponent)}\">\r\n                                  ${elem.smartFilter?.clearFilterButton?.title[\"label_\" + lang]}\r\n                              </button>\r\n                          </span>\r\n                      </div>\r\n                  </div>\r\n              </div>\r\n\r\n      ` : undefined}\r\n\r\n          ${Array.isArray(data) && data?.map(\r\n            (d, i) => html` ${kpiCardSomeElementsMain(elem, d, lang, props,thisComponent)} `\r\n          )}\r\n          </div>        \r\n  `;\r\n}\r\nfunction kpiCardSomeElementsMain(elem, curDataForThisCard, lang, props,thisComponent) {\r\n  //console.log('kpiCardSomeElementsMain', 'elem', elem, 'curDataForThisCard', curDataForThisCard)  \r\n  return html`\r\n    ${elem === undefined || elem.title === undefined\r\n      ? html``\r\n      : html`<span\r\n          style=\"color: rgb(20, 115, 230);font-size: 30px;margin-top: 10px;font-weight: bold;\"\r\n          >${elem.title[\"label_\" + lang]}</span\r\n        >`}\r\n    ${curDataForThisCard === undefined\r\n      ? html`${elem.hideNoDataMessage !== undefined &&\r\n        elem.hideNoDataMessage\r\n          ? \"\"\r\n          : \"No columns defined\"}`\r\n      : html`     \r\n          <div\r\n            id=\"main${elem.add_border !== undefined &&\r\n            elem.add_border == true\r\n              ? \"addborder\"\r\n              : \"\"}\"\r\n            class=\"layout vertical flex wrap\"\r\n            style=\"${elem.style !== undefined ? elem.style : \"\"}\"\r\n            class=\"dragdropabletr\" draggable=\"${elem.dragEnable}\"  @dragstart=${(e) => props.dragTableTr(e, elem, curDataForThisCard)} @dragover=${(e) => props.allowDropTr(e)} @drop=${(e) => props.dropTableTr(e, elem, curDataForThisCard)}>\r\n            <div style=\"flex-basis: auto; width: auto;\">\r\n             <!-- this.getButton(elem, curDataForThisCard, true)} -->\r\n            </div>\r\n            <ul\r\n              style=\"align-items: baseline;\"\r\n              class=\"column-list${elem.num_columns !== undefined\r\n                ? elem.num_columns\r\n                : \"\"}\"\r\n            >\r\n            ${elem.fieldsToDisplay===undefined?html``:\r\n            html`\r\n              ${elem.fieldsToDisplay.map(\r\n                (fld, i) =>\r\n                  html`\r\n                    ${fieldsToDiscard(fld) === true\r\n                      ? html``\r\n                      : html`\r\n                          ${fld.as_ppt !== undefined &&\r\n                          (fld.as_ppt === true || fld.as_video === true)\r\n                            ? html`\r\n                                <mwc-icon-button\r\n                                  icon=\"fullscreen\"\r\n                                  .isvideo=${curDataForThisCard.is_video}\r\n                                  .src=${curDataForThisCard[fld.name]}\r\n                                  @click=${this.openDialogFrame}\r\n                                  .fld=${fld}\r\n                                ></mwc-icon-button>\r\n                                ${curDataForThisCard.is_video === undefined ||\r\n                                curDataForThisCard.is_video === false\r\n                                  ? html`\r\n                                      <iframe\r\n                                        src=${curDataForThisCard[fld.name]}\r\n                                        @click=${this.openDialogFrame}\r\n                                      ></iframe>\r\n                                      <div id=\"dialog-frame\" class=\"dialog\">\r\n                                        <mwc-icon-button\r\n                                          icon=\"fullscreen_exit\"\r\n                                          @click=${this.closeDialogFrame}\r\n                                        ></mwc-icon-button>\r\n                                        <iframe\r\n                                          id=\"my-iframe\"\r\n                                          controls\r\n                                          controlsList=\"nodownload\"\r\n                                        ></iframe>\r\n                                      </div>\r\n                                    `\r\n                                  : html`\r\n\r\n<!---\r\n                          <video controls type=\"video/mp4\" src=${\r\n                            curDataForThisCard[fld.name]\r\n                          } controlsList=\"nodownload\"oncontextmenu=\"return false\" onselectstart=\"return false\" ondragstart=\"return false\"></video>\r\n                          <div id=\"dialog-frame\" class=\"dialog\">\r\n                          <mwc-icon-button icon=\"fullscreen_exit\" @click=${\r\n                            this.closeDialogFrame\r\n                          }></mwc-icon-button>\r\n                            <video id=\"video-source\" type=\"video/mp4\" controls controlsList=\"nodownload\"oncontextmenu=\"return false\" onselectstart=\"return false\" ondragstart=\"return false\" >\r\n                            </video>-->\r\n                          </div>\r\n                        `}\r\n                              `\r\n                            : html`\r\n                            ${fld.is_tag_list !== undefined && fld.is_tag_list === true ? html`\r\n                            <span class=\"cardLabel\">${fieldLabel(fld, lang)}:</span>\r\n                            <span class=\"cardValue\">\r\n                              <multi-select .label=${this.purpose} .props=${{\"readOnly\":true, \"displayLabel\":false}} .activeOptions=${curDataForThisCard[fld.name]} .options=${{}}> </multi-select>\r\n                            </span>\r\n                            `:html`\r\n                                ${fld.as_progress !== undefined &&\r\n                                fld.as_progress === true\r\n                                  ? html`\r\n                                      <style>\r\n                                        .w3-responsive {\r\n                                          display: block;\r\n                                          overflow-x: auto;\r\n                                        }\r\n                                        .w3-container,\r\n                                        .w3-panel {\r\n                                          padding: 0.01em 4px;\r\n                                        }\r\n                                        .w3-panel {\r\n                                          margin-top: 16px;\r\n                                          margin-bottom: 16px;\r\n                                          border-radius: 5px;\r\n                                          box-shadow: 0px 0px 5px\r\n                                            rgba(0, 0, 0, 0.1);\r\n                                        }\r\n                                        .w3-container:after,\r\n                                        .w3-container:before,\r\n                                        .w3-panel:after,\r\n                                        .w3-panel:before,\r\n                                        .w3-row:after,\r\n                                        .w3-row:before,\r\n                                        .w3-row-padding:after,\r\n                                        .w3-row-padding:before,\r\n                                        .w3-blue,\r\n                                        .w3-hover-blue:hover {\r\n                                          color: rgba(\r\n                                            7,\r\n                                            13,\r\n                                            22,\r\n                                            0.94\r\n                                          ) !important;\r\n                                          background-color: #2196f3 !important;\r\n                                        }\r\n                                        .w3-background,\r\n                                        .w3-hover-blue:hover {\r\n                                          color: rgba(\r\n                                            7,\r\n                                            13,\r\n                                            22,\r\n                                            0.94\r\n                                          ) !important;\r\n                                          background-color: #ffdedd !important;\r\n                                        }\r\n                                        .title {\r\n                                          font-size: 8px;\r\n                                          font-weight: 500;\r\n                                          letter-spacing: 0;\r\n                                          line-height: 1.5em;\r\n                                          padding-bottom: 15px;\r\n                                          position: relative;\r\n                                          font-family: Montserrat;\r\n                                          font-color: rgb(94, 145, 186);\r\n                                        }\r\n                                        span.cardMainLabel {\r\n                                          font-weight: bold;\r\n                                          color: rgb(41, 137, 216); /* #032bbc; */\r\n                                        }\r\n                                        span.cardMainValue {\r\n                                          color: rgba(214, 233, 248, 0.37); /* #009879; */\r\n                                        }\r\n                                      </style>\r\n                                      <div class=\"w3-container\">\r\n                                        <div\r\n                                          class=\"w3-background w3-round-xlarge\"\r\n                                          title=\"${titleLang(fld)}\"\r\n                                        >\r\n                                          <div\r\n                                            title=\"${titleLang(fld)}\"\r\n                                            class=\"w3-container w3-blue w3-round-xlarge\"\r\n                                            style=\"width:${curDataForThisCard[fld.name]}%\"\r\n                                          >\r\n                                            ${fld.name}:\r\n                                            ${curDataForThisCard[fld.name] ===\r\n                                              undefined ||\r\n                                            curDataForThisCard[fld.name].length == 0\r\n                                              ? \"0\"\r\n                                              : curDataForThisCard[fld.name]}%\r\n                                          </div>\r\n                                        </div>\r\n                                      </div>\r\n                                      <br />\r\n                                    `\r\n                                  : html`\r\n                                      <li>\r\n                                        <span class=\"cardLabel\">\r\n                                          ${fieldLabel(fld, lang)}:\r\n                                        </span>\r\n                                        <span class=\"cardValue\">\r\n                                          ${curDataForThisCard[fld.name]}\r\n                                          ${fld.fix_value_suffix !==undefined? fld.fix_value_suffix: \"\"}\r\n                                          ${fld.fix_value2_prefix !==undefined? fld.fix_value2_prefix: \"\"}\r\n                                          ${fld.name2 !== undefined? curDataForThisCard[fld.name2]: \"\"}\r\n                                          ${fld.fix_value2_suffix !==undefined? fld.fix_value2_suffix: \"\"}\r\n                                          ${fld.fix_value3_prefix !==undefined? fld.fix_value3_prefix: \"\"}\r\n                                          ${fld.name3 !== undefined? curDataForThisCard[fld.name3]: \"\"}\r\n                                          ${fld.fix_value3_suffix !==undefined? fld.fix_value3_suffix: \"\"}\r\n                                        </span>\r\n                                      </li>\r\n                                    `}\r\n                              `}\r\n                            `}\r\n                        `}\r\n                  `\r\n              )}\r\n            `}\r\n            </ul>\r\n          </div>\r\n        `}\r\n  `;\r\n}\r\nfunction fieldLabel(fld, lang) {\r\n  return fld[\"label_\" + lang] !== undefined\r\n    ? fld[\"label_\" + lang]\r\n    : fld.name;\r\n}\r\nfunction titleLang(colDef) {\r\n  let titleStr = \"\";\r\n  if (colDef.title !== undefined) {\r\n    return colDef.title[\"label_\" + lang];\r\n  } else {\r\n    return colDef.name;\r\n  }\r\n}\r\nfunction fieldsToDiscard(fld) {\r\n  if (fld.is_translation === undefined || fld.is_translation === false) {\r\n    return false;\r\n  }\r\n  if (fld.is_translation === true && fld.name.endsWith(lang)) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\nfunction trElementType(elem){\r\n    if (elem.dragEnable && elem.dropEnable){\r\n        return html `<tr class=\"dragdropabletr\" draggable=\"true\"  @dragstart=${(e) => props.dragTableTr(e, ii, index)} @dragover=${(e) => props.allowDropTr(e)} @drop=${(e) => props.dropTableTr(e, ii, index)}>`\r\n    }\r\n    if (elem.dropEnable){return html `\r\n    <tr class=\"dragdropabletr\" @dragover=${(e) => props.allowDropTr(e)} @drop=${(e) => props.dropTableTr(e, ii, index)}>\r\n    `}\r\n\r\n    if (elemdragEnable){return html `\r\n    <tr class=\"dragdropabletr\" draggable=\"true\"  @dragstart=${(e) => props.dragTableTr(e, ii, index)}>\r\n    `}\r\n    return html `\r\n    <tr class=\"dragdropabletr undropable\" @dragover=${(e) => props.allowDropTr(e)} @drop=${(e) => props.unavaiableToDrop()}>\r\n    `\r\n}\r\n\r\nfunction applyFilterToTheData(curDataForThisCard, filterValues) {\r\n   \r\n    const uniqueItemsSet = new Set();\r\n    for (const key in filterValues) {\r\n            const filterValue = filterValues[key];\r\n            if (Array.isArray(curDataForThisCard)) {\r\n                const filteredItems = curDataForThisCard.filter(item => {\r\n                    if (item[key] && filterValue) {\r\n                      return item[key] == filterValue;\r\n                    }\r\n                    return false\r\n                });  \r\n                console.log(filteredItems)                         \r\n                filteredItems.forEach(item => uniqueItemsSet.add(item));            \r\n        }\r\n    }\r\n    return Array.from(uniqueItemsSet);\r\n\r\n}\r\n\r\n\r\nfunction getDataFromRoot(elem, curDataForThisCard) {\r\n  if (elem !== undefined && elem.contextVariableName !== undefined) {\r\n    if (this[elem.contextVariableName] !== undefined) {\r\n      curDataForThisCard = this[elem.contextVariableName];\r\n    }\r\n  }\r\n  if (curDataForThisCard === null || curDataForThisCard === undefined) {\r\n    return undefined;\r\n  }\r\n  if (elem.endPointPropertyArray !== undefined) {\r\n    if (elem.endPointPropertyArray.length === 0) {\r\n      return curDataForThisCard;\r\n    }\r\n    if (\r\n      elem.endPointPropertyArray.length === 1 &&\r\n      elem.endPointPropertyArray[0].toUpperCase() === \"ROOT\"\r\n    ) {\r\n      return curDataForThisCard;\r\n    }\r\n    //const numObjectsToSkip = elem.endPointPropertyArray.length - 1;\r\n    //const propertyName = elem.endPointPropertyArray[numObjectsToSkip];\r\n    let i = 0;\r\n    let subJSON = {};\r\n    //curDataForThisCard = curDataForThisCard[elem.endPointPropertyArray[0]][0]\r\n    for (i = 0; i < elem.endPointPropertyArray.length; i++) {\r\n      if (curDataForThisCard === null) {\r\n        return undefined;\r\n      }\r\n      let propertyName = elem.endPointPropertyArray[i];\r\n      if (Array.isArray(curDataForThisCard[propertyName])) {\r\n        if (i < elem.endPointPropertyArray.length - 1) {\r\n          subJSON = curDataForThisCard[propertyName][0];\r\n        } else {\r\n          return curDataForThisCard[propertyName];\r\n        }\r\n      } else {\r\n        subJSON = curDataForThisCard[propertyName];\r\n      }\r\n      if (typeof subJSON === \"undefined\") {\r\n        return curDataForThisCard;\r\n      } else {\r\n        curDataForThisCard = subJSON;\r\n      }\r\n    }\r\n    return curDataForThisCard;\r\n    if (typeof subJSON === \"undefined\") {\r\n      return undefined;\r\n    } else if (elem.endPointPropertyArray.length % 2 === 0) {\r\n      // If the input array has an even number of elements, skip one more object level before recursing\r\n      return getValueFromNestedJSON(\r\n        subJSON,\r\n        elem.endPointPropertyArray.slice(0, numObjectsToSkip)\r\n      );\r\n    } else {\r\n      // Otherwise, recurse on the sub-JSON with the remaining elem.endPointPropertyArray elements\r\n      return getValueFromNestedJSON(\r\n        subJSON,\r\n        elem.endPointPropertyArray.slice(0, numObjectsToSkip)\r\n      );\r\n    }\r\n  } else {\r\n    if (\r\n      elem.endPointResponseObject !== undefined &&\r\n      elem.endPointResponseObject2 !== undefined\r\n    ) {\r\n      let curDataForThisCardToRet = [];\r\n      curDataForThisCardToRet = curDataForThisCard[elem.endPointResponseObject];\r\n      if (curDataForThisCardToRet !== undefined) {\r\n        return curDataForThisCardToRet[elem.endPointResponseObject2];\r\n      } else {\r\n        return [];\r\n      }\r\n    } else {\r\n      if (String(elem.endPointResponseObject).toUpperCase() === \"ROOT\") {\r\n        if (!Array.isArray(curDataForThisCard)) {\r\n          let curDataForThisCardArr = [];\r\n          curDataForThisCardArr.push(curDataForThisCard);\r\n          return curDataForThisCardArr;\r\n        }\r\n        return curDataForThisCard;\r\n      } else {\r\n        return curDataForThisCard[elem.endPointResponseObject];\r\n      }\r\n    }\r\n  }\r\n} \r\nexport const template2 = (props) => {\r\n    return html`\r\n        <div style=\"display:flex; flex-direction:row; gap:12px;\">\r\n        ${props.curDataForThisCard.tableData.map((taData, ii) => html`\r\n            <table class=\"dragdropable TRAZiT-DefinitionArea\" style=\"width: 400px;\">\r\n                <thead>\r\n                        ${props.data.tableDefinition.columns.map((column, i) => html`\r\n                            <th>${column.label_en}</th>\r\n                        `)}\r\n                    <tr>\r\n                </thead>\r\n                <tbody>\r\n                    ${taData.map((data, index) =>\r\n                    props.data.tableDefinition.dragEnable[ii] && props.data.tableDefinition.dropEnable[ii] ? html `\r\n                    <tr class=\"dragdropabletr\" draggable=\"true\"  @dragstart=${(e) => props.dragTableTr(e, ii, index)} @dragover=${(e) => props.allowDropTr(e)} @drop=${(e) => props.dropTableTr(e, ii, index)}>\r\n                        <td> ${data.id} </td>\r\n                        <td> ${data.study} </td>\r\n                        <td> ${data.temperature} </td>\r\n                    </tr>` :\r\n                    props.data.tableDefinition.dropEnable[ii] ? html `\r\n                    <tr class=\"dragdropabletr\" @dragover=${(e) => props.allowDropTr(e)} @drop=${(e) => props.dropTableTr(e, ii, index)}>\r\n                    <td> ${data.id} </td>\r\n                        <td> ${data.study} </td>\r\n                        <td> ${data.temperature} </td>\r\n                    </tr> ` :\r\n                    props.data.tableDefinition.dragEnable[ii] ? html `\r\n                    <tr class=\"dragdropabletr\" draggable=\"true\"  @dragstart=${(e) => props.dragTableTr(e, ii, index)}>\r\n                        <td> ${data.id} </td>\r\n                        <td> ${data.study} </td>\r\n                        <td> ${data.temperature} </td>\r\n                    </tr>` : html `\r\n                    <tr class=\"dragdropabletr undropable\" @dragover=${(e) => props.allowDropTr(e)} @drop=${(e) => props.unavaiableToDrop()}>\r\n                        <td> ${data.id} </td>\r\n                        <td> ${data.study} </td>\r\n                        <td> ${data.temperature} </td>\r\n                    </tr>`)}\r\n                </tbody>\r\n            </table>\r\n        `)}\r\n        </div>\r\n    `;\r\n};\r\n","import { html, css, LitElement, nothing } from 'lit';\r\nimport {  gridRowDetailsRenderer } from 'lit-vaadin-helpers';\r\nimport { Layouts, Alignment } from '@collaborne/lit-flexbox-literals';\r\nimport '@material/mwc-button';\r\nimport '@material/mwc-icon-button';\r\nimport '@material/mwc-textfield';\r\nimport '@material/mwc-select';\r\nimport '@vaadin/vaadin-grid/vaadin-grid';\r\nimport '@vaadin/vaadin-grid/vaadin-grid-column';\r\nimport '@vaadin/vaadin-grid/vaadin-grid-selection-column';\r\nimport '@vaadin/vaadin-grid/vaadin-grid-sort-column';\r\nimport '@vaadin/vaadin-grid/vaadin-grid-filter-column';\r\nimport '@vaadin/vaadin-context-menu/vaadin-context-menu';\r\n\r\nimport '@trazit/cred-dialog'\r\nimport '../../gridmodel-bottomcomp-chart';\r\n\r\nimport '../templates-';\r\nimport '@trazit/tr-dialog/tr-dialog';\r\nimport { AuditFunctions} from '../Audit/AuditFunctions';\r\nimport {ButtonsFunctions} from '../Buttons/ButtonsFunctions';\r\nimport {GridFunctions} from '../grid_with_buttons/GridFunctions';\r\nimport {ModuleEnvMonitClientMethods} from '../../module_env_monit/ModuleEnvMonitClientMethods';\r\nimport { ProceduresModel } from '../../ProceduresModel';\r\nimport {TrazitGenericDialogs} from '../GenericDialogs/TrazitGenericDialogs';\r\nimport {TrazitReactivateObjectsDialog} from '../GenericDialogs/TrazitReactivateObjectsDialog';\r\nimport {TrazitEnterResultWithSpec} from '../GenericDialogs/TrazitEnterResultWithSpec';\r\nimport {ModuleEnvMonitDialogsMicroorganism} from '../../module_env_monit/Dialogs/ModuleEnvMonitDialogsMicroorganism';\r\nimport {TrazitInvestigationsDialog} from '../GenericDialogs/TrazitInvestigationsDialog';\r\n\r\nimport {TrazitCredentialsDialogs} from '../GenericDialogs/TrazitCredentialsDialogs';\r\nimport { TrazitTakePictureDialog } from '../GenericDialogs/TrazitTakePictureDialog';\r\n\r\nimport '../DragDropTable';\r\n\r\n\r\nimport '../Audit/audit-dialog';\r\nexport class DrapDrop extends (TrazitTakePictureDialog(TrazitCredentialsDialogs(AuditFunctions((TrazitInvestigationsDialog(ModuleEnvMonitDialogsMicroorganism(TrazitEnterResultWithSpec(TrazitReactivateObjectsDialog(TrazitGenericDialogs(ModuleEnvMonitClientMethods(GridFunctions(ButtonsFunctions(LitElement))))))))))))) {\r\n    static get styles() {\r\n      return [\r\n        Layouts, Alignment,\r\n        //super.styles,\r\n        css`\r\n          :host {\r\n            display: block;\r\n          }\r\n          .tabContainer {\r\n            overflow: auto;\r\n          }\r\n          .tabContainer::-webkit-scrollbar {\r\n            display: none;\r\n          }\r\n          .tabContainer > * {\r\n            display: inline-block;\r\n            flex-shrink: 0;\r\n          }\r\n          mwc-button {\r\n            --mdc-typography-button-text-transform: none;\r\n          }\r\n          mwc-icon-button.slide[hidden] {\r\n            visibility: hidden;\r\n          }\r\n          mwc-select[hidden] {\r\n            display: none;\r\n          }\r\n          h1 {        \r\n            color : rgba(36, 192, 235, 1);\r\n            font-family : Montserrat;\r\n            font-weight : bold;\r\n            font-size:calc(12px + 1.5vw);\r\n            text-align: center;\r\n          }        \r\n          vaadin-grid-cell-content{\r\n            color : rgb(94, 145, 186);\r\n          }\r\n          #vaadin-text-field-input{\r\n          background-color: #d0f1fa;\r\n          }\r\n        `\r\n      ];\r\n    }\r\n  \r\n    static get properties() {\r\n      return {\r\n        model: { type: Object },\r\n        config: { type: Object },\r\n        procInstanceName: { type: String },\r\n        viewModelFromProcModel: {type: Object},\r\n        ready:{type: Boolean},\r\n        viewName: { type: String },\r\n        filterName: { type: String },\r\n        lang: { type: String },\r\n        selectedItems: { type: Array },\r\n        actionBeingPerformedModel:{type:Object},\r\n        localProceduresModels: { type: Object},\r\n        data:{type: Object},\r\n        contextMenuItems: { type: Array }\r\n\r\n      };\r\n    }\r\n  \r\n    constructor() {\r\n      super()\r\n      this.ready=false;\r\n      this.selectedItems=[]\r\n      this.config={}\r\n      this.viewModelFromProcModel={}   \r\n      this.actionBeingPerformedModel={}\r\n      this.localProceduresModels=ProceduresModel\r\n      this.data={}\r\n      this.contextMenuItems=[]\r\n    }\r\n    resetView(){\r\n      this.selectedItems=[]\r\n      this.ready=false;\r\n    }\r\n    renderOld(){\r\n      return html`\r\n<!--        <div style='display:none;'>\r\n          ${this.ready===false ? html`${this.GetViewData()}`: nothing}            \r\n        </div> -->\r\n        <dragdrop-table .action=${this.actionModelForTable} .config=${this.config} .viewModelFromProcModel=${this.viewModelFromProcModel}\r\n          .data=${this.data}\r\n          .lang=${this.lang} .procName=${this.procName} .procInstanceName=${this.procInstanceName} .desktop=${this.desktop} > </dragdrop-table>\r\n      `\r\n    }\r\n    render(){\r\n      return html`\r\n        <dragdrop-table .action=${this.actionModelForTable} .config=${this.config} .viewModelFromProcModel=${this.viewModelFromProcModel}\r\n          .data=${this.data}\r\n          .lang=${this.lang} .procName=${this.procName} .procInstanceName=${this.procInstanceName} .desktop=${this.desktop} > </dragdrop-table>\r\n      `\r\n    }\r\n    renderOriginal() {\r\n      return html`\r\n        <div>      \r\n          ${this.topCompositionBlock()} \r\n          ${this.abstractBlock()}\r\n          ${this.bottomCompositionBlock()}  \r\n          <div style=\"display:none\">\r\n            ${this.ready===false&&this.viewModelFromProcModel.tabs===undefined ? html`${this.GetViewData()}`: nothing}            \r\n          </div>\r\n         \r\n        </div>\r\n      `\r\n    }\r\n    loadDialogs(){\r\n      //console.log('loadDialogs')\r\n      return html`\r\n      ${this.credentialsDialog()}\r\n      ${this.genericFormDialog()}\r\n      ${this.reactivateObjectsDialog()}\r\n      ${this.moduleEnvMonitMicroorganismsDialogAdd()}\r\n      ${this.moduleEnvMonitMicroorganismsDialogRemove()}\r\n      ${this.pointTemplate()}\r\n      ${this.resultTemplate()}\r\n      ${this.takePictureFormDialog()}\r\n      \r\n      ${this.investigationTemplate()}\r\n      ${this.filterName==\"open\" ?\r\n        html`${this.decisionTemplate()}` : nothing\r\n      }  \r\n      ${this.decisionTemplate()}\r\n    `}\r\n  topCompositionBlock(){\r\n      return html`\r\n      ${this.viewModelFromProcModel.topCompositions ?\r\n        html`${this.viewModelFromProcModel.topCompositions.map(c => \r\n          html`<templates- id=\"topComp\"\r\n            .windowOpenable=${this.windowOpenable}\r\n            .sopsPassed=${this.sopsPassed}\r\n            .templateName=${c.templateName} .buttons=${c.buttons} .lang=${this.lang}\r\n            .viewName=${this.viewName} .filterName=${this.filterName}\r\n            .viewModelFromProcModel=${this.viewModelFromProcModel}\r\n            .procInstanceName=${this.procInstanceName}\r\n            @program-changedzzzz=${e=>this.gridItems=e.detail}\r\n            @program-changed=${this.programChangedAction}\r\n            @template-event=${this.templateEvent}></templates->           \r\n          `\r\n        )}` :\r\n        nothing\r\n      }\r\n      `\r\n  }\r\n\r\n  setReady(){\r\n    this.ready=true\r\n  }\r\n  programChangedAction(e){\r\n    if (e===undefined){return}\r\n    this.ready=true\r\n    this.gridItems=e.detail\r\n\r\n  }\r\n  bottomCompositionBlock(){\r\n  return html`\r\n  ${this.viewModelFromProcModel.bottomCompositions ?\r\n      html`${this.viewModelFromProcModel.bottomCompositions.map(c =>                             \r\n      html`\r\n          ${c.elementName=='envmonit-batch-sampleincubation' ? html`                               \r\n          <div class=\"layout flex\">\r\n          <gridmodel-bottomcomp-sampleincubation id=${c.filter} .procInstanceName=${this.procInstanceName} .viewName=${this.viewName}\r\n              .lang=${this.lang}\r\n              .windowOpenable=${this.windowOpenable}\r\n              .sopsPassed=${this.sopsPassed}\r\n              .model=${c} .config=${this.config} .batchName=${this.batchName}\r\n              @reload-samples=${e=>this[e.detail.method]()}\r\n              @selected-incub=${this.filteringBatch}\r\n              @selected-batch=${this.filteringIncub}\r\n              @set-grid=${e=>this.setGrid(e.detail)}></gridmodel-bottomcomp-sampleincubation>\r\n          </div>\r\n          ` : nothing} \r\n          ${c.elementName=='chart' ? html`      \r\n          <div class=\"layout flex\">\r\n          <gridmodel-bottomcomp-chart id=${c.filter} .procInstanceName=${this.procInstanceName} .viewName=${this.viewName}\r\n          .selectedItems=${this.selectedItems} .lang=${this.lang}\r\n          .model=${c} .config=${this.config}></gridmodel-bottomcomp-chart>\r\n          </div>\r\n      ` : nothing} \r\n      `\r\n      )}` :\r\n      html``\r\n  }\r\n  `\r\n  }\r\n  activeItemChanged(e){    \r\n    if (e===undefined){return}\r\n    let d=true\r\n    d=this.disabledByCertification(this.viewModelFromProcModel.langConfig.gridActionOnClick)     \r\n    if (d) {\r\n       //alert('View in read only mode')\r\n      return\r\n    }\r\n    this.selectedItems=e.detail.value ? [e.detail.value] : []\r\n    if (this.selectedItems.length>0&&this.viewModelFromProcModel.langConfig.gridActionOnClick!==undefined){\r\n      //alert(this.viewModelFromProcModel.langConfig.gridActionOnClick.actionName)\r\n      this.GetAlternativeViewData(this.viewModelFromProcModel.langConfig.gridActionOnClick)\r\n    }\r\n\r\n  }\r\n  abstractBlock(){\r\n    //console.log('abstractBlock')\r\n    let addContextMenu=this.addContextMenu()    \r\n  return html`\r\n  ${this.loadDialogs()} \r\n  ${this.abstract ? \r\n      nothing :\r\n      html`\r\n        ${this.viewModelFromProcModel.topCompositions!==undefined ? nothing: html`${this.getTitle()}`}\r\n      \r\n        <div class=\"layout horizontal flex wrap\">\r\n            <div class=\"layout flex\">          \r\n            <div class=\"layout horizontal center flex wrap\">\r\n              ${this.getButton()}\r\n            </div>\r\n            ${this.ready ? \r\n              html`\r\n              ${addContextMenu!==undefined&&addContextMenu===true?html`\r\n                <vaadin-context-menu .items=${this.contextMenuItems} @item-selected=\"${this.contextMenuAction}\">\r\n                <vaadin-grid id=\"mainGrid\" theme=\"row-dividers\" column-reordering-allowed multi-sort \r\n                  @active-item-changed=${this.activeItemChanged}\r\n                  .items=${this.gridItems} .selectedItems=\"${this.selectedItems}\"\r\n                  ${gridRowDetailsRenderer(this.detailRenderer)}\r\n                  ${this.setCellListener()}                  \r\n                >\r\n                  ${this.gridList(this.viewModelFromProcModel)}\r\n                </vaadin-grid>\r\n                </vaadin-context-menu>`\r\n              :html`\r\n                <vaadin-grid id=\"mainGrid\" theme=\"row-dividers\" column-reordering-allowed multi-sort \r\n                @active-item-changed=${this.activeItemChanged}\r\n                .items=${this.gridItems} .selectedItems=\"${this.selectedItems}\"\r\n                ${gridRowDetailsRenderer(this.detailRenderer)}\r\n                ${this.setCellListener()}                \r\n                >\r\n                ${this.gridList(this.viewModelFromProcModel)}\r\n              </vaadin-grid>`\r\n              }\r\n              \r\n              <div id=\"rowTooltip\">&nbsp;</div>\r\n              ` :\r\n              html``\r\n          }\r\n          </div>   \r\n          <audit-dialog @sign-audit=${this.setAudit} .actionBeingPerformedModel=${this.actionBeingPerformedModel} \r\n          .filterName=${this.filterName} .lang=${this.lang} .windowOpenable=${this.windowOpenable}\r\n          .sopsPassed=${this.sopsPassed} .procInstanceName=${this.procInstanceName} .viewName=${this.viewName} \r\n          .viewModelFromProcModel=${this.viewModelFromProcModel}\r\n          .selectedItems=${this.selectedItems} .config=${this.config}></audit-dialog>\r\n\r\n\r\n        </div>\r\n      `\r\n  }    \r\n  `\r\n  }\r\n  contextMenuAction(e){\r\n    //console.log(e.target)\r\n    let selectedItem=e.target\r\n    if (selectedItem) {\r\n      //console.log(selectedItem.item)      \r\n    }        \r\n    this.actionMethod(e.detail.value.actionDef, e.detail.value.actionDef, null, null, this.selectedItems[0], false)\r\n  }\r\n  addContextMenu(){\r\n    if (this.viewModelFromProcModel.enableContextMenu!==undefined||this.viewModelFromProcModel.enableContextMenu===false){\r\n      return false\r\n    }\r\n    this.contextMenuItems=[]    \r\n      let menuItem={}\r\n      menuItem.component='hr'\r\n      this.contextMenuItems.push(menuItem)\r\n      if (this.viewModelFromProcModel.addActionsInContextMenu!==undefined&&this.viewModelFromProcModel.addActionsInContextMenu===true){\r\n        this.viewModelFromProcModel.actions.forEach(action => {\r\n          menuItem={}\r\n          menuItem.text=action.button.title['label_'+this.lang]\r\n          if ((action.button.requiresGridItemSelected===undefined||action.button.requiresGridItemSelected===true)&&(this.selectedItems===undefined||this.selectedItems.length==0)){\r\n            menuItem.disabled=true\r\n          }\r\n          menuItem.actionDef=action\r\n          this.contextMenuItems.push(menuItem)\r\n        })\r\n      }\r\n      if (this.viewModelFromProcModel.actionsForContextMenu!==undefined){\r\n        this.viewModelFromProcModel.actionsForContextMenu.forEach(action => {\r\n          menuItem={}\r\n          menuItem.text=action.button.title['label_'+this.lang]\r\n          if ((action.button.requiresGridItemSelected===undefined||action.button.requiresGridItemSelected===true)&&(this.selectedItems===undefined||this.selectedItems.length==0)){\r\n            menuItem.disabled=true\r\n          }\r\n          menuItem.actionDef=action\r\n          this.contextMenuItems.push(menuItem)\r\n        })\r\n      }\r\n      menuItem={}\r\n      menuItem.component='hr'\r\n      this.contextMenuItems.push(menuItem)    \r\n    return true\r\n    /*\r\n    ${this.btnHidden(action) ? nothing : \r\n      html`${action.button ?\r\n          html`${action.button.icon ?\r\n          html`<mwc-icon-button \r\n              class=\"${action.button.class} disabled${this.btnDisabled(action, sectionModel)}\"\r\n              icon=\"${action.button.icon}\" \r\n              title=\"${action.button.title['label_'+this.lang]}\" \r\n              ?disabled=${this.btnDisabled(action, sectionModel)}\r\n              ?hidden=${this.btnHidden(action)}\r\n              @click=${()=>this.actionMethod(action, sectionModel, null, null, data, isProcManagement)}></mwc-icon-button>` :\r\n    */\r\n  }\r\n\r\n//  ${this.resultTemplate()}\r\nget rowTooltip() {\r\n  return this.shadowRoot.querySelector(\"#rowTooltip\")\r\n}\r\n  get xtabsCompositionc() {return this.shadowRoot.querySelector(\"tabs-composition\")}\r\n\r\n  get batchElement() {return this.shadowRoot.querySelector(\"gridmodel-bottomcomp-sampleincubation#active_batches\")}\r\n  get incubElement() {return this.shadowRoot.querySelector(\"gridmodel-bottomcomp-sampleincubation#samplesWithAnyPendingIncubation\")}\r\n  get grid() {return this.shadowRoot.querySelector(\"vaadin-grid#mainGrid\")}\r\n  get chart() {return this.shadowRoot.querySelector(\"google-chart\")}   \r\n  get templates() {return this.shadowRoot.querySelector(\"templates-#topComp\")}\r\n  get audit() {return this.shadowRoot.querySelector(\"audit-dialog\")}    \r\n\r\n  templateEvent(e) {\r\n    console.log('templateEvent')\r\n    if (e.detail.calledActionIdx >= 0) {\r\n      this.selectedAction = ProceduresModel[this.procInstanceName][this.viewName].actions[e.detail.calledActionIdx]\r\n      this.reload()\r\n    }\r\n  }\r\n\r\n  showLockReason(i) {\r\n    //alert('showLockReason', i)\r\n    let labels = {\r\n      \"warning_reason_label_en\": \"Warning Reason\", \"warning_reason_label_es\": \"Razón Aviso\",\r\n      \"locking_reason_label_en\": \"Locking Reason\", \"locking_reason_label_es\": \"Razón Bloqueo\"\r\n    }\r\n    if (this.grid.items[i - 1].is_locked) {\r\n      this.rowTooltip.style.backgroundColor = \"#24C0EB\"\r\n      this.rowTooltip.style.visibility = \"visible\"\r\n      let txtValue=labels['locking_reason_label_' + this.lang] + \": \"\r\n      if (this.grid.items[i - 1].locking_reason===undefined||this.grid.items[i - 1].locking_reason[\"message_\" + this.lang]===undefined){\r\n        txtValue=txtValue+\"undefined\"\r\n      }else{\r\n        txtValue=txtValue+this.grid.items[i - 1].locking_reason[\"message_\" + this.lang]\r\n      }\r\n      this.rowTooltip.textContent = txtValue\r\n    } else if (this.grid.items[i - 1].warning_reason) {\r\n      this.rowTooltip.style.backgroundColor = \"#D6E9F8\"\r\n      this.rowTooltip.style.visibility = \"visible\"\r\n      let txtValue=labels['warning_reason_label_' + this.lang] + \": \"\r\n      if (this.grid.items[i - 1].warning_reason===undefined||this.grid.items[i - 1].warning_reason[\"message_\" + this.lang]===undefined){\r\n        txtValue=txtValue+\"undefined\"\r\n      }else{\r\n        txtValue=txtValue+this.grid.items[i - 1].warning_reason[\"message_\" + this.lang]\r\n      }\r\n    }\r\n  }\r\n\r\n  hideLockReason() {\r\n    this.rowTooltip.style.visibility = \"hidden\"\r\n  }\r\n\r\n  detailRenderer(result) {\r\n    //console.log('detailRenderer', result)\r\n    let labels = {\r\n      \"warning_reason_label_en\": \"Warning Reason\", \"warning_reason_label_es\": \"Razón Aviso\",\r\n      \"locking_reason_label_en\": \"Locking Reason\", \"locking_reason_label_es\": \"Razón Bloqueo\"\r\n    }\r\n    return html`\r\n      <div style=\"text-align:center;font-size:12px\">\r\n        <p>${result.spec_eval ?\r\n        html`${result.spec_eval == 'IN' ?\r\n          html`<mwc-icon style=\"color:green\">radio_button_checked</mwc-icon>` :\r\n          html`${result.spec_eval.toUpperCase().includes(\"OUT\") && result.spec_eval.toUpperCase().includes(\"SPEC\") ?\r\n            html`<mwc-icon style=\"color:red\">radio_button_checked</mwc-icon>` :\r\n            html`<mwc-icon style=\"color:orange\">radio_button_checked</mwc-icon>`\r\n            }`\r\n          }` :\r\n        html`<img style=\"height:24px; width: 24px;\" src=\"https://upload.wikimedia.org/wikipedia/commons/9/96/Button_Icon_White.svg\">`\r\n      }</p>\r\n        <p>${this.lang == \"en\" ? \"Method\" : \"Método\"}: ${result.method_name} (${result.method_version})</p>\r\n        <p>Range Rule: ${result.spec_rule_info[0].ruleRepresentation}</p>\r\n        <p>Range Evaluation: ${result.spec_eval} (${result.spec_eval_detail})</p>\r\n      ${result.is_locked ?\r\n        html`<p style=\"color:rgb(255 8 8)\">${labels['locking_reason_label_' + this.lang]}: ${result.locked_reason}</p>` : nothing\r\n      }\r\n        ${result.warning_reason ?\r\n        html`<p style=\"color:#0085ff\">${labels['warning_reason_label_' + this.lang]}: ${result.warning_reason[\"message_\" + this.lang]}</p>` : nothing\r\n      }\r\n      </div>\r\n    `\r\n  }  \r\n\r\n  setCellListener() {\r\n    // alert('setCellListener')\r\n    //console.log('setCellListener')\r\n    if (this.grid===undefined||this.grid===null){return}\r\n    this.rowTooltip.style.display = \"block\"\r\n    this.rowTooltip.style.visibility = \"hidden\"\r\n    this.rowTooltip.style.fontSize = \"12px\"\r\n    this.rowTooltip.style.color = \"white\"\r\n    let rows = this.grid.shadowRoot.querySelectorAll(\"tr[part=row]\")\r\n    rows.forEach((r, i) => {\r\n      if (i > 0 && this.grid.items[i - 1]) {\r\n        r.removeEventListener('mouseenter', () => this.showLockReason(i))\r\n        r.removeEventListener('mouseleave', this.hideLockReason.bind(this))\r\n      }\r\n      if (i > 0 && this.grid.items[i - 1] && (this.grid.items[i - 1].is_locked || this.grid.items[i - 1].warning_reason)) {\r\n        r.addEventListener('mouseenter', () => this.showLockReason(i))\r\n        r.addEventListener('mouseleave', this.hideLockReason.bind(this))\r\n      }\r\n    })    \r\n  }\r\n\r\n  }\r\n  window.customElements.define('drag-drop', DrapDrop);"],"names":[],"sourceRoot":""}