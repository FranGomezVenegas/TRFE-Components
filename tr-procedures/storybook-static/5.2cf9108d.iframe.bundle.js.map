{"version":3,"file":"5.2cf9108d.iframe.bundle.js","mappings":";;;;;AACA;;AC6VA;AACA;AACA;;;AAGA;;AAGA;;AAIA;;AAGA","sources":["webpack://@trazit/tr-procedures/./node_modules/@popperjs/core/dist/esm/utils/getBasePlacement.js","webpack://@trazit/tr-procedures/./node_modules/@spectrum-web-components/overlay/src/ActiveOverlay.js"],"sourcesContent":["import { auto } from \"../enums.js\";\nexport default function getBasePlacement(placement) {\n  return placement.split('-')[0];\n}","/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { __decorate } from \"tslib\";\nimport { html, ifDefined, property, SpectrumElement, } from '@spectrum-web-components/base';\nimport { reparentChildren } from '@spectrum-web-components/shared';\nimport { firstFocusableIn } from '@spectrum-web-components/shared/src/first-focusable-in.js';\nimport styles from './active-overlay.css.js';\nimport { applyMaxSize, createPopper, maxSize } from './popper.js';\nconst stateMachine = {\n    initial: 'idle',\n    states: {\n        idle: {\n            on: {\n                active: 'active',\n            },\n        },\n        active: {\n            on: {\n                visible: 'visible',\n                hiding: 'hiding',\n                idle: 'idle',\n            },\n        },\n        visible: {\n            on: {\n                hiding: 'hiding',\n                idle: 'idle',\n            },\n        },\n        hiding: {\n            on: {\n                dispose: 'dispose',\n            },\n        },\n        dispose: {\n            on: {\n                disposed: 'disposed',\n            },\n        },\n        disposed: {\n            on: {},\n        },\n    },\n};\nconst stateTransition = (state, event) => {\n    if (!state)\n        return stateMachine.initial;\n    /* c8 ignore next */\n    if (!event)\n        return state;\n    return stateMachine.states[state].on[event] || state;\n};\nconst parentOverlayOf = (el) => {\n    const closestOverlay = el.closest('active-overlay');\n    if (closestOverlay) {\n        return closestOverlay;\n    }\n    const rootNode = el.getRootNode();\n    if (rootNode.host) {\n        return parentOverlayOf(rootNode.host);\n    }\n    return null;\n};\n/**\n * @element active-overlay\n *\n * @slot - content to display in the overlay\n */\nexport class ActiveOverlay extends SpectrumElement {\n    constructor() {\n        super();\n        this._state = stateTransition();\n        this.animating = false;\n        this.theme = {};\n        this.tabbingAway = false;\n        this.offset = 6;\n        this.interaction = 'hover';\n        this.positionAnimationFrame = 0;\n        this.willNotifyClosed = false;\n        this.handleInlineTriggerKeydown = (event) => {\n            const { code, shiftKey } = event;\n            /* c8 ignore next */\n            if (code !== 'Tab')\n                return;\n            if (shiftKey) {\n                this.tabbingAway = true;\n                this.dispatchEvent(new Event('close'));\n                return;\n            }\n            event.stopPropagation();\n            event.preventDefault();\n            this.focus();\n        };\n        this.stealOverlayContentPromise = Promise.resolve();\n        this.stealOverlayContentPromise = new Promise((res) => (this.stealOverlayContentResolver = res));\n    }\n    get state() {\n        return this._state;\n    }\n    set state(state) {\n        const nextState = stateTransition(this.state, state);\n        if (nextState === this.state) {\n            return;\n        }\n        this._state = nextState;\n        if (this.state === 'active' ||\n            this.state === 'visible' ||\n            this.state === 'hiding') {\n            this.setAttribute('state', this.state);\n        }\n        else {\n            this.removeAttribute('state');\n        }\n    }\n    focus() {\n        const firstFocusable = firstFocusableIn(this);\n        if (firstFocusable) {\n            firstFocusable.focus();\n            /* c8 ignore next 3 */\n        }\n        else {\n            super.focus();\n        }\n        this.removeAttribute('tabindex');\n    }\n    get hasTheme() {\n        return !!this.theme.color || !!this.theme.scale || !!this.theme.lang;\n    }\n    static get styles() {\n        return [styles];\n    }\n    get hasModalRoot() {\n        return !!this._modalRoot;\n    }\n    feature() {\n        this.tabIndex = -1;\n        const parentOverlay = parentOverlayOf(this.trigger);\n        const parentIsModal = parentOverlay && parentOverlay.slot === 'open';\n        // If an overlay it triggered from within a \"modal\" overlay, it needs to continue\n        // to act like one to get treated correctly in regards to tab trapping.\n        if (this.interaction === 'modal' || parentIsModal || this._modalRoot) {\n            this.slot = 'open';\n            // If this isn't a modal root, walk up the overlays to the next modal root\n            // and \"feature\" each on of the intervening overlays.\n            if (this._modalRoot) {\n                parentOverlay === null || parentOverlay === void 0 ? void 0 : parentOverlay.feature();\n            }\n        }\n    }\n    obscure(nextOverlayInteraction) {\n        if (this.slot && nextOverlayInteraction === 'modal') {\n            this.removeAttribute('slot');\n            // Obscure upto and including the next modal root.\n            if (this.interaction !== 'modal') {\n                const parentOverlay = parentOverlayOf(this.trigger);\n                this._modalRoot = parentOverlay === null || parentOverlay === void 0 ? void 0 : parentOverlay.obscure(nextOverlayInteraction);\n                return this._modalRoot;\n            }\n            return this;\n        }\n        return undefined;\n    }\n    firstUpdated(changedProperties) {\n        super.firstUpdated(changedProperties);\n        /* c8 ignore next */\n        if (!this.overlayContent)\n            return;\n        this.stealOverlayContent(this.overlayContent);\n        /* c8 ignore next */\n        if (!this.overlayContent || !this.trigger)\n            return;\n        if (this.placement && this.placement !== 'none') {\n            this.popper = createPopper(this.virtualTrigger || this.trigger, this, {\n                placement: this.placement,\n                modifiers: [\n                    maxSize,\n                    applyMaxSize,\n                    {\n                        name: 'arrow',\n                        options: {\n                            element: this.overlayContentTip,\n                        },\n                    },\n                    {\n                        name: 'offset',\n                        options: {\n                            offset: [0, this.offset],\n                        },\n                    },\n                ],\n            });\n        }\n        this.state = 'active';\n        document.addEventListener('sp-update-overlays', () => {\n            this.updateOverlayPosition();\n            this.state = 'visible';\n        });\n        this.feature();\n        this.updateOverlayPosition()\n            .then(() => this.applyContentAnimation('sp-overlay-fade-in'))\n            .then(() => {\n            if (this.receivesFocus) {\n                this.focus();\n            }\n            this.trigger.dispatchEvent(new CustomEvent('sp-opened', {\n                bubbles: true,\n                composed: true,\n                cancelable: true,\n                detail: {\n                    interaction: this.interaction,\n                },\n            }));\n        });\n    }\n    updateOverlayPopperPlacement() {\n        /* c8 ignore next */\n        const activeWithContent = this.state === 'active' && this.overlayContent;\n        if (!activeWithContent)\n            return;\n        if (this.dataPopperPlacement) {\n            // Copy this attribute to the actual overlay node so that it can use\n            // the attribute for styling shadow DOM elements based on the side\n            // that popper has chosen for it\n            this.overlayContent.setAttribute('placement', this.dataPopperPlacement);\n        }\n        else if (this.originalPlacement) {\n            this.overlayContent.setAttribute('placement', this.originalPlacement);\n        }\n        else {\n            this.overlayContent.removeAttribute('placement');\n        }\n    }\n    updated(changedProperties) {\n        if (changedProperties.has('dataPopperPlacement')) {\n            this.updateOverlayPopperPlacement();\n        }\n    }\n    open(openDetail) {\n        this.extractDetail(openDetail);\n    }\n    extractDetail(detail) {\n        this.overlayContent = detail.content;\n        this.overlayContentTip = detail.contentTip;\n        this.trigger = detail.trigger;\n        this.virtualTrigger = detail.virtualTrigger;\n        this.placement = detail.placement;\n        this.offset = detail.offset;\n        this.interaction = detail.interaction;\n        this.theme = detail.theme;\n        this.receivesFocus = detail.receivesFocus;\n    }\n    dispose() {\n        /* c8 ignore next */\n        if (this.state !== 'dispose')\n            return;\n        /* c8 ignore next 4 */\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            delete this.timeout;\n        }\n        if (this.popper) {\n            this.popper.destroy();\n            this.popper = undefined;\n        }\n        this.trigger.removeEventListener('keydown', this.handleInlineTriggerKeydown);\n        this.returnOverlayContent();\n        this.state = 'disposed';\n        if (this.willNotifyClosed) {\n            this.overlayContent.dispatchEvent(new Event('sp-overlay-closed'));\n            this.willNotifyClosed = false;\n        }\n    }\n    stealOverlayContent(element) {\n        this.originalPlacement = element.getAttribute('placement');\n        this.restoreContent = reparentChildren([element], this, (el) => {\n            const slotName = el.slot;\n            el.removeAttribute('slot');\n            return (el) => {\n                el.slot = slotName;\n            };\n        });\n        this.stealOverlayContentResolver();\n    }\n    returnOverlayContent() {\n        /* c8 ignore next */\n        if (!this.restoreContent)\n            return;\n        const [element] = this.restoreContent();\n        this.restoreContent = undefined;\n        this.willNotifyClosed = true;\n        if (this.originalPlacement) {\n            element.setAttribute('placement', this.originalPlacement);\n            delete this.originalPlacement;\n        }\n    }\n    async updateOverlayPosition() {\n        await (document.fonts ? document.fonts.ready : Promise.resolve());\n        if (this.popper) {\n            await this.popper.update();\n        }\n    }\n    async hide(animated = true) {\n        this.state = 'hiding';\n        if (animated) {\n            await this.applyContentAnimation('sp-overlay-fade-out');\n        }\n        this.state = 'dispose';\n    }\n    schedulePositionUpdate() {\n        // Edge needs a little time to update the DOM before computing the layout\n        cancelAnimationFrame(this.positionAnimationFrame);\n        this.positionAnimationFrame = requestAnimationFrame(() => this.updateOverlayPosition());\n    }\n    onSlotChange() {\n        this.schedulePositionUpdate();\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        this.schedulePositionUpdate();\n    }\n    applyContentAnimation(animation) {\n        return new Promise((resolve) => {\n            const contents = this.shadowRoot.querySelector('#contents');\n            const doneHandler = (event) => {\n                if (animation !== event.animationName)\n                    return;\n                contents.removeEventListener('animationend', doneHandler);\n                contents.removeEventListener('animationcancel', doneHandler);\n                this.animating = false;\n                resolve(event.type === 'animationcancel');\n            };\n            contents.addEventListener('animationend', doneHandler);\n            contents.addEventListener('animationcancel', doneHandler);\n            contents.style.animationName = animation;\n            this.animating = true;\n        });\n    }\n    renderTheme(content) {\n        const { color, scale, lang } = this.theme;\n        return html `\n            <sp-theme\n                color=${ifDefined(color)}\n                scale=${ifDefined(scale)}\n                lang=${ifDefined(lang)}\n                part=\"theme\"\n            >\n                ${content}\n            </sp-theme>\n        `;\n    }\n    render() {\n        const content = html `\n            <div id=\"contents\">\n                <slot @slotchange=${this.onSlotChange}></slot>\n            </div>\n        `;\n        return this.hasTheme ? this.renderTheme(content) : content;\n    }\n    static create(details) {\n        const overlay = new ActiveOverlay();\n        if (details.content) {\n            overlay.open(details);\n        }\n        return overlay;\n    }\n    async _getUpdateComplete() {\n        const complete = (await super._getUpdateComplete());\n        await this.stealOverlayContentPromise;\n        return complete;\n    }\n}\n__decorate([\n    property()\n], ActiveOverlay.prototype, \"_state\", void 0);\n__decorate([\n    property({ reflect: true, type: Boolean })\n], ActiveOverlay.prototype, \"animating\", void 0);\n__decorate([\n    property({ reflect: true })\n], ActiveOverlay.prototype, \"placement\", void 0);\n__decorate([\n    property({ attribute: false })\n], ActiveOverlay.prototype, \"theme\", void 0);\n__decorate([\n    property({ attribute: false })\n], ActiveOverlay.prototype, \"receivesFocus\", void 0);\n__decorate([\n    property({ attribute: 'data-popper-placement' })\n], ActiveOverlay.prototype, \"dataPopperPlacement\", void 0);\n//# sourceMappingURL=ActiveOverlay.js.map"],"names":[],"sourceRoot":""}