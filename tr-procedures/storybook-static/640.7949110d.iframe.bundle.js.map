{"version":3,"file":"640.7949110d.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;;;;;AAqDA;;;;;;;;;;;;;;;;;;AChDA;;;;;;;;AAmDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACmJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7LA;;;;;;;;;;;;;;;ACQA;;;;;;;;;;;;;;;;;;;;;;;ACHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;;;;;;;;;;;;;;;;;ACrGA;;;;;;;;;;;;;;;;;;;;AAoHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;;;;;;;;;;;;;ACtGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACgFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA;;;;;;;;;;;;;;;;;;;;;;;ACjNA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;;;;;;;;;;;;;;;;ACfA;;;;;;;;;;;ACsDA;;;;;;;;;;;;;;;;;;;;;;;ACTA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACiCA","sources":["webpack://@trazit/tr-procedures/./node_modules/@vaadin/accordion/src/vaadin-accordion-heading.js","webpack://@trazit/tr-procedures/./node_modules/@vaadin/accordion/src/vaadin-accordion-panel.js","webpack://@trazit/tr-procedures/./node_modules/@vaadin/details/node_modules/@vaadin/vaadin-lumo-styles/color.js","webpack://@trazit/tr-procedures/./node_modules/@vaadin/details/node_modules/@vaadin/vaadin-lumo-styles/sizing.js","webpack://@trazit/tr-procedures/./node_modules/@vaadin/details/node_modules/@vaadin/vaadin-lumo-styles/spacing.js","webpack://@trazit/tr-procedures/./node_modules/@vaadin/details/node_modules/@vaadin/vaadin-lumo-styles/style.js","webpack://@trazit/tr-procedures/./node_modules/@vaadin/details/node_modules/@vaadin/vaadin-lumo-styles/typography.js","webpack://@trazit/tr-procedures/./node_modules/@vaadin/details/theme/lumo/vaadin-details-summary-styles.js","webpack://@trazit/tr-procedures/./node_modules/@vaadin/accordion/theme/lumo/vaadin-accordion-heading-styles.js","webpack://@trazit/tr-procedures/./node_modules/@vaadin/accordion/node_modules/@vaadin/vaadin-lumo-styles/color.js","webpack://@trazit/tr-procedures/./node_modules/@vaadin/details/theme/lumo/vaadin-details-styles.js","webpack://@trazit/tr-procedures/./node_modules/@vaadin/accordion/theme/lumo/vaadin-accordion-panel-styles.js","webpack://@trazit/tr-procedures/./node_modules/@vaadin/accordion/src/vaadin-accordion.js","webpack://@trazit/tr-procedures/./node_modules/@vaadin/vertical-layout/node_modules/@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js","webpack://@trazit/tr-procedures/./node_modules/@vaadin/vertical-layout/theme/lumo/vaadin-vertical-layout-styles.js","webpack://@trazit/tr-procedures/./node_modules/@vaadin/vertical-layout/src/vaadin-vertical-layout.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2019 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ActiveMixin } from '@vaadin/a11y-base/src/active-mixin.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { accordionHeading } from './vaadin-accordion-heading-styles.js';\n\nregisterStyles('vaadin-accordion-heading', accordionHeading, { moduleId: 'vaadin-accordion-heading-styles' });\n\n/**\n * The accordion heading element.\n *\n * `vaadin-accordion-heading` is the element for the headings in the accordion.\n * As recommended by the WAI ARIA Best Practices, each heading needs to wrap a\n * `<button>`. This element puts that button in the Shadow DOM, as it is more\n * convenient to use and doesn't make styling of the heading more problematic.\n *\n * The WAI ARIA Best Practices also recommend setting `aria-level` depending\n * on what level the headings are. It is hard to determine the level of a heading\n * algorithmically, and setting it is not strictly required to have an accessible\n * accordion. To keep things easier to use, this element does not set `aria-level`\n * attribute but leaves that to the developer creating an accordion.\n *\n * ### Styling\n *\n * The following shadow DOM parts are exposed for styling:\n *\n * Part name  | Description\n * -----------|-------------------\n * `toggle`   | The icon element\n * `content`  | The content wrapper\n *\n * The following state attributes are available for styling:\n *\n * Attribute    | Description\n * -------------| -----------\n * `active`     | Set when the element is pressed down, either with mouse, touch or the keyboard.\n * `opened`     | Set when the collapsible content is expanded and visible.\n * `disabled`   | Set when the element is disabled.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes ActiveMixin\n * @mixes DirMixin\n * @mixes ThemableMixin\n */\nclass AccordionHeading extends ActiveMixin(DirMixin(ThemableMixin(PolymerElement))) {\n  static get is() {\n    return 'vaadin-accordion-heading';\n  }\n\n  static get template() {\n    return html`\n      <button id=\"button\" part=\"content\" disabled$=\"[[disabled]]\" aria-expanded$=\"[[__updateAriaExpanded(opened)]]\">\n        <span part=\"toggle\" aria-hidden=\"true\"></span>\n        <slot></slot>\n      </button>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * When true, the element is opened.\n       */\n      opened: {\n        type: Boolean,\n        reflectToAttribute: true,\n      },\n    };\n  }\n\n  /**\n   * @param {DocumentFragment} dom\n   * @return {null}\n   * @protected\n   * @override\n   */\n  _attachDom(dom) {\n    const root = this.attachShadow({ mode: 'open', delegatesFocus: true });\n    root.appendChild(dom);\n    return root;\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    // By default, if the user hasn't provided a custom role,\n    // the role attribute is set to \"heading\".\n    if (!this.hasAttribute('role')) {\n      this.setAttribute('role', 'heading');\n    }\n  }\n\n  /** @private */\n  __updateAriaExpanded(opened) {\n    return opened ? 'true' : 'false';\n  }\n}\n\ndefineCustomElement(AccordionHeading);\n\nexport { AccordionHeading };\n","/**\n * @license\n * Copyright (c) 2019 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './vaadin-accordion-heading.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { DelegateFocusMixin } from '@vaadin/a11y-base/src/delegate-focus-mixin.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { DelegateStateMixin } from '@vaadin/component-base/src/delegate-state-mixin.js';\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\nimport { CollapsibleMixin } from '@vaadin/details/src/collapsible-mixin.js';\nimport { SummaryController } from '@vaadin/details/src/summary-controller.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { accordionPanel } from './vaadin-accordion-panel-styles.js';\n\nregisterStyles('vaadin-accordion-panel', accordionPanel, { moduleId: 'vaadin-accordion-panel-styles' });\n\n/**\n * The accordion panel element.\n *\n * ### Styling\n *\n * The following shadow DOM parts are exposed for styling:\n *\n * Part name        | Description\n * -----------------|----------------\n * `content`        | The wrapper for the collapsible panel content.\n *\n * The following attributes are exposed for styling:\n *\n * Attribute    | Description\n * -------------| -----------\n * `opened`     | Set when the collapsible content is expanded and visible.\n * `disabled`   | Set when the element is disabled.\n * `focus-ring` | Set when the element is focused using the keyboard.\n * `focused`    | Set when the element is focused.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\n *\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes CollapsibleMixin\n * @mixes ControllerMixin\n * @mixes DelegateFocusMixin\n * @mixes DelegateStateMixin\n * @mixes ThemableMixin\n */\nclass AccordionPanel extends CollapsibleMixin(\n  DelegateFocusMixin(DelegateStateMixin(ThemableMixin(ControllerMixin(PolymerElement)))),\n) {\n  static get is() {\n    return 'vaadin-accordion-panel';\n  }\n\n  static get template() {\n    return html`\n      <slot name=\"summary\"></slot>\n\n      <div part=\"content\">\n        <slot></slot>\n      </div>\n\n      <slot name=\"tooltip\"></slot>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * A text that is displayed in the heading, if no\n       * element is assigned to the `summary` slot.\n       */\n      summary: {\n        type: String,\n        observer: '_summaryChanged',\n      },\n    };\n  }\n\n  static get observers() {\n    return ['__updateAriaAttributes(focusElement, _contentElements)'];\n  }\n\n  static get delegateAttrs() {\n    return ['theme'];\n  }\n\n  static get delegateProps() {\n    return ['disabled', 'opened'];\n  }\n\n  constructor() {\n    super();\n\n    this._summaryController = new SummaryController(this, 'vaadin-accordion-heading');\n    this._summaryController.addEventListener('slot-content-changed', (event) => {\n      const { node } = event.target;\n\n      this._setFocusElement(node);\n      this.stateTarget = node;\n\n      this._tooltipController.setTarget(node);\n    });\n\n    this._tooltipController = new TooltipController(this);\n    this._tooltipController.setPosition('bottom-start');\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.addController(this._summaryController);\n    this.addController(this._tooltipController);\n  }\n\n  /**\n   * Override method inherited from `DisabledMixin`\n   * to not set `aria-disabled` on the host element.\n   *\n   * @protected\n   * @override\n   */\n  _setAriaDisabled() {\n    // The `aria-disabled` is set on the details summary.\n  }\n\n  /** @private */\n  _summaryChanged(summary) {\n    this._summaryController.setSummary(summary);\n  }\n\n  /** @private */\n  __updateAriaAttributes(focusElement, contentElements) {\n    if (focusElement && contentElements) {\n      const node = contentElements[0];\n\n      if (node) {\n        node.setAttribute('role', 'region');\n        node.setAttribute('aria-labelledby', focusElement.id);\n      }\n\n      if (node && node.id) {\n        focusElement.setAttribute('aria-controls', node.id);\n      } else {\n        focusElement.removeAttribute('aria-controls');\n      }\n    }\n  }\n}\n\ndefineCustomElement(AccordionPanel);\n\nexport { AccordionPanel };\n","/**\n * @license\n * Copyright (c) 2017 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './version.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { addLumoGlobalStyles } from './global.js';\n\nconst colorBase = css`\n  :host {\n    /* Base (background) */\n    --lumo-base-color: #fff;\n\n    /* Tint */\n    --lumo-tint-5pct: hsla(0, 0%, 100%, 0.3);\n    --lumo-tint-10pct: hsla(0, 0%, 100%, 0.37);\n    --lumo-tint-20pct: hsla(0, 0%, 100%, 0.44);\n    --lumo-tint-30pct: hsla(0, 0%, 100%, 0.5);\n    --lumo-tint-40pct: hsla(0, 0%, 100%, 0.57);\n    --lumo-tint-50pct: hsla(0, 0%, 100%, 0.64);\n    --lumo-tint-60pct: hsla(0, 0%, 100%, 0.7);\n    --lumo-tint-70pct: hsla(0, 0%, 100%, 0.77);\n    --lumo-tint-80pct: hsla(0, 0%, 100%, 0.84);\n    --lumo-tint-90pct: hsla(0, 0%, 100%, 0.9);\n    --lumo-tint: #fff;\n\n    /* Shade */\n    --lumo-shade-5pct: hsla(214, 61%, 25%, 0.05);\n    --lumo-shade-10pct: hsla(214, 57%, 24%, 0.1);\n    --lumo-shade-20pct: hsla(214, 53%, 23%, 0.16);\n    --lumo-shade-30pct: hsla(214, 50%, 22%, 0.26);\n    --lumo-shade-40pct: hsla(214, 47%, 21%, 0.38);\n    --lumo-shade-50pct: hsla(214, 45%, 20%, 0.52);\n    --lumo-shade-60pct: hsla(214, 43%, 19%, 0.6);\n    --lumo-shade-70pct: hsla(214, 42%, 18%, 0.69);\n    --lumo-shade-80pct: hsla(214, 41%, 17%, 0.83);\n    --lumo-shade-90pct: hsla(214, 40%, 16%, 0.94);\n    --lumo-shade: hsl(214, 35%, 15%);\n\n    /* Contrast */\n    --lumo-contrast-5pct: var(--lumo-shade-5pct);\n    --lumo-contrast-10pct: var(--lumo-shade-10pct);\n    --lumo-contrast-20pct: var(--lumo-shade-20pct);\n    --lumo-contrast-30pct: var(--lumo-shade-30pct);\n    --lumo-contrast-40pct: var(--lumo-shade-40pct);\n    --lumo-contrast-50pct: var(--lumo-shade-50pct);\n    --lumo-contrast-60pct: var(--lumo-shade-60pct);\n    --lumo-contrast-70pct: var(--lumo-shade-70pct);\n    --lumo-contrast-80pct: var(--lumo-shade-80pct);\n    --lumo-contrast-90pct: var(--lumo-shade-90pct);\n    --lumo-contrast: var(--lumo-shade);\n\n    /* Text */\n    --lumo-header-text-color: var(--lumo-contrast);\n    --lumo-body-text-color: var(--lumo-contrast-90pct);\n    --lumo-secondary-text-color: var(--lumo-contrast-70pct);\n    --lumo-tertiary-text-color: var(--lumo-contrast-50pct);\n    --lumo-disabled-text-color: var(--lumo-contrast-30pct);\n\n    /* Primary */\n    --lumo-primary-color: hsl(214, 100%, 48%);\n    --lumo-primary-color-50pct: hsla(214, 100%, 49%, 0.76);\n    --lumo-primary-color-10pct: hsla(214, 100%, 60%, 0.13);\n    --lumo-primary-text-color: hsl(214, 100%, 43%);\n    --lumo-primary-contrast-color: #fff;\n\n    /* Error */\n    --lumo-error-color: hsl(3, 85%, 48%);\n    --lumo-error-color-50pct: hsla(3, 85%, 49%, 0.5);\n    --lumo-error-color-10pct: hsla(3, 85%, 49%, 0.1);\n    --lumo-error-text-color: hsl(3, 89%, 42%);\n    --lumo-error-contrast-color: #fff;\n\n    /* Success */\n    --lumo-success-color: hsl(145, 72%, 30%);\n    --lumo-success-color-50pct: hsla(145, 72%, 31%, 0.5);\n    --lumo-success-color-10pct: hsla(145, 72%, 31%, 0.1);\n    --lumo-success-text-color: hsl(145, 85%, 25%);\n    --lumo-success-contrast-color: #fff;\n\n    /* Warning */\n    --lumo-warning-color: hsl(48, 100%, 50%);\n    --lumo-warning-color-10pct: hsla(48, 100%, 50%, 0.25);\n    --lumo-warning-text-color: hsl(32, 100%, 30%);\n    --lumo-warning-contrast-color: var(--lumo-shade-90pct);\n  }\n\n  /* forced-colors mode adjustments */\n  @media (forced-colors: active) {\n    html {\n      --lumo-disabled-text-color: GrayText;\n    }\n  }\n`;\n\naddLumoGlobalStyles('color-props', colorBase);\n\nconst color = css`\n  [theme~='dark'] {\n    /* Base (background) */\n    --lumo-base-color: hsl(214, 35%, 21%);\n\n    /* Tint */\n    --lumo-tint-5pct: hsla(214, 65%, 85%, 0.06);\n    --lumo-tint-10pct: hsla(214, 60%, 80%, 0.14);\n    --lumo-tint-20pct: hsla(214, 64%, 82%, 0.23);\n    --lumo-tint-30pct: hsla(214, 69%, 84%, 0.32);\n    --lumo-tint-40pct: hsla(214, 73%, 86%, 0.41);\n    --lumo-tint-50pct: hsla(214, 78%, 88%, 0.5);\n    --lumo-tint-60pct: hsla(214, 82%, 90%, 0.58);\n    --lumo-tint-70pct: hsla(214, 87%, 92%, 0.69);\n    --lumo-tint-80pct: hsla(214, 91%, 94%, 0.8);\n    --lumo-tint-90pct: hsla(214, 96%, 96%, 0.9);\n    --lumo-tint: hsl(214, 100%, 98%);\n\n    /* Shade */\n    --lumo-shade-5pct: hsla(214, 0%, 0%, 0.07);\n    --lumo-shade-10pct: hsla(214, 4%, 2%, 0.15);\n    --lumo-shade-20pct: hsla(214, 8%, 4%, 0.23);\n    --lumo-shade-30pct: hsla(214, 12%, 6%, 0.32);\n    --lumo-shade-40pct: hsla(214, 16%, 8%, 0.41);\n    --lumo-shade-50pct: hsla(214, 20%, 10%, 0.5);\n    --lumo-shade-60pct: hsla(214, 24%, 12%, 0.6);\n    --lumo-shade-70pct: hsla(214, 28%, 13%, 0.7);\n    --lumo-shade-80pct: hsla(214, 32%, 13%, 0.8);\n    --lumo-shade-90pct: hsla(214, 33%, 13%, 0.9);\n    --lumo-shade: hsl(214, 33%, 13%);\n\n    /* Contrast */\n    --lumo-contrast-5pct: var(--lumo-tint-5pct);\n    --lumo-contrast-10pct: var(--lumo-tint-10pct);\n    --lumo-contrast-20pct: var(--lumo-tint-20pct);\n    --lumo-contrast-30pct: var(--lumo-tint-30pct);\n    --lumo-contrast-40pct: var(--lumo-tint-40pct);\n    --lumo-contrast-50pct: var(--lumo-tint-50pct);\n    --lumo-contrast-60pct: var(--lumo-tint-60pct);\n    --lumo-contrast-70pct: var(--lumo-tint-70pct);\n    --lumo-contrast-80pct: var(--lumo-tint-80pct);\n    --lumo-contrast-90pct: var(--lumo-tint-90pct);\n    --lumo-contrast: var(--lumo-tint);\n\n    /* Text */\n    --lumo-header-text-color: var(--lumo-contrast);\n    --lumo-body-text-color: var(--lumo-contrast-90pct);\n    --lumo-secondary-text-color: var(--lumo-contrast-70pct);\n    --lumo-tertiary-text-color: var(--lumo-contrast-50pct);\n    --lumo-disabled-text-color: var(--lumo-contrast-30pct);\n\n    /* Primary */\n    --lumo-primary-color: hsl(214, 90%, 48%);\n    --lumo-primary-color-50pct: hsla(214, 90%, 70%, 0.69);\n    --lumo-primary-color-10pct: hsla(214, 90%, 55%, 0.13);\n    --lumo-primary-text-color: hsl(214, 90%, 77%);\n    --lumo-primary-contrast-color: #fff;\n\n    /* Error */\n    --lumo-error-color: hsl(3, 79%, 49%);\n    --lumo-error-color-50pct: hsla(3, 75%, 62%, 0.5);\n    --lumo-error-color-10pct: hsla(3, 75%, 62%, 0.14);\n    --lumo-error-text-color: hsl(3, 100%, 80%);\n\n    /* Success */\n    --lumo-success-color: hsl(145, 72%, 30%);\n    --lumo-success-color-50pct: hsla(145, 92%, 51%, 0.5);\n    --lumo-success-color-10pct: hsla(145, 92%, 51%, 0.1);\n    --lumo-success-text-color: hsl(145, 85%, 46%);\n\n    /* Warning */\n    --lumo-warning-color: hsl(43, 100%, 48%);\n    --lumo-warning-color-10pct: hsla(40, 100%, 50%, 0.2);\n    --lumo-warning-text-color: hsl(45, 100%, 60%);\n    --lumo-warning-contrast-color: var(--lumo-shade-90pct);\n  }\n\n  html {\n    color: var(--lumo-body-text-color);\n    background-color: var(--lumo-base-color);\n    color-scheme: light;\n  }\n\n  [theme~='dark'] {\n    color: var(--lumo-body-text-color);\n    background-color: var(--lumo-base-color);\n    color-scheme: dark;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    color: var(--lumo-header-text-color);\n  }\n\n  a:where(:any-link) {\n    color: var(--lumo-primary-text-color);\n  }\n\n  a:not(:any-link) {\n    color: var(--lumo-disabled-text-color);\n  }\n\n  blockquote {\n    color: var(--lumo-secondary-text-color);\n  }\n\n  code,\n  pre {\n    background-color: var(--lumo-contrast-10pct);\n    border-radius: var(--lumo-border-radius-m);\n  }\n`;\n\nregisterStyles('', color, { moduleId: 'lumo-color' });\n\nexport { colorBase, color };\n","/**\n * @license\n * Copyright (c) 2017 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './version.js';\nimport { css } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { addLumoGlobalStyles } from './global.js';\n\nconst sizing = css`\n  :host {\n    --lumo-size-xs: 1.625rem;\n    --lumo-size-s: 1.875rem;\n    --lumo-size-m: 2.25rem;\n    --lumo-size-l: 2.75rem;\n    --lumo-size-xl: 3.5rem;\n\n    /* Icons */\n    --lumo-icon-size-s: 1.25em;\n    --lumo-icon-size-m: 1.5em;\n    --lumo-icon-size-l: 2.25em;\n    /* For backwards compatibility */\n    --lumo-icon-size: var(--lumo-icon-size-m);\n  }\n`;\n\naddLumoGlobalStyles('sizing-props', sizing);\n\nexport { sizing };\n","/**\n * @license\n * Copyright (c) 2017 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './version.js';\nimport { css } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { addLumoGlobalStyles } from './global.js';\n\nconst spacing = css`\n  :host {\n    /* Square */\n    --lumo-space-xs: 0.25rem;\n    --lumo-space-s: 0.5rem;\n    --lumo-space-m: 1rem;\n    --lumo-space-l: 1.5rem;\n    --lumo-space-xl: 2.5rem;\n\n    /* Wide */\n    --lumo-space-wide-xs: calc(var(--lumo-space-xs) / 2) var(--lumo-space-xs);\n    --lumo-space-wide-s: calc(var(--lumo-space-s) / 2) var(--lumo-space-s);\n    --lumo-space-wide-m: calc(var(--lumo-space-m) / 2) var(--lumo-space-m);\n    --lumo-space-wide-l: calc(var(--lumo-space-l) / 2) var(--lumo-space-l);\n    --lumo-space-wide-xl: calc(var(--lumo-space-xl) / 2) var(--lumo-space-xl);\n\n    /* Tall */\n    --lumo-space-tall-xs: var(--lumo-space-xs) calc(var(--lumo-space-xs) / 2);\n    --lumo-space-tall-s: var(--lumo-space-s) calc(var(--lumo-space-s) / 2);\n    --lumo-space-tall-m: var(--lumo-space-m) calc(var(--lumo-space-m) / 2);\n    --lumo-space-tall-l: var(--lumo-space-l) calc(var(--lumo-space-l) / 2);\n    --lumo-space-tall-xl: var(--lumo-space-xl) calc(var(--lumo-space-xl) / 2);\n  }\n`;\n\naddLumoGlobalStyles('spacing-props', spacing);\n\nexport { spacing };\n","/**\n * @license\n * Copyright (c) 2017 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './version.js';\nimport { css } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { addLumoGlobalStyles } from './global.js';\n\nconst style = css`\n  :host {\n    /* Border radius */\n    --lumo-border-radius-s: 0.25em; /* Checkbox, badge, date-picker year indicator, etc */\n    --lumo-border-radius-m: var(--lumo-border-radius, 0.25em); /* Button, text field, menu overlay, etc */\n    --lumo-border-radius-l: 0.5em; /* Dialog, notification, etc */\n\n    /* Shadow */\n    --lumo-box-shadow-xs: 0 1px 4px -1px var(--lumo-shade-50pct);\n    --lumo-box-shadow-s: 0 2px 4px -1px var(--lumo-shade-20pct), 0 3px 12px -1px var(--lumo-shade-30pct);\n    --lumo-box-shadow-m: 0 2px 6px -1px var(--lumo-shade-20pct), 0 8px 24px -4px var(--lumo-shade-40pct);\n    --lumo-box-shadow-l: 0 3px 18px -2px var(--lumo-shade-20pct), 0 12px 48px -6px var(--lumo-shade-40pct);\n    --lumo-box-shadow-xl: 0 4px 24px -3px var(--lumo-shade-20pct), 0 18px 64px -8px var(--lumo-shade-40pct);\n\n    /* Clickable element cursor */\n    --lumo-clickable-cursor: default;\n  }\n`;\n\n/**\n * Default values for component-specific custom properties.\n */\nconst globals = css`\n  html {\n    /* Button */\n    --vaadin-button-background: var(--lumo-contrast-5pct);\n    --vaadin-button-border: none;\n    --vaadin-button-border-radius: var(--lumo-border-radius-m);\n    --vaadin-button-font-size: var(--lumo-font-size-m);\n    --vaadin-button-font-weight: 500;\n    --vaadin-button-height: var(--lumo-size-m);\n    --vaadin-button-margin: var(--lumo-space-xs) 0;\n    --vaadin-button-min-width: calc(var(--vaadin-button-height) * 2);\n    --vaadin-button-padding: 0 calc(var(--vaadin-button-height) / 3 + var(--lumo-border-radius-m) / 2);\n    --vaadin-button-text-color: var(--lumo-primary-text-color);\n    --vaadin-button-primary-background: var(--lumo-primary-color);\n    --vaadin-button-primary-border: none;\n    --vaadin-button-primary-font-weight: 600;\n    --vaadin-button-primary-text-color: var(--lumo-primary-contrast-color);\n    --vaadin-button-tertiary-background: transparent !important;\n    --vaadin-button-tertiary-text-color: var(--lumo-primary-text-color);\n    --vaadin-button-tertiary-font-weight: 500;\n    --vaadin-button-tertiary-padding: 0 calc(var(--vaadin-button-height) / 6);\n    /* Checkbox */\n    --vaadin-checkbox-background: var(--lumo-contrast-20pct);\n    --vaadin-checkbox-background-hover: var(--lumo-contrast-30pct);\n    --vaadin-checkbox-border-radius: var(--lumo-border-radius-s);\n    --vaadin-checkbox-checkmark-char: var(--lumo-icons-checkmark);\n    --vaadin-checkbox-checkmark-char-indeterminate: '';\n    --vaadin-checkbox-checkmark-color: var(--lumo-primary-contrast-color);\n    --vaadin-checkbox-checkmark-size: calc(var(--vaadin-checkbox-size) + 2px);\n    --vaadin-checkbox-label-color: var(--lumo-body-text-color);\n    --vaadin-checkbox-label-font-size: var(--lumo-font-size-m);\n    --vaadin-checkbox-label-padding: var(--lumo-space-xs) var(--lumo-space-s) var(--lumo-space-xs) var(--lumo-space-xs);\n    --vaadin-checkbox-size: calc(var(--lumo-size-m) / 2);\n    /* Radio button */\n    --vaadin-radio-button-background: var(--lumo-contrast-20pct);\n    --vaadin-radio-button-background-hover: var(--lumo-contrast-30pct);\n    --vaadin-radio-button-dot-color: var(--lumo-primary-contrast-color);\n    --vaadin-radio-button-dot-size: 3px;\n    --vaadin-radio-button-label-color: var(--lumo-body-text-color);\n    --vaadin-radio-button-label-font-size: var(--lumo-font-size-m);\n    --vaadin-radio-button-label-padding: var(--lumo-space-xs) var(--lumo-space-s) var(--lumo-space-xs)\n      var(--lumo-space-xs);\n    --vaadin-radio-button-size: calc(var(--lumo-size-m) / 2);\n    --vaadin-selection-color: var(--lumo-primary-color);\n    --vaadin-selection-color-text: var(--lumo-primary-text-color);\n    --vaadin-input-field-border-radius: var(--lumo-border-radius-m);\n    --vaadin-focus-ring-color: var(--lumo-primary-color-50pct);\n    --vaadin-focus-ring-width: 2px;\n    /* Label */\n    --vaadin-input-field-label-color: var(--lumo-secondary-text-color);\n    --vaadin-input-field-focused-label-color: var(--lumo-primary-text-color);\n    --vaadin-input-field-hovered-label-color: var(--lumo-body-text-color);\n    --vaadin-input-field-label-font-size: var(--lumo-font-size-s);\n    --vaadin-input-field-label-font-weight: 500;\n    /* Helper */\n    --vaadin-input-field-helper-color: var(--lumo-secondary-text-color);\n    --vaadin-input-field-helper-font-size: var(--lumo-font-size-xs);\n    --vaadin-input-field-helper-font-weight: 400;\n    --vaadin-input-field-helper-spacing: 0.4em;\n    /* Error message */\n    --vaadin-input-field-error-color: var(--lumo-error-text-color);\n    --vaadin-input-field-error-font-size: var(--lumo-font-size-xs);\n    --vaadin-input-field-error-font-weight: 400;\n    /* Input field */\n    --vaadin-input-field-background: var(--lumo-contrast-10pct);\n    --vaadin-input-field-icon-color: var(--lumo-contrast-60pct);\n    --vaadin-input-field-icon-size: var(--lumo-icon-size-m);\n    --vaadin-input-field-invalid-background: var(--lumo-error-color-10pct);\n    --vaadin-input-field-invalid-hover-highlight: var(--lumo-error-color-50pct);\n    --vaadin-input-field-height: var(--lumo-size-m);\n    --vaadin-input-field-hover-highlight: var(--lumo-contrast-50pct);\n    --vaadin-input-field-placeholder-color: var(--lumo-secondary-text-color);\n    --vaadin-input-field-readonly-border: 1px dashed var(--lumo-contrast-30pct);\n    --vaadin-input-field-value-color: var(--lumo-body-text-color);\n    --vaadin-input-field-value-font-size: var(--lumo-font-size-m);\n    --vaadin-input-field-value-font-weight: 400;\n  }\n`;\n\naddLumoGlobalStyles('style-props', style);\n\nexport { globals, style };\n","/**\n * @license\n * Copyright (c) 2017 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './version.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { addLumoGlobalStyles } from './global.js';\n\nconst font = css`\n  :host {\n    /* prettier-ignore */\n    --lumo-font-family: -apple-system, BlinkMacSystemFont, 'Roboto', 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';\n\n    /* Font sizes */\n    --lumo-font-size-xxs: 0.75rem;\n    --lumo-font-size-xs: 0.8125rem;\n    --lumo-font-size-s: 0.875rem;\n    --lumo-font-size-m: 1rem;\n    --lumo-font-size-l: 1.125rem;\n    --lumo-font-size-xl: 1.375rem;\n    --lumo-font-size-xxl: 1.75rem;\n    --lumo-font-size-xxxl: 2.5rem;\n\n    /* Line heights */\n    --lumo-line-height-xs: 1.25;\n    --lumo-line-height-s: 1.375;\n    --lumo-line-height-m: 1.625;\n  }\n`;\n\nconst typography = css`\n  body,\n  :host {\n    font-family: var(--lumo-font-family);\n    font-size: var(--lumo-font-size-m);\n    line-height: var(--lumo-line-height-m);\n    -webkit-text-size-adjust: 100%;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  small,\n  [theme~='font-size-s'] {\n    font-size: var(--lumo-font-size-s);\n    line-height: var(--lumo-line-height-s);\n  }\n\n  [theme~='font-size-xs'] {\n    font-size: var(--lumo-font-size-xs);\n    line-height: var(--lumo-line-height-xs);\n  }\n\n  :where(h1, h2, h3, h4, h5, h6) {\n    font-weight: 600;\n    line-height: var(--lumo-line-height-xs);\n    margin-block: 0;\n  }\n\n  :where(h1) {\n    font-size: var(--lumo-font-size-xxxl);\n  }\n\n  :where(h2) {\n    font-size: var(--lumo-font-size-xxl);\n  }\n\n  :where(h3) {\n    font-size: var(--lumo-font-size-xl);\n  }\n\n  :where(h4) {\n    font-size: var(--lumo-font-size-l);\n  }\n\n  :where(h5) {\n    font-size: var(--lumo-font-size-m);\n  }\n\n  :where(h6) {\n    font-size: var(--lumo-font-size-xs);\n    text-transform: uppercase;\n    letter-spacing: 0.03em;\n  }\n\n  p,\n  blockquote {\n    margin-top: 0.5em;\n    margin-bottom: 0.75em;\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  a:where(:any-link):hover {\n    text-decoration: underline;\n  }\n\n  hr {\n    display: block;\n    align-self: stretch;\n    height: 1px;\n    border: 0;\n    padding: 0;\n    margin: var(--lumo-space-s) calc(var(--lumo-border-radius-m) / 2);\n    background-color: var(--lumo-contrast-10pct);\n  }\n\n  blockquote {\n    border-left: 2px solid var(--lumo-contrast-30pct);\n  }\n\n  b,\n  strong {\n    font-weight: 600;\n  }\n\n  /* RTL specific styles */\n  blockquote[dir='rtl'] {\n    border-left: none;\n    border-right: 2px solid var(--lumo-contrast-30pct);\n  }\n`;\n\nregisterStyles('', typography, { moduleId: 'lumo-typography' });\naddLumoGlobalStyles('typography-props', font);\n\nexport { font, typography };\n","import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/font-icons.js';\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport '@vaadin/vaadin-lumo-styles/typography.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst detailsSummary = css`\n  :host {\n    display: flex;\n    align-items: center;\n    width: 100%;\n    outline: none;\n    padding: var(--lumo-space-s) 0;\n    box-sizing: border-box;\n    font-family: var(--lumo-font-family);\n    font-size: var(--lumo-font-size-m);\n    font-weight: 500;\n    line-height: var(--lumo-line-height-xs);\n    color: var(--lumo-secondary-text-color);\n    background-color: inherit;\n    border-radius: var(--lumo-border-radius-m);\n    cursor: var(--lumo-clickable-cursor);\n    -webkit-tap-highlight-color: transparent;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  :host([disabled]),\n  :host([disabled]) [part='toggle'] {\n    color: var(--lumo-disabled-text-color);\n    cursor: default;\n  }\n\n  @media (hover: hover) {\n    :host(:hover:not([disabled])),\n    :host(:hover:not([disabled])) [part='toggle'] {\n      color: var(--lumo-contrast-80pct);\n    }\n  }\n\n  [part='toggle'] {\n    display: block;\n    width: 1em;\n    height: 1em;\n    margin-left: calc(var(--lumo-space-xs) * -1);\n    margin-right: var(--lumo-space-xs);\n    font-size: var(--lumo-icon-size-s);\n    line-height: 1;\n    color: var(--lumo-contrast-60pct);\n    font-family: 'lumo-icons';\n    cursor: var(--lumo-clickable-cursor);\n  }\n\n  [part='toggle']::before {\n    content: var(--lumo-icons-angle-right);\n  }\n\n  :host([opened]) [part='toggle'] {\n    transform: rotate(90deg);\n  }\n\n  /* RTL styles */\n  :host([dir='rtl']) [part='toggle'] {\n    margin-left: var(--lumo-space-xs);\n    margin-right: calc(var(--lumo-space-xs) * -1);\n  }\n\n  :host([dir='rtl']) [part='toggle']::before {\n    content: var(--lumo-icons-angle-left);\n  }\n\n  :host([opened][dir='rtl']) [part='toggle'] {\n    transform: rotate(-90deg);\n  }\n\n  /* Small */\n  :host([theme~='small']) {\n    padding-top: var(--lumo-space-xs);\n    padding-bottom: var(--lumo-space-xs);\n  }\n\n  :host([theme~='small']) [part='toggle'] {\n    margin-right: calc(var(--lumo-space-xs) / 2);\n  }\n\n  :host([theme~='small'][dir='rtl']) [part='toggle'] {\n    margin-left: calc(var(--lumo-space-xs) / 2);\n  }\n\n  /* Filled */\n  :host([theme~='filled']) {\n    padding: var(--lumo-space-s) calc(var(--lumo-space-s) + var(--lumo-space-xs) / 2);\n  }\n\n  /* Reverse */\n  :host([theme~='reverse']) {\n    justify-content: space-between;\n  }\n\n  :host([theme~='reverse']) [part='toggle'] {\n    order: 1;\n    margin-right: 0;\n  }\n\n  :host([theme~='reverse'][dir='rtl']) [part='toggle'] {\n    margin-left: 0;\n  }\n\n  /* Filled reverse */\n  :host([theme~='reverse'][theme~='filled']) {\n    padding-left: var(--lumo-space-m);\n  }\n\n  :host([theme~='reverse'][theme~='filled'][dir='rtl']) {\n    padding-right: var(--lumo-space-m);\n  }\n`;\n\nregisterStyles('vaadin-details-summary', detailsSummary, { moduleId: 'lumo-details-summary' });\n\nexport { detailsSummary };\n","import { detailsSummary } from '@vaadin/details/theme/lumo/vaadin-details-summary-styles.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst accordionHeading = css`\n  :host {\n    padding: 0;\n  }\n\n  [part='content'] {\n    padding: var(--lumo-space-s) 0;\n  }\n\n  :host([theme~='filled']) {\n    padding-top: 0;\n    padding-bottom: 0;\n  }\n`;\n\nregisterStyles('vaadin-accordion-heading', [detailsSummary, accordionHeading], { moduleId: 'lumo-accordion-heading' });\n","/**\n * @license\n * Copyright (c) 2017 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './version.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { addLumoGlobalStyles } from './global.js';\n\nconst colorBase = css`\n  :host {\n    /* Base (background) */\n    --lumo-base-color: #fff;\n\n    /* Tint */\n    --lumo-tint-5pct: hsla(0, 0%, 100%, 0.3);\n    --lumo-tint-10pct: hsla(0, 0%, 100%, 0.37);\n    --lumo-tint-20pct: hsla(0, 0%, 100%, 0.44);\n    --lumo-tint-30pct: hsla(0, 0%, 100%, 0.5);\n    --lumo-tint-40pct: hsla(0, 0%, 100%, 0.57);\n    --lumo-tint-50pct: hsla(0, 0%, 100%, 0.64);\n    --lumo-tint-60pct: hsla(0, 0%, 100%, 0.7);\n    --lumo-tint-70pct: hsla(0, 0%, 100%, 0.77);\n    --lumo-tint-80pct: hsla(0, 0%, 100%, 0.84);\n    --lumo-tint-90pct: hsla(0, 0%, 100%, 0.9);\n    --lumo-tint: #fff;\n\n    /* Shade */\n    --lumo-shade-5pct: hsla(214, 61%, 25%, 0.05);\n    --lumo-shade-10pct: hsla(214, 57%, 24%, 0.1);\n    --lumo-shade-20pct: hsla(214, 53%, 23%, 0.16);\n    --lumo-shade-30pct: hsla(214, 50%, 22%, 0.26);\n    --lumo-shade-40pct: hsla(214, 47%, 21%, 0.38);\n    --lumo-shade-50pct: hsla(214, 45%, 20%, 0.52);\n    --lumo-shade-60pct: hsla(214, 43%, 19%, 0.6);\n    --lumo-shade-70pct: hsla(214, 42%, 18%, 0.69);\n    --lumo-shade-80pct: hsla(214, 41%, 17%, 0.83);\n    --lumo-shade-90pct: hsla(214, 40%, 16%, 0.94);\n    --lumo-shade: hsl(214, 35%, 15%);\n\n    /* Contrast */\n    --lumo-contrast-5pct: var(--lumo-shade-5pct);\n    --lumo-contrast-10pct: var(--lumo-shade-10pct);\n    --lumo-contrast-20pct: var(--lumo-shade-20pct);\n    --lumo-contrast-30pct: var(--lumo-shade-30pct);\n    --lumo-contrast-40pct: var(--lumo-shade-40pct);\n    --lumo-contrast-50pct: var(--lumo-shade-50pct);\n    --lumo-contrast-60pct: var(--lumo-shade-60pct);\n    --lumo-contrast-70pct: var(--lumo-shade-70pct);\n    --lumo-contrast-80pct: var(--lumo-shade-80pct);\n    --lumo-contrast-90pct: var(--lumo-shade-90pct);\n    --lumo-contrast: var(--lumo-shade);\n\n    /* Text */\n    --lumo-header-text-color: var(--lumo-contrast);\n    --lumo-body-text-color: var(--lumo-contrast-90pct);\n    --lumo-secondary-text-color: var(--lumo-contrast-70pct);\n    --lumo-tertiary-text-color: var(--lumo-contrast-50pct);\n    --lumo-disabled-text-color: var(--lumo-contrast-30pct);\n\n    /* Primary */\n    --lumo-primary-color: hsl(214, 100%, 48%);\n    --lumo-primary-color-50pct: hsla(214, 100%, 49%, 0.76);\n    --lumo-primary-color-10pct: hsla(214, 100%, 60%, 0.13);\n    --lumo-primary-text-color: hsl(214, 100%, 43%);\n    --lumo-primary-contrast-color: #fff;\n\n    /* Error */\n    --lumo-error-color: hsl(3, 85%, 48%);\n    --lumo-error-color-50pct: hsla(3, 85%, 49%, 0.5);\n    --lumo-error-color-10pct: hsla(3, 85%, 49%, 0.1);\n    --lumo-error-text-color: hsl(3, 89%, 42%);\n    --lumo-error-contrast-color: #fff;\n\n    /* Success */\n    --lumo-success-color: hsl(145, 72%, 30%);\n    --lumo-success-color-50pct: hsla(145, 72%, 31%, 0.5);\n    --lumo-success-color-10pct: hsla(145, 72%, 31%, 0.1);\n    --lumo-success-text-color: hsl(145, 85%, 25%);\n    --lumo-success-contrast-color: #fff;\n\n    /* Warning */\n    --lumo-warning-color: hsl(48, 100%, 50%);\n    --lumo-warning-color-10pct: hsla(48, 100%, 50%, 0.25);\n    --lumo-warning-text-color: hsl(32, 100%, 30%);\n    --lumo-warning-contrast-color: var(--lumo-shade-90pct);\n  }\n\n  /* forced-colors mode adjustments */\n  @media (forced-colors: active) {\n    html {\n      --lumo-disabled-text-color: GrayText;\n    }\n  }\n`;\n\naddLumoGlobalStyles('color-props', colorBase);\n\nconst color = css`\n  [theme~='dark'] {\n    /* Base (background) */\n    --lumo-base-color: hsl(214, 35%, 21%);\n\n    /* Tint */\n    --lumo-tint-5pct: hsla(214, 65%, 85%, 0.06);\n    --lumo-tint-10pct: hsla(214, 60%, 80%, 0.14);\n    --lumo-tint-20pct: hsla(214, 64%, 82%, 0.23);\n    --lumo-tint-30pct: hsla(214, 69%, 84%, 0.32);\n    --lumo-tint-40pct: hsla(214, 73%, 86%, 0.41);\n    --lumo-tint-50pct: hsla(214, 78%, 88%, 0.5);\n    --lumo-tint-60pct: hsla(214, 82%, 90%, 0.58);\n    --lumo-tint-70pct: hsla(214, 87%, 92%, 0.69);\n    --lumo-tint-80pct: hsla(214, 91%, 94%, 0.8);\n    --lumo-tint-90pct: hsla(214, 96%, 96%, 0.9);\n    --lumo-tint: hsl(214, 100%, 98%);\n\n    /* Shade */\n    --lumo-shade-5pct: hsla(214, 0%, 0%, 0.07);\n    --lumo-shade-10pct: hsla(214, 4%, 2%, 0.15);\n    --lumo-shade-20pct: hsla(214, 8%, 4%, 0.23);\n    --lumo-shade-30pct: hsla(214, 12%, 6%, 0.32);\n    --lumo-shade-40pct: hsla(214, 16%, 8%, 0.41);\n    --lumo-shade-50pct: hsla(214, 20%, 10%, 0.5);\n    --lumo-shade-60pct: hsla(214, 24%, 12%, 0.6);\n    --lumo-shade-70pct: hsla(214, 28%, 13%, 0.7);\n    --lumo-shade-80pct: hsla(214, 32%, 13%, 0.8);\n    --lumo-shade-90pct: hsla(214, 33%, 13%, 0.9);\n    --lumo-shade: hsl(214, 33%, 13%);\n\n    /* Contrast */\n    --lumo-contrast-5pct: var(--lumo-tint-5pct);\n    --lumo-contrast-10pct: var(--lumo-tint-10pct);\n    --lumo-contrast-20pct: var(--lumo-tint-20pct);\n    --lumo-contrast-30pct: var(--lumo-tint-30pct);\n    --lumo-contrast-40pct: var(--lumo-tint-40pct);\n    --lumo-contrast-50pct: var(--lumo-tint-50pct);\n    --lumo-contrast-60pct: var(--lumo-tint-60pct);\n    --lumo-contrast-70pct: var(--lumo-tint-70pct);\n    --lumo-contrast-80pct: var(--lumo-tint-80pct);\n    --lumo-contrast-90pct: var(--lumo-tint-90pct);\n    --lumo-contrast: var(--lumo-tint);\n\n    /* Text */\n    --lumo-header-text-color: var(--lumo-contrast);\n    --lumo-body-text-color: var(--lumo-contrast-90pct);\n    --lumo-secondary-text-color: var(--lumo-contrast-70pct);\n    --lumo-tertiary-text-color: var(--lumo-contrast-50pct);\n    --lumo-disabled-text-color: var(--lumo-contrast-30pct);\n\n    /* Primary */\n    --lumo-primary-color: hsl(214, 90%, 48%);\n    --lumo-primary-color-50pct: hsla(214, 90%, 70%, 0.69);\n    --lumo-primary-color-10pct: hsla(214, 90%, 55%, 0.13);\n    --lumo-primary-text-color: hsl(214, 90%, 77%);\n    --lumo-primary-contrast-color: #fff;\n\n    /* Error */\n    --lumo-error-color: hsl(3, 79%, 49%);\n    --lumo-error-color-50pct: hsla(3, 75%, 62%, 0.5);\n    --lumo-error-color-10pct: hsla(3, 75%, 62%, 0.14);\n    --lumo-error-text-color: hsl(3, 100%, 80%);\n\n    /* Success */\n    --lumo-success-color: hsl(145, 72%, 30%);\n    --lumo-success-color-50pct: hsla(145, 92%, 51%, 0.5);\n    --lumo-success-color-10pct: hsla(145, 92%, 51%, 0.1);\n    --lumo-success-text-color: hsl(145, 85%, 46%);\n\n    /* Warning */\n    --lumo-warning-color: hsl(43, 100%, 48%);\n    --lumo-warning-color-10pct: hsla(40, 100%, 50%, 0.2);\n    --lumo-warning-text-color: hsl(45, 100%, 60%);\n    --lumo-warning-contrast-color: var(--lumo-shade-90pct);\n  }\n\n  html {\n    color: var(--lumo-body-text-color);\n    background-color: var(--lumo-base-color);\n    color-scheme: light;\n  }\n\n  [theme~='dark'] {\n    color: var(--lumo-body-text-color);\n    background-color: var(--lumo-base-color);\n    color-scheme: dark;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    color: var(--lumo-header-text-color);\n  }\n\n  a:where(:any-link) {\n    color: var(--lumo-primary-text-color);\n  }\n\n  a:not(:any-link) {\n    color: var(--lumo-disabled-text-color);\n  }\n\n  blockquote {\n    color: var(--lumo-secondary-text-color);\n  }\n\n  code,\n  pre {\n    background-color: var(--lumo-contrast-10pct);\n    border-radius: var(--lumo-border-radius-m);\n  }\n`;\n\nregisterStyles('', color, { moduleId: 'lumo-color' });\n\nexport { colorBase, color };\n","import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport '@vaadin/vaadin-lumo-styles/typography.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst details = css`\n  :host {\n    margin: var(--lumo-space-xs) 0;\n    outline: none;\n    --_focus-ring-color: var(--vaadin-focus-ring-color, var(--lumo-primary-color-50pct));\n    --_focus-ring-width: var(--vaadin-focus-ring-width, 2px);\n  }\n\n  :host([focus-ring]) ::slotted([slot='summary']) {\n    box-shadow: 0 0 0 var(--_focus-ring-width) var(--_focus-ring-color);\n  }\n\n  [part='content'] {\n    padding: var(--lumo-space-xs) 0 var(--lumo-space-s);\n    font-size: var(--lumo-font-size-m);\n    line-height: var(--lumo-line-height-m);\n  }\n\n  :host([theme~='filled']) {\n    background-color: var(--lumo-contrast-5pct);\n    border-radius: var(--lumo-border-radius-m);\n  }\n\n  :host([theme~='filled']) [part='content'] {\n    padding-left: var(--lumo-space-m);\n    padding-right: var(--lumo-space-m);\n  }\n\n  :host([theme~='small']) [part$='content'] {\n    font-size: var(--lumo-font-size-s);\n  }\n`;\n\nregisterStyles('vaadin-details', details, { moduleId: 'lumo-details' });\n\nexport { details };\n","import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport { details } from '@vaadin/details/theme/lumo/vaadin-details-styles.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst accordionPanel = css`\n  :host {\n    margin: 0;\n    border-bottom: solid 1px var(--lumo-contrast-10pct);\n  }\n\n  :host(:last-child) {\n    border-bottom: none;\n  }\n\n  :host([theme~='filled']) {\n    border-bottom: none;\n  }\n\n  :host([theme~='filled']:not(:last-child)) {\n    margin-bottom: 2px;\n  }\n`;\n\nregisterStyles('vaadin-accordion-panel', [details, accordionPanel], { moduleId: 'lumo-accordion-panel' });\n","/**\n * @license\n * Copyright (c) 2019 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { isElementFocused } from '@vaadin/a11y-base/src/focus-utils.js';\nimport { KeyboardDirectionMixin } from '@vaadin/a11y-base/src/keyboard-direction-mixin.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { SlotObserver } from '@vaadin/component-base/src/slot-observer.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { AccordionPanel } from './vaadin-accordion-panel.js';\n\n/**\n * `<vaadin-accordion>` is a Web Component implementing accordion widget:\n * a vertically stacked set of expandable panels. The component should be\n * used as a wrapper for two or more `<vaadin-accordion-panel>` components.\n *\n * Panel headings function as controls that enable users to open (expand)\n * or hide (collapse) their associated sections of content. The user can\n * toggle panels by mouse click, Enter and Space keys.\n *\n * Only one panel can be opened at a time, opening a new one forces\n * previous panel to close and hide its content.\n *\n * ```\n * <vaadin-accordion>\n *   <vaadin-accordion-panel>\n *     <vaadin-accordion-heading slot=\"summary\">Panel 1</vaadin-accordion-heading>\n *     <div>This panel is opened, so the text is visible by default.</div>\n *   </vaadin-accordion-panel>\n *   <vaadin-accordion-panel>\n *     <vaadin-accordion-heading slot=\"summary\">Panel 2</vaadin-accordion-heading>\n *     <div>After opening this panel, the first one becomes closed.</div>\n *   </vaadin-accordion-panel>\n * </vaadin-accordion>\n * ```\n *\n * ### Styling\n *\n * See the [`<vaadin-accordion-panel>`](#/elements/vaadin-accordion-panel)\n * documentation for the available state attributes and stylable shadow parts.\n *\n * **Note:** You can apply the theme to `<vaadin-accordion>` component itself,\n * especially by using the following CSS selector:\n *\n * ```\n * :host ::slotted(vaadin-accordion-panel) {\n *   margin-bottom: 5px;\n * }\n * ```\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\n *\n * @fires {CustomEvent} items-changed - Fired when the `items` property changes.\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes ElementMixin\n * @mixes KeyboardDirectionMixin\n * @mixes ThemableMixin\n */\nclass Accordion extends KeyboardDirectionMixin(ThemableMixin(ElementMixin(PolymerElement))) {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n      </style>\n      <slot></slot>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-accordion';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The index of currently opened panel. First panel is opened by\n       * default. Only one panel can be opened at the same time.\n       * Setting null or undefined closes all the accordion panels.\n       * @type {number}\n       */\n      opened: {\n        type: Number,\n        value: 0,\n        notify: true,\n        reflectToAttribute: true,\n      },\n\n      /**\n       * The list of `<vaadin-accordion-panel>` child elements.\n       * It is populated from the elements passed to the light DOM,\n       * and updated dynamically when adding or removing panels.\n       * @type {!Array<!AccordionPanel>}\n       */\n      items: {\n        type: Array,\n        readOnly: true,\n        notify: true,\n      },\n    };\n  }\n\n  static get observers() {\n    return ['_updateItems(items, opened)'];\n  }\n\n  constructor() {\n    super();\n    this._boundUpdateOpened = this._updateOpened.bind(this);\n  }\n\n  /**\n   * Override getter from `KeyboardDirectionMixin`\n   * to check if the heading element has focus.\n   *\n   * @return {Element | null}\n   * @protected\n   * @override\n   */\n  get focused() {\n    return (this._getItems() || []).find((item) => isElementFocused(item.focusElement));\n  }\n\n  /**\n   * @protected\n   * @override\n   */\n  focus() {\n    if (this._observer) {\n      this._observer.flush();\n    }\n    super.focus();\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    const slot = this.shadowRoot.querySelector('slot');\n    this._observer = new SlotObserver(slot, (info) => {\n      this._setItems(this._filterItems(Array.from(this.children)));\n\n      this._filterItems(info.addedNodes).forEach((el) => {\n        el.addEventListener('opened-changed', this._boundUpdateOpened);\n      });\n    });\n  }\n\n  /**\n   * Override method inherited from `KeyboardDirectionMixin`\n   * to use the stored list of accordion panels as items.\n   *\n   * @return {Element[]}\n   * @protected\n   * @override\n   */\n  _getItems() {\n    return this.items;\n  }\n\n  /**\n   * @param {!Array<!Element>} array\n   * @return {!Array<!AccordionPanel>}\n   * @protected\n   */\n  _filterItems(array) {\n    return array.filter((el) => el instanceof AccordionPanel);\n  }\n\n  /** @private */\n  _updateItems(items, opened) {\n    if (items) {\n      const itemToOpen = items[opened];\n      items.forEach((item) => {\n        item.opened = item === itemToOpen;\n      });\n    }\n  }\n\n  /**\n   * Override an event listener from `KeyboardMixin`\n   * to only handle details toggle buttons events.\n   *\n   * @param {!KeyboardEvent} event\n   * @protected\n   * @override\n   */\n  _onKeyDown(event) {\n    // Only check keyboard events on details toggle buttons\n    if (!this.items.some((item) => item.focusElement === event.target)) {\n      return;\n    }\n\n    super._onKeyDown(event);\n  }\n\n  /** @private */\n  _updateOpened(e) {\n    const target = this._filterItems(e.composedPath())[0];\n    const idx = this.items.indexOf(target);\n    if (e.detail.value) {\n      if (target.disabled || idx === -1) {\n        return;\n      }\n\n      this.opened = idx;\n    } else if (!this.items.some((item) => item.opened)) {\n      this.opened = null;\n    }\n  }\n}\n\ndefineCustomElement(Accordion);\n\nexport { Accordion };\n","/**\n * @license\n * Copyright (c) 2017 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { css, CSSResult, unsafeCSS } from 'lit';\nimport { ThemePropertyMixin } from './vaadin-theme-property-mixin.js';\n\nexport { css, unsafeCSS };\n\n/**\n * @typedef {Object} Theme\n * @property {string} themeFor\n * @property {CSSResult[]} styles\n * @property {string | string[]} [include]\n * @property {string} [moduleId]\n *\n * @typedef {CSSResult[] | CSSResult} CSSResultGroup\n */\n\n/**\n * @type {Theme[]}\n */\nconst themeRegistry = [];\n\n/**\n * Check if the custom element type has themes applied.\n * @param {Function} elementClass\n * @returns {boolean}\n */\nfunction classHasThemes(elementClass) {\n  return elementClass && Object.prototype.hasOwnProperty.call(elementClass, '__themes');\n}\n\n/**\n * Check if the custom element type has themes applied.\n * @param {string} tagName\n * @returns {boolean}\n */\nfunction hasThemes(tagName) {\n  return classHasThemes(customElements.get(tagName));\n}\n\n/**\n * Flattens the styles into a single array of styles.\n * @param {CSSResultGroup} styles\n * @param {CSSResult[]} result\n * @returns {CSSResult[]}\n */\nfunction flattenStyles(styles = []) {\n  return [styles].flat(Infinity).filter((style) => {\n    if (style instanceof CSSResult) {\n      return true;\n    }\n    console.warn('An item in styles is not of type CSSResult. Use `unsafeCSS` or `css`.');\n    return false;\n  });\n}\n\n/**\n * Registers CSS styles for a component type. Make sure to register the styles before\n * the first instance of a component of the type is attached to DOM.\n *\n * @param {string} themeFor The local/tag name of the component type to register the styles for\n * @param {CSSResultGroup} styles The CSS style rules to be registered for the component type\n * matching themeFor and included in the local scope of each component instance\n * @param {{moduleId?: string, include?: string | string[]}} options Additional options\n * @return {void}\n */\nexport function registerStyles(themeFor, styles, options = {}) {\n  if (themeFor) {\n    if (hasThemes(themeFor)) {\n      console.warn(`The custom element definition for \"${themeFor}\"\n      was finalized before a style module was registered.\n      Make sure to add component specific style modules before\n      importing the corresponding custom element.`);\n    }\n  }\n\n  styles = flattenStyles(styles);\n\n  if (window.Vaadin && window.Vaadin.styleModules) {\n    window.Vaadin.styleModules.registerStyles(themeFor, styles, options);\n  } else {\n    themeRegistry.push({\n      themeFor,\n      styles,\n      include: options.include,\n      moduleId: options.moduleId,\n    });\n  }\n}\n\n/**\n * Returns all registered themes. By default the themeRegistry is returned as is.\n * In case the style-modules adapter is imported, the themes are obtained from there instead\n * @returns {Theme[]}\n */\nfunction getAllThemes() {\n  if (window.Vaadin && window.Vaadin.styleModules) {\n    return window.Vaadin.styleModules.getAllThemes();\n  }\n  return themeRegistry;\n}\n\n/**\n * Returns true if the themeFor string matches the tag name\n * @param {string} themeFor\n * @param {string} tagName\n * @returns {boolean}\n */\nfunction matchesThemeFor(themeFor, tagName) {\n  return (themeFor || '').split(' ').some((themeForToken) => {\n    return new RegExp(`^${themeForToken.split('*').join('.*')}$`, 'u').test(tagName);\n  });\n}\n\n/**\n * Maps the moduleName to an include priority number which is used for\n * determining the order in which styles are applied.\n * @param {string} moduleName\n * @returns {number}\n */\nfunction getIncludePriority(moduleName = '') {\n  let includePriority = 0;\n  if (moduleName.startsWith('lumo-') || moduleName.startsWith('material-')) {\n    includePriority = 1;\n  } else if (moduleName.startsWith('vaadin-')) {\n    includePriority = 2;\n  }\n  return includePriority;\n}\n\n/**\n * Gets an array of CSSResults matching the include property of the theme.\n * @param {Theme} theme\n * @returns {CSSResult[]}\n */\nfunction getIncludedStyles(theme) {\n  const includedStyles = [];\n  if (theme.include) {\n    [].concat(theme.include).forEach((includeModuleId) => {\n      const includedTheme = getAllThemes().find((s) => s.moduleId === includeModuleId);\n      if (includedTheme) {\n        includedStyles.push(...getIncludedStyles(includedTheme), ...includedTheme.styles);\n      } else {\n        console.warn(`Included moduleId ${includeModuleId} not found in style registry`);\n      }\n    }, theme.styles);\n  }\n  return includedStyles;\n}\n\n/**\n * Includes the styles to the template.\n * @param {CSSResult[]} styles\n * @param {HTMLTemplateElement} template\n */\nfunction addStylesToTemplate(styles, template) {\n  const styleEl = document.createElement('style');\n  styleEl.innerHTML = styles.map((style) => style.cssText).join('\\n');\n  template.content.appendChild(styleEl);\n}\n\n/**\n * Returns an array of themes that should be used for styling a component matching\n * the tag name. The array is sorted by the include order.\n * @param {string} tagName\n * @returns {Theme[]}\n */\nfunction getThemes(tagName) {\n  const defaultModuleName = `${tagName}-default-theme`;\n\n  const themes = getAllThemes()\n    // Filter by matching themeFor properties\n    .filter((theme) => theme.moduleId !== defaultModuleName && matchesThemeFor(theme.themeFor, tagName))\n    .map((theme) => ({\n      ...theme,\n      // Prepend styles from included themes\n      styles: [...getIncludedStyles(theme), ...theme.styles],\n      // Map moduleId to includePriority\n      includePriority: getIncludePriority(theme.moduleId),\n    }))\n    // Sort by includePriority\n    .sort((themeA, themeB) => themeB.includePriority - themeA.includePriority);\n\n  if (themes.length > 0) {\n    return themes;\n  }\n  // No theme modules found, return the default module if it exists\n  return getAllThemes().filter((theme) => theme.moduleId === defaultModuleName);\n}\n\n/**\n * @polymerMixin\n * @mixes ThemePropertyMixin\n */\nexport const ThemableMixin = (superClass) =>\n  class VaadinThemableMixin extends ThemePropertyMixin(superClass) {\n    /**\n     * Covers PolymerElement based component styling\n     * @protected\n     */\n    static finalize() {\n      super.finalize();\n\n      // Make sure not to run the logic intended for PolymerElement when LitElement is used.\n      if (this.elementStyles) {\n        return;\n      }\n\n      const template = this.prototype._template;\n      if (!template || classHasThemes(this)) {\n        return;\n      }\n\n      addStylesToTemplate(this.getStylesForThis(), template);\n    }\n\n    /**\n     * Covers LitElement based component styling\n     *\n     * @protected\n     */\n    static finalizeStyles(styles) {\n      // The \"styles\" object originates from the \"static get styles()\" function of\n      // a LitElement based component. The theme styles are added after it\n      // so that they can override the component styles.\n      const themeStyles = this.getStylesForThis();\n      return styles ? [...super.finalizeStyles(styles), ...themeStyles] : themeStyles;\n    }\n\n    /**\n     * Get styles for the component type\n     *\n     * @private\n     */\n    static getStylesForThis() {\n      const parent = Object.getPrototypeOf(this.prototype);\n      const inheritedThemes = (parent ? parent.constructor.__themes : []) || [];\n      this.__themes = [...inheritedThemes, ...getThemes(this.is)];\n      const themeStyles = this.__themes.flatMap((theme) => theme.styles);\n      // Remove duplicates\n      return themeStyles.filter((style, index) => index === themeStyles.lastIndexOf(style));\n    }\n  };\n\nexport { themeRegistry as __themeRegistry };\n","import '@vaadin/vaadin-lumo-styles/spacing.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst verticalLayout = css`\n  :host([theme~='margin']) {\n    margin: var(--lumo-space-m);\n  }\n\n  :host([theme~='padding']) {\n    padding: var(--lumo-space-m);\n  }\n\n  :host([theme~='spacing-xs']) {\n    gap: var(--lumo-space-xs);\n  }\n\n  :host([theme~='spacing-s']) {\n    gap: var(--lumo-space-s);\n  }\n\n  :host([theme~='spacing']) {\n    gap: var(--lumo-space-m);\n  }\n\n  :host([theme~='spacing-l']) {\n    gap: var(--lumo-space-l);\n  }\n\n  :host([theme~='spacing-xl']) {\n    gap: var(--lumo-space-xl);\n  }\n`;\n\nregisterStyles('vaadin-vertical-layout', verticalLayout, { moduleId: 'lumo-vertical-layout' });\n","/**\n * @license\n * Copyright (c) 2017 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\n/**\n * `<vaadin-vertical-layout>` provides a simple way to vertically align your HTML elements.\n *\n * ```\n * <vaadin-vertical-layout>\n *   <div>Item 1</div>\n *   <div>Item 2</div>\n * </vaadin-vertical-layout>\n * ```\n *\n * ### Built-in Theme Variations\n *\n * `<vaadin-vertical-layout>` supports the following theme variations:\n *\n * Theme variation | Description\n * ---|---\n * `theme=\"margin\"` | Applies the default amount of CSS margin for the host element (specified by the theme)\n * `theme=\"padding\"` | Applies the default amount of CSS padding for the host element (specified by the theme)\n * `theme=\"spacing\"` | Applies the default amount of CSS margin between items (specified by the theme)\n *\n * @customElement\n * @extends HTMLElement\n * @mixes ThemableMixin\n * @mixes ElementMixin\n */\nclass VerticalLayout extends ElementMixin(ThemableMixin(PolymerElement)) {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: flex;\n          flex-direction: column;\n          align-items: flex-start;\n          box-sizing: border-box;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        /* Theme variations */\n        :host([theme~='margin']) {\n          margin: 1em;\n        }\n\n        :host([theme~='padding']) {\n          padding: 1em;\n        }\n\n        :host([theme~='spacing']) {\n          gap: 1em;\n        }\n      </style>\n\n      <slot></slot>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-vertical-layout';\n  }\n}\n\ndefineCustomElement(VerticalLayout);\n\nexport { VerticalLayout };\n"],"names":[],"sourceRoot":""}