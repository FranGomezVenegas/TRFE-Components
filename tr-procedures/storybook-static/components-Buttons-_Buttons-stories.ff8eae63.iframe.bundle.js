"use strict";(self.webpackChunk_trazit_tr_procedures=self.webpackChunk_trazit_tr_procedures||[]).push([[486],{"./src/components/Buttons/_Buttons.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var lit__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/lit/index.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/ButtonsFunctions",component:"buttons-functions"},Default=(args=>lit__WEBPACK_IMPORTED_MODULE_0__.qy`<buttons-functions .${args}></buttons-functions>`).bind({});Default.args={},Default.parameters={docs:{description:{component:"\n        # ButtonsFunctions Component\n\n        The `ButtonsFunctions` component is a highly customizable component that enhances a base class with various button-related functionalities.\n\n        ## Overview\n\n        The `ButtonsFunctions` function enhances a base class with various button-related functionalities. It extends a base class with functionalities from multiple modules to manage button interactions, styles, and logic.\n\n        ## Variables and Properties\n\n        ### 1. `actions`\n\n        - **Type:** Array\n        - **Description:** An array of action objects that define the buttons and their behaviors.\n        - **Properties:**\n          - `button`: An object defining the button's properties.\n            - `icon`: The icon displayed on the button.\n            - `class`: CSS classes applied to the button.\n            - `title`: An object containing titles in different languages.\n              - `label_en`: Title in English.\n              - `label_es`: Title in Spanish.\n            - `img`: The image displayed on the button.\n            - `requiresGridItemSelected`: Boolean indicating if a grid item selection is required.\n            - `showWhenSelectedItem`: Defines conditions to show the button when an item is selected.\n            - `hideWhenSelectedItem`: Defines conditions to hide the button when an item is selected.\n          - `actionName`: The name of the action.\n\n        #### Logic:\n\n        - **`btnDisabled(action, viewModelFromProcModel)`**\n          - Determines if a button should be disabled based on the `requiresGridItemSelected` property and the selected items.\n\n        - **`btnHiddenForRows(action, selItems)`**\n          - Determines if a button should be hidden based on the `showWhenSelectedItem` and `hideWhenSelectedItem` properties.\n\n        ### 2. `refreshable`\n\n        - **Type:** Object\n        - **Description:** Defines properties for the refresh button.\n        - **Properties:**\n          - `enable`: Boolean to enable or disable the refresh button.\n          - `icon`: Icon for the refresh button.\n          - `title`: An object containing titles in different languages.\n\n        #### Logic:\n\n        - **`GetViewData(setGrid = true, viewQuery)`**\n          - Fetches data and updates the view, optionally using the refresh button properties.\n\n        ### 3. `printable`\n\n        - **Type:** Object\n        - **Description:** Defines properties for the print button.\n        - **Properties:**\n          - `enable`: Boolean to enable or disable the print button.\n          - `icon`: Icon for the print button.\n          - `title`: An object containing titles in different languages.\n\n        #### Logic:\n\n        - **`printTable()`**\n          - Prints the table based on the printable button properties.\n\n        ### 4. `downloadable`\n\n        - **Type:** Object\n        - **Description:** Defines properties for the download button.\n        - **Properties:**\n          - `enable`: Boolean to enable or disable the download button.\n          - `icon`: Icon for the download button.\n          - `title`: An object containing titles in different languages.\n\n        #### Logic:\n\n        - **`downloadDataTableToCSV(sectionModel, data, selectedItems, downloadable)`**\n          - Downloads the data table as a CSV file based on the downloadable button properties.\n\n        ## Functions\n\n        ### `getButtonForRows(actions, data, isProcManagement, parentData)`\n\n        Generates buttons for each row based on the `actions` array.\n\n        ### `getButton(sectionModel, data, isProcManagement)`\n\n        Generates a button based on the section model.\n\n        ### `btnDisabled(action, viewModelFromProcModel)`\n\n        Determines if a button should be disabled.\n\n        ### `btnHiddenForRows(action, selItems)`\n\n        Determines if a button should be hidden for rows based on selection.\n\n        ### `btnHidden(action, selItems)`\n\n        Determines if a button should be hidden based on the selected items.\n\n        ### `GetViewData(setGrid = true, viewQuery)`\n\n        Fetches and sets view data based on the query definition.\n\n        ### `GetAlternativeViewData(queryDefinition, selObject = {})`\n\n        Fetches alternative view data.\n\n        ### `GetQueryForDialogGrid(actionDefinition)`\n\n        Fetches data for a dialog grid.\n\n        ### `GetQueriesForDialog(actionDefinition)`\n\n        Fetches multiple queries for a dialog.\n\n        ### `getGenericDialogGridItems(dialogInfo)`\n\n        Fetches generic dialog grid items based on the dialog info.\n\n        ### `disabledByCertification(action)`\n\n        Determines if a button should be disabled by certification (returns `false` by default).\n\n        ## Styles\n\n        The buttons have various CSS styles applied to them to control their appearance. Here are some examples:\n\n        - **mwc-icon-button#lang**\n          ```css\n          color: #1473e6;\n          font-family: Montserrat;\n          font-weight: bold;\n          font-size: 19px;\n          ```\n\n        - **mwc-button**\n          ```css\n          background-color: #1473e6;\n          font-family: Montserrat;\n          font-weight: bold;\n          font-size: 19px;\n          border-radius: 12px;\n          ```\n\n        ## Conclusion\n\n        This documentation covers the primary variables, properties, and logic used in the `ButtonsFunctions.js` file. Each property and function is explained to provide a clear understanding of their roles and interactions within the code.\n      "}}};const __namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => html`<buttons-functions .${args}></buttons-functions>`",...Default.parameters?.docs?.source}}}}}]);