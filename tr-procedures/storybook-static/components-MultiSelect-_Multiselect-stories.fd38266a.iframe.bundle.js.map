{"version":3,"file":"components-MultiSelect-_Multiselect-stories.fd38266a.iframe.bundle.js","mappings":";;AAiFA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;AAKA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;AAIA;AACA;;;;;AAKA","sources":["webpack://@trazit/tr-procedures/./src/components/MultiSelect/_Multiselect.stories.js","webpack://@trazit/tr-procedures/./src/components/MultiSelect/multiselect.template.js"],"sourcesContent":["import { html } from 'lit';\r\nimport './multiselect.css.js';\r\nimport './multiselect.template.js';\r\nimport './index.js';\r\n\r\n\r\nexport default {\r\n  title: 'Components/Multiselect',\r\n  component: 'multiselect',\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: 'The `multiselect` component allows users to select multiple options from a predefined list. It provides flexibility with configuration options and handles various selection states.'\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    config: {\r\n      description: 'Configuration object for the multiselect component',\r\n      control: 'object',\r\n      table: {\r\n        type: { summary: 'object' },\r\n      },\r\n    },\r\n    maxSelections: {\r\n      description: 'Maximum number of selections allowed',\r\n      control: 'number',\r\n      table: {\r\n        category: 'config',\r\n        type: { summary: 'number' },\r\n        defaultValue: { summary: 3 },\r\n      },\r\n    },\r\n    disabled: {\r\n      description: 'Indicates if the multiselect is disabled',\r\n      control: 'boolean',\r\n      table: {\r\n        category: 'config',\r\n        type: { summary: 'boolean' },\r\n        defaultValue: { summary: false },\r\n      },\r\n    },\r\n    options: {\r\n      description: 'Array of options available for selection',\r\n      control: 'array',\r\n      table: {\r\n        type: { summary: 'array' },\r\n      },\r\n    },\r\n    label: {\r\n      description: 'Text representing the option',\r\n      control: 'text',\r\n      table: {\r\n        category: 'options',\r\n        type: { summary: 'string' },\r\n        defaultValue: { summary: '' },\r\n      },\r\n    },\r\n    value: {\r\n      description: 'Value of the option',\r\n      control: 'text',\r\n      table: {\r\n        category: 'options',\r\n        type: { summary: 'string' },\r\n        defaultValue: { summary: '' },\r\n      },\r\n    },\r\n    selected: {\r\n      description: 'Indicates if the option is selected by default',\r\n      control: 'boolean',\r\n      table: {\r\n        category: 'options',\r\n        type: { summary: 'boolean' },\r\n        defaultValue: { summary: false },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst Template = ({ config, options }) => html`\r\n  <multiselect .config=${config} .options=${options}></multiselect>\r\n`;\r\n\r\nexport const Default = Template.bind({});\r\nDefault.args = {\r\n  config: {\r\n    maxSelections: 3,\r\n    disabled: false,\r\n  },\r\n  options: [\r\n    { label: \"Option 1\", value: 'opt1', selected: true },\r\n    { label: \"Option 2\", value: 'opt2' },\r\n    { label: \"Option 3\", value: 'opt3' },\r\n    { label: \"Option 4\", value: 'opt4' },\r\n  ],\r\n};","import { html } from 'lit-element';\r\nimport '@material/mwc-icon';\r\nimport \"@material/mwc-textfield\";\r\n\r\nexport const template = (props, label) => {\r\n    if (props.activeOptions===undefined){ \r\n        props.activeOptions=[]\r\n    } else if (typeof props.activeOptions === 'string') {\r\n        // Split the string into an array using the pipe '|' as a delimiter\r\n        props.activeOptions = props.activeOptions.split('|');\r\n    }\r\n    if (!Array.isArray(props.activeOptions)) {\r\n        props.activeOptions = [];\r\n    }\r\n    if (props.options===undefined){ \r\n        props.options=[]\r\n    } else if (typeof props.options === 'string') {\r\n        // Split the string into an array using the pipe '|' as a delimiter\r\n        props.options = props.options.split('|');\r\n    }\r\n    if (!Array.isArray(props.options)) {\r\n        props.options = [];\r\n    }\r\n    if (props.allowAdhocEntries===undefined){ props.allowAdhocEntries=false}\r\n    //if (props.options===undefined){ props.options=[]}\r\n    if (props.readOnly===undefined){ props.readOnly=false}\r\n    if (props.displayLabel===undefined){ props.displayLabel=true}\r\n    if (props.readOnly===true){props.clickedContainer= true}\r\n    \r\n    const filteredOptions = props.options.filter(option => !props.activeOptions.includes(option));\r\n    const uniqueFilteredOptions = [...new Set(filteredOptions)];\r\n    return html`\r\n    <div>\r\n    ${props.readOnly===true? html`\r\n    <div class=\"sellect-container-readonly\" @click=${(e) => props.clickContainer(e)} style=${props.clickedContainer ? \"background-color:transparent;\" : \"\"} @focusout=${() => props.inputFocusOut()}>\r\n        ${props.displayLabel===false? html``:html`\r\n            <label class=${props.clickedContainer ? \"second\" : \"first\"}> ${label} </label>\r\n        `}                \r\n        <div class=\"sellect-destination-list\">\r\n        ${props.activeOptions.map((option, i) => html `\r\n            <span class=\"sellect-trigger sellect-item\" style=\"display: inherit;\"> ${option} \r\n            ${props.readOnly===true? html``:html`\r\n                <mwc-icon class=\"sellect-close-icon\" style=\"font-size:8px\" @click=${() => props.removeActiveOption(i)}> close </mwc-icon> </span>\r\n            `}\r\n        `)}\r\n        </div>\r\n        </div>\r\n    `:html`\r\n        <div class=\"sellect-container\" @click=${(e) => props.clickContainer(e)} style=${props.clickedContainer ? \"background-color:transparent;\" : \"\"} @focusout=${() => props.inputFocusOut()}>\r\n            <div class=\"sellect-destination-list\">\r\n                ${props.activeOptions.map((option, i) => html `\r\n                    <span class=\"sellect-trigger sellect-item\" style=\"display: inherit;\"> ${option} \r\n                    ${props.readOnly===true? html``:html`\r\n                        <mwc-icon class=\"sellect-close-icon\" style=\"font-size:8px\" @click=${() => props.removeActiveOption(i)}> close </mwc-icon> </span>\r\n                    `}\r\n                `)}\r\n            </div>\r\n            ${props.displayLabel===false? html``:html`\r\n                <label class=${props.clickedContainer ? \"second\" : \"first\"}> ${label} </label>\r\n                ${props.allowAdhocEntries ? html `\r\n                <input class=\"sellect-element\" ?disabled=${props.readOnly||!props.allowAdhocEntries} @click=${() => props.setOpenTrue()} id=\"my-element\" type=\"text\" label=${\"* New Production Lot Name\"}  @change=${(e) => props.pressEnter(e) }></input>\r\n                ` : html `\r\n                <input class=\"sellect-element\" ?disabled=${props.readOnly||!props.allowAdhocEntries} @click=${() => props.setOpenTrue()} id=\"my-element\" type=\"text\" label=${\"* New Production Lot Name\"}> </input>\r\n                `}\r\n            `}\r\n            ${props.readOnly===true? html``:html`\r\n            <div class=\"sellect-origin-list ${!props.open ? \"\" : \"open\"}\">\r\n                ${uniqueFilteredOptions.map((option, i) => html`\r\n                    <span class=\"sellect-trigger sellect-item\" style=\"display: inherit;\" @click=${() => props.removeOption(i)}> ${option} <i class=\"fa fa-times sellect-close-icon\"> </i> </span>\r\n                `)}\r\n            </div>\r\n            `}\r\n            ${props.readOnly===true? html``:html`\r\n                <mwc-icon class=\"sellect-arrow-icon\" @click=${(e) => props.setOpen(e)}> arrow_drop_down </mwc-icon>\r\n            `}\r\n        </div>\r\n    `}\r\n    </div>\r\n    `;\r\n};\r\n"],"names":[],"sourceRoot":""}