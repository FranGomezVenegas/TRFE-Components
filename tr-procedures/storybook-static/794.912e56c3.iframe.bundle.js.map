{"version":3,"file":"794.912e56c3.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sources":["webpack://@trazit/tr-procedures/./src/features/exportTableToCsv.js","webpack://@trazit/tr-procedures/./src/components/Buttons/ButtonsFunctions.js"],"sourcesContent":["import { html, css, LitElement } from 'lit';\r\n\r\nexport function ExportTableToCsv(base) {\r\n    return class extends base {\r\n        static styles = css`\r\n    .list {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        padding: 0;\r\n        margin: 0;\r\n    }\r\n    .list li {\r\n        flex: 1 1 30%;\r\n        margin: 5px;\r\n        list-style: none;\r\n        cursor: pointer;\r\n        user-select: none;\r\n        border-style: solid;\r\n        border-color: #999999;\r\n        border-width: 1px;\r\n        border-radius: 7px;\r\n        font-family: Montserrat, sans-serif;\r\n        font-weight: bold;\r\n        font-size: 19px;\r\n        background-color: #FFFFFF;\r\n        text-align: center;\r\n        padding: 10px;\r\n        color:#126075;\r\n    }\r\n    .dialog-container {\r\n        display: none;\r\n        z-index: 1000;\r\n        position: relative;\r\n    }\r\n    .dialog-background {\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background: rgba(0, 0, 0, 0.5);\r\n    }\r\n    .dialog-box {\r\n        position: fixed;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        background: white;\r\n        padding: 20px;\r\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\r\n        border-radius: 7px;\r\n        font-family: Montserrat, sans-serif;\r\n    }\r\n    h3, h4 {\r\n        font-family: Montserrat, sans-serif;\r\n        font-weight: bold;\r\n        color: #003d7f;\r\n    }\r\n    button {\r\n        font-family: Montserrat, sans-serif;\r\n        font-weight: bold;\r\n        font-size: 19px;\r\n        background-color: #FFFFFF;\r\n        color: #148CFA;\r\n        border: 1px solid #148CFA;\r\n        border-radius: 7px;\r\n        padding: 10px 20px;\r\n        margin: 10px;\r\n        cursor: pointer;\r\n    }\r\n    button:hover {\r\n        background-color: #148CFA;\r\n        color: #FFFFFF;\r\n    }\r\n    .dragging {\r\n        opacity: 0.5;\r\n    }\r\n            .dragging {\r\n                opacity: 0.5;\r\n            }\r\n        `;\r\n\r\n        constructor() {\r\n            super();\r\n            this.fieldsToDownload = [];\r\n        }\r\n\r\n        async downloadDataTableToCSV(downloadElements, dataArr, selectedData, downaloadbleButtonModel, lang = 'en') {\r\n            if (downloadElements === undefined) {\r\n                alert(\"The definition to download is wrong\");\r\n                return;\r\n            }\r\n            if (selectedData === undefined || selectedData.length > 0) {\r\n                dataArr = selectedData;\r\n            }\r\n\r\n            let allFieldsInDataArrSet = new Set();\r\n            dataArr.forEach(item => {\r\n                Object.keys(item).forEach(key => allFieldsInDataArrSet.add(key));\r\n            });\r\n            const allFieldsInDataArr = Array.from(allFieldsInDataArrSet);\r\n\r\n            const allNamesInColumns = new Set();\r\n            downloadElements.columns.forEach(column => {\r\n                if (column.hasOwnProperty('name')) {\r\n                    allNamesInColumns.add(column.name);\r\n                }\r\n            });\r\n            const tableColumnsArray = Array.from(allNamesInColumns);\r\n            this.fieldsToDownload = tableColumnsArray;\r\n\r\n            console.log('downloadElements', downloadElements);\r\n\r\n            if (downloadElements.downloadable !== undefined && downloadElements.downloadable.allowUserSelectColumns !== undefined && downloadElements.downloadable.allowUserSelectColumns === true) {\r\n                await this.showDialog(lang, allFieldsInDataArr, this.fieldsToDownload);\r\n                this.fieldsToDownload = this.updateFieldsToDownload(); // Actualizar después de la selección\r\n            }\r\n\r\n            let csvContent = \"data:text/csv;charset=utf-8;\";\r\n            let contents = this.getTraceabilityInfo();\r\n\r\n            let headers = this.fieldsToDownload.map(key => key[`label_${lang}`] || key);\r\n            contents.push(headers.join(\";\"));\r\n            if (dataArr !== undefined) {\r\n                dataArr.forEach(item => {\r\n                    let row = this.fieldsToDownload.map(key => {\r\n                        return item.hasOwnProperty(key) ? `\"${item[key]}\"` : \"\"; // Ensure to handle potential commas in data\r\n                    }).join(\";\");\r\n                    contents.push(row);\r\n                });\r\n            }\r\n            // Joining all rows with newline to form the final CSV content\r\n            csvContent += contents.join(\"\\r\\n\");\r\n            let encodedUri = encodeURI(csvContent);\r\n            let link = document.createElement(\"a\");\r\n\r\n            // Date formatting with leading zeros for single digits\r\n            let currentDate = new Date();\r\n            let cDay = ('0' + currentDate.getDate()).slice(-2);\r\n            let cMonth = ('0' + (currentDate.getMonth() + 1)).slice(-2);\r\n            let cYear = currentDate.getFullYear();\r\n\r\n            link.setAttribute(\"href\", encodedUri);\r\n            link.setAttribute(\"download\", `export_${cYear}${cMonth}${cDay}.csv`); // Simplified filename\r\n            document.body.appendChild(link); // Append link to the body to ensure it can be clicked\r\n            link.click();\r\n            document.body.removeChild(link); // Clean up link after clicking\r\n        }\r\n\r\n        getTraceabilityInfo() {\r\n            let trackInfo = [];\r\n            let userSession = JSON.parse(sessionStorage.getItem(\"userSession\"));\r\n            trackInfo.push(['Traceability Info: ']);\r\n            trackInfo.push(['This file was created on', new Date(), 'by', userSession.header_info.first_name + ' ' + userSession.header_info.last_name]);\r\n            trackInfo.push(['system', this.dbName, 'Procedure', this.procName]);\r\n            trackInfo.push(['Data: ']);\r\n            return trackInfo;\r\n        }\r\n\r\n        showDialog(lang, unselectedList, selectedList) {\r\n            return new Promise((resolve, reject) => {\r\n                this.cleanupDialog(); // Clean up any existing dialog elements before creating new ones\r\n\r\n                const dialogContainer = document.createElement('div');\r\n                dialogContainer.id = 'dialog-container';\r\n                dialogContainer.style.display = 'none';\r\n                dialogContainer.style.zIndex = '1000';\r\n                dialogContainer.style.position = 'relative';\r\n\r\n                const dialogBackground = document.createElement('div');\r\n                dialogBackground.id = 'dialog-background';\r\n                dialogBackground.style.position = 'fixed';\r\n                dialogBackground.style.top = '0';\r\n                dialogBackground.style.left = '0';\r\n                dialogBackground.style.width = '100%';\r\n                dialogBackground.style.height = '100%';\r\n                dialogBackground.style.background = 'rgba(0, 0, 0, 0.5)';\r\n\r\n                const dialogBox = document.createElement('div');\r\n                dialogBox.id = 'dialog-box';\r\n                dialogBox.style.position = 'fixed';\r\n                dialogBox.style.top = '50%';\r\n                dialogBox.style.left = '50%';\r\n                dialogBox.style.transform = 'translate(-50%, -50%)';\r\n                dialogBox.style.background = 'white';\r\n                dialogBox.style.padding = '20px';\r\n                dialogBox.style.boxShadow = '0 0 10px rgba(0, 0, 0, 0.5)';\r\n\r\n                const selectedColumnsContainer = document.createElement('div');\r\n                const selectedColumnsTitle = document.createElement('h4');\r\n                selectedColumnsTitle.textContent = lang === 'es' ? 'Columnas seleccionadas' : 'Selected Columns';\r\n                const selectedListElement = document.createElement('ul');\r\n                selectedListElement.id = 'selected-list';\r\n                selectedListElement.classList.add('list');\r\n\r\n                const unselectedColumnsContainer = document.createElement('div');\r\n                const unselectedColumnsTitle = document.createElement('h4');\r\n                unselectedColumnsTitle.textContent = lang === 'es' ? 'Columnas no seleccionadas' : 'Unselected Columns';\r\n                const unselectedListElement = document.createElement('ul');\r\n                unselectedListElement.id = 'unselected-list';\r\n                unselectedListElement.classList.add('list');\r\n\r\n                selectedColumnsContainer.appendChild(selectedColumnsTitle);\r\n                selectedColumnsContainer.appendChild(selectedListElement);\r\n                unselectedColumnsContainer.appendChild(unselectedColumnsTitle);\r\n                unselectedColumnsContainer.appendChild(unselectedListElement);\r\n\r\n                const okButton = document.createElement('button');\r\n                okButton.id = 'dialog-ok';\r\n                okButton.textContent = 'OK';\r\n                okButton.onclick = () => {\r\n                    this.fieldsToDownload = this.updateFieldsToDownload(); // Actualizar después de cerrar el diálogo\r\n                    dialogContainer.style.display = 'none';\r\n                    resolve();\r\n                };\r\n\r\n                const cancelButton = document.createElement('button');\r\n                cancelButton.id = 'dialog-cancel';\r\n                cancelButton.textContent = 'Cancel';\r\n                cancelButton.onclick = () => {\r\n                    dialogContainer.style.display = 'none';\r\n                    reject('Dialog cancelled');\r\n                };\r\n                                \r\n                dialogBox.appendChild(selectedColumnsContainer);\r\n                dialogBox.appendChild(unselectedColumnsContainer);\r\n                dialogBox.appendChild(okButton);\r\n                dialogBox.appendChild(cancelButton);\r\n\r\n                dialogBackground.appendChild(dialogBox);\r\n                dialogContainer.appendChild(dialogBackground);\r\n\r\n                document.body.appendChild(dialogContainer);\r\n                dialogContainer.style.display = 'block';\r\n\r\n                // Llamar a populateLists después de que el diálogo esté en el DOM\r\n                this.populateLists(selectedList, unselectedList);\r\n\r\n                dialogBackground.addEventListener('click', (event) => {\r\n                    if (event.target === dialogBackground) {\r\n                        dialogContainer.style.display = 'none';\r\n                        reject('Dialog closed');\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        populateLists(selected, unselected) {\r\n            const selectedList = document.getElementById('selected-list');\r\n            const unselectedList = document.getElementById('unselected-list');\r\n\r\n            if (!selectedList || !unselectedList) {\r\n                console.error('Selected or Unselected list element not found');\r\n                return;\r\n            }\r\n\r\n            selectedList.innerHTML = '';\r\n            unselectedList.innerHTML = '';\r\n\r\n            (selected || []).forEach((field, index) => {\r\n                let li = document.createElement('li');\r\n                li.textContent = `${index + 1}. ${field}`;\r\n                li.draggable = true; // Hacer que los elementos sean arrastrables\r\n                li.style.cursor = 'pointer'; // Cambiar el cursor al pasar sobre el elemento\r\n                li.onclick = this.moveItemToUnselected.bind(this);\r\n                li.addEventListener('dragstart', this.handleDragStart.bind(this));\r\n                li.addEventListener('dragover', this.handleDragOver.bind(this));\r\n                li.addEventListener('drop', this.handleDrop.bind(this));\r\n                selectedList.appendChild(li);\r\n            });\r\n\r\n            (unselected || []).forEach((field, index) => {\r\n                if (!selected.includes(field)) {\r\n                    let li = document.createElement('li');\r\n                    li.textContent = `${index + 1}. ${field}`;\r\n                    li.style.cursor = 'pointer'; // Cambiar el cursor al pasar sobre el elemento\r\n                    li.onclick = this.moveItemToSelected.bind(this);\r\n                    unselectedList.appendChild(li);\r\n                }\r\n            });\r\n\r\n            this.updateFieldsToDownload();\r\n        }\r\n\r\n        moveItemToSelected(event) {\r\n            const item = event.target;\r\n            const unselectedList = document.getElementById('unselected-list');\r\n            const selectedList = document.getElementById('selected-list');\r\n\r\n            if (unselectedList.contains(item)) {\r\n                item.removeEventListener('click', this.moveItemToSelected.bind(this));\r\n                item.addEventListener('click', this.moveItemToUnselected.bind(this));\r\n                item.draggable = true; // Hacer que los elementos sean arrastrables\r\n                item.style.cursor = 'pointer'; // Cambiar el cursor al pasar sobre el elemento\r\n                item.addEventListener('dragstart', this.handleDragStart.bind(this));\r\n                item.addEventListener('dragover', this.handleDragOver.bind(this));\r\n                item.addEventListener('drop', this.handleDrop.bind(this));\r\n\r\n                unselectedList.removeChild(item);\r\n                selectedList.appendChild(item);\r\n\r\n                this.updateFieldsToDownload();\r\n                this.updateListIndices(selectedList); // Actualizar los índices después de mover\r\n            }\r\n        }\r\n\r\n        moveItemToUnselected(event) {\r\n            const item = event.target;\r\n            const unselectedList = document.getElementById('unselected-list');\r\n            const selectedList = document.getElementById('selected-list');\r\n\r\n            if (selectedList.contains(item)) {\r\n                item.removeEventListener('click', this.moveItemToUnselected.bind(this));\r\n                item.addEventListener('click', this.moveItemToSelected.bind(this));\r\n                item.draggable = false; // Desactivar arrastrar\r\n                item.style.cursor = 'pointer'; // Cambiar el cursor al pasar sobre el elemento\r\n                item.removeEventListener('dragstart', this.handleDragStart.bind(this));\r\n                item.removeEventListener('dragover', this.handleDragOver.bind(this));\r\n                item.removeEventListener('drop', this.handleDrop.bind(this));\r\n\r\n                selectedList.removeChild(item);\r\n                unselectedList.appendChild(item);\r\n\r\n                this.updateFieldsToDownload();\r\n                this.updateListIndices(selectedList); // Actualizar los índices después de mover\r\n            }\r\n        }\r\n\r\n        handleDragStart(event) {\r\n            event.target.classList.add('dragging');\r\n            event.dataTransfer.effectAllowed = 'move';\r\n            event.dataTransfer.setData('text/plain', event.target.textContent);\r\n        }\r\n\r\n        handleDragOver(event) {\r\n            event.preventDefault();\r\n            event.dataTransfer.dropEffect = 'move';\r\n        }\r\n\r\n        handleDrop(event) {\r\n            event.preventDefault();\r\n            const draggingElement = document.querySelector('.dragging');\r\n            const targetElement = event.target;\r\n\r\n            if (draggingElement && targetElement && targetElement.tagName === 'LI' && targetElement !== draggingElement) {\r\n                const list = targetElement.parentElement;\r\n                list.insertBefore(draggingElement, targetElement.nextSibling);\r\n                draggingElement.classList.remove('dragging');\r\n\r\n                this.updateFieldsToDownload();\r\n                this.updateListIndices(list); // Actualizar los índices después de soltar\r\n            }\r\n        }\r\n\r\n        updateFieldsToDownload() {\r\n            const selectedList = document.getElementById('selected-list');\r\n            const fields = Array.from(selectedList.children).map(item => item.textContent.split('. ')[1]);\r\n            console.log('Updated fieldsToDownload:', fields);\r\n            return fields;\r\n        }\r\n\r\n        updateListIndices(list) {\r\n            Array.from(list.children).forEach((item, index) => {\r\n                item.textContent = `${index + 1}. ${item.textContent.split('. ')[1]}`;\r\n            });\r\n        }\r\n\r\n        cleanupDialog() {\r\n            const existingDialog = document.getElementById('dialog-container');\r\n            if (existingDialog) {\r\n                existingDialog.remove();\r\n            }\r\n        }\r\n    };\r\n}\r\n","import { html, nothing } from 'lit';\r\nimport { ApiFunctions } from '../Api/ApiFunctions';\r\nimport { ClientMethod } from '../../../src/ClientMethod';\r\nimport { ProcManagementMethods } from '../../components/ProcManagement/ProcManagementMethods';\r\nimport { ActionsFunctions } from '../Actions/ActionsFunctions';\r\nimport { ExportTableToCsv } from '../../features/exportTableToCsv';\r\nimport { PrintableTable } from '../../features/printableTable';\r\nexport function ButtonsFunctions(base) {\r\n  return class extends PrintableTable(ExportTableToCsv(ProcManagementMethods(ClientMethod(ActionsFunctions(ApiFunctions(base)))))) {\r\n\r\n\r\n    getButtonForRows(actions, data, isProcManagement, parentData) {\r\n      //console.log('getButtonForRows', 'actions', actions, 'data', data, 'parentData', parentData)\r\n      if (actions === undefined) { actions = this.viewModelFromProcModel }\r\n      return html`\r\n        <style>\r\n          mwc-icon-button#lang {        \r\n            color : #1473e6; /* rgba(36, 192, 235, 1); */\r\n            font-family : Montserrat;\r\n            font-weight : bold;\r\n            font-size : 19px;\r\n          }\r\n          mwc-button {\r\n            background-color: #1473e6; /* rgba(36, 192, 235, 1); */\r\n            font-family: Montserrat;\r\n            font-weight: bold;\r\n            font-size: 19px;\r\n            --mdc-theme-primary:#1473e6; /* rgba(36, 192, 235, 1); */\r\n            border-radius: 12px;\r\n          }\r\n          mwc-button.button {        \r\n            color : #1473e6; /* rgba(36, 192, 235, 1); */\r\n            font-family : Montserrat;\r\n            font-weight : bold;\r\n            font-size : 19px;\r\n            background: rgb(36, 192, 235) none repeat scroll 0% 0%;\r\n            font-family: Montserrat;\r\n            font-weight: bold;\r\n            font-size: 19px;\r\n            color: white;\r\n            border-color: transparent !important;\r\n            --mdc-button-fill-color: red;\r\n            --mdc-button-ink-color: blue;\r\n            border-radius: 12px;\r\n          }            \r\n          mwc-icon-button {        \r\n            color : #1473e6; /* rgba(36, 192, 235, 1); */\r\n            font-family : Montserrat;\r\n            font-weight : bold;\r\n            font-size : 19px;\r\n          }\r\n          mwc-icon-button.disabledtrue{\r\n            color : red;\r\n            font-family : Montserrat;\r\n            font-weight : bold;\r\n            font-size : 19px;\r\n          }\r\n          mwc-icon-button#video {\r\n            color : #FFFFFF;\r\n            color : #1473e6; /* rgba(36, 192, 235, 1); */\r\n          }\r\n          sp-button {\r\n            background : #24C0EB;\r\n            background : rgba(36, 192, 235, 1);\r\n            border-color : inherit !important;\r\n            border-radius : 35px;\r\n            -moz-border-radius : 35px;\r\n            -webkit-border-radius : 35px;\r\n            font-family : Montserrat;\r\n            font-weight : bold;\r\n            font-size : 19px;\r\n            color : #FFFFFF;\r\n            color : rgb(255, 255, 255);\r\n          }\r\n          mwc-textfield {\r\n            border-style : Solid;\r\n            border-color : #999999;\r\n            border-color : rgba(153, 153, 153, 1);\r\n            border-width : 1px;\r\n            border-radius : 7px;\r\n            -moz-border-radius : 7px;\r\n            -webkit-border-radius : 7px;\r\n            font-family : Montserrat;\r\n            font-weight : bold;\r\n            font-size : 19px;\r\n            background-color :  #FFFFFF;\r\n            background-color : rgb(255, 255, 255);\r\n            background: rgba(255, 255, 255, 0) none repeat scroll 0% 0%;\r\n          }\r\n          mwc-textfield.mdc-text-field {\r\n            background-color :  #FFFFFF;\r\n            background-color : rgb(255, 255, 255);\r\n          }\r\n          mwc-textfield.mdc-textfield.mdc-floating-label {\r\n            color: red;\r\n          }\r\n        </style>\r\n          ${actions !== undefined && actions.map(action =>\r\n        html`\r\n          ${this.btnHiddenForRows(action, data) ? nothing :\r\n            html`${action.button ?\r\n              html`${action.button.icon ?\r\n                html`<mwc-icon-button\r\n                  class=\"${action.button.class} disabled${this.btnDisabled(action, actions)}\"\r\n                  icon=\"${action.button.icon}\" id=\"${action.actionName}\"\r\n                  title=\"${action.button.title['label_' + this.lang]}\"\r\n                  ?disabled=${this.btnDisabled(action, actions)}\r\n                  ?hidden=${this.btnHiddenForRows(action, data)}\r\n                  @click=${(e) => this.trazitButtonsMethod(e, true, action, actions, null, null, data, isProcManagement, parentData)}></mwc-icon-button>` :\r\n                html`${action.button.img ?\r\n                  html`<mwc-icon-button\r\n                  class=\"${action.button.class} disabled${this.btnDisabled(action, actions)} img\"\r\n                  title=\"${action.button.title['label_' + this.lang]}\" id=\"${action.actionName}\"\r\n                  ?disabled=${this.btnDisabled(action, actions)}\r\n                  ?hidden=${this.btnHiddenForRows(action, data)}\r\n                  @click=${(e) => this.trazitButtonsMethod(e, true, action, actions, null, null, data, isProcManagement, parentData)}>\r\n                      <img class=\"iconBtn\" src=\"images/${action.button.img}\">\r\n                  </mwc-icon-button>` :\r\n                  html`<mwc-button dense raised\r\n                  label=\"${action.button.title['label_' + this.lang]}\" id=\"${action.actionName}\"\r\n                  class=\"${action.button.class} disabled${this.btnDisabled(action, actions)} img\"\r\n                  ?disabled=${this.btnDisabled(action, actions)}\r\n                  ?hidden=${this.btnHiddenForRows(action, data)}\r\n                  @click=${(e) => this.trazitButtonsMethod(e, true, action, actions, null, null, data, isProcManagement, parentData)}></mwc-button>`\r\n                  }`\r\n                }` :\r\n              nothing\r\n              }`\r\n          }`\r\n      )}\r\n      `\r\n    }\r\n\r\n    getButton(sectionModel, data, selectedItems, isProcManagement) {\r\n      if (sectionModel === undefined) { sectionModel = this.viewModelFromProcModel }\r\n      //console.log(\"getButtondatasectionModel\", sectionModel);\r\n      //console.log('getButtondata', data)\r\n\r\n      let refreshable={enable: true, icon:\"refresh\", title:{label_en:\"Reload\", label_es: \"Recargar\"}}\r\n      if (sectionModel.viewQuery!==undefined&&sectionModel.viewQuery.refreshable!==undefined){\r\n        if (sectionModel.viewQuery.refreshable.enable!==undefined){\r\n          refreshable.enable=sectionModel.viewQuery.refreshable.enable\r\n        }\r\n        if (sectionModel.viewQuery.refreshable.title!==undefined){\r\n          refreshable.title=sectionModel.viewQuery.refreshable.title\r\n        }\r\n        if (sectionModel.viewQuery.refreshable.icon!==undefined){\r\n          refreshable.icon=sectionModel.viewQuery.refreshable.icon\r\n        }\r\n      }\r\n      if (sectionModel.refreshable!==undefined){\r\n        if (sectionModel.refreshable.enable!==undefined){\r\n          refreshable.enable=sectionModel.refreshable.enable\r\n        }\r\n        if (sectionModel.refreshable.title!==undefined){\r\n          refreshable.title=sectionModel.refreshable.title\r\n        }\r\n        if (sectionModel.refreshable.icon!==undefined){\r\n          refreshable.icon=sectionModel.refreshable.icon\r\n        }\r\n      }\r\n\r\n      let printable={enable: true, icon:\"print\", title:{label_en:\"Print\", label_es: \"Imprimir\"}}\r\n      if (sectionModel.viewQuery!==undefined&&sectionModel.viewQuery.printable!==undefined){\r\n        if (sectionModel.viewQuery.printable.enable!==undefined){\r\n          printable.enable=sectionModel.viewQuery.printable.enable\r\n        }\r\n        if (sectionModel.viewQuery.printable.title!==undefined){\r\n          printable.title=sectionModel.viewQuery.printable.title\r\n        }\r\n        if (sectionModel.viewQuery.printable.icon!==undefined){\r\n          printable.icon=sectionModel.viewQuery.printable.icon\r\n        }\r\n      }\r\n      if (sectionModel.printable!==undefined){\r\n        if (sectionModel.printable.enable!==undefined){\r\n          printable.enable=sectionModel.printable.enable\r\n        }\r\n        if (sectionModel.printable.title!==undefined){\r\n          printable.title=sectionModel.printable.title\r\n        }\r\n        if (sectionModel.printable.icon!==undefined){\r\n          printable.icon=sectionModel.printable.icon\r\n        }\r\n      }\r\n      \r\n      let downloadable={enable: true, icon:\"download\", title:{label_en:\"Export\", label_es: \"Exportar\"}}\r\n      if (sectionModel.viewQuery!==undefined&&sectionModel.viewQuery.downloadable!==undefined){\r\n        if (sectionModel.viewQuery.downloadable.enable!==undefined){\r\n          downloadable.enable=sectionModel.viewQuery.downloadable.enable\r\n        }\r\n        if (sectionModel.viewQuery.downloadable.title!==undefined){\r\n          downloadable.title=sectionModel.viewQuery.downloadable.title\r\n        }\r\n        if (sectionModel.viewQuery.downloadable.icon!==undefined){\r\n          downloadable.icon=sectionModel.viewQuery.downloadable.icon\r\n        }\r\n      }\r\n      if (sectionModel.downloadable!==undefined){\r\n        if (sectionModel.downloadable.enable!==undefined){\r\n          downloadable.enable=sectionModel.downloadable.enable\r\n        }\r\n        if (sectionModel.downloadable.title!==undefined){\r\n          downloadable.title=sectionModel.downloadable.title\r\n        }\r\n        if (sectionModel.downloadable.icon!==undefined){\r\n          downloadable.icon=sectionModel.downloadable.icon\r\n        }\r\n      }\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t \r\n\t\t\t   \r\n\t\t\t\t\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t   \r\n\t\t  \r\n      return html`\r\n        <style>\r\n          mwc-icon-button#lang {        \r\n            color : #1473e6; /* rgba(36, 192, 235, 1); */\r\n            font-family : Montserrat;\r\n            font-weight : bold;\r\n            font-size : 19px;\r\n          }\r\n          mwc-button {\r\n            background-color: #1473e6; /* rgba(36, 192, 235, 1); */\r\n            font-family: Montserrat;\r\n            font-weight: bold;\r\n            font-size: 19px;\r\n            --mdc-theme-primary:#1473e6; /* rgba(36, 192, 235, 1); */\r\n            border-radius: 12px;\r\n          }\r\n          mwc-button.button {        \r\n            color : #1473e6; /* rgba(36, 192, 235, 1); */\r\n            font-family : Montserrat;\r\n            font-weight : bold;\r\n            font-size : 19px;\r\n            background: rgb(36, 192, 235) none repeat scroll 0% 0%;\r\n            font-family: Montserrat;\r\n            font-weight: bold;\r\n            font-size: 19px;\r\n            color: white;\r\n            border-color: transparent !important;\r\n            --mdc-button-fill-color: red;\r\n            --mdc-button-ink-color: blue;\r\n            border-radius: 12px;\r\n          }            \r\n          mwc-icon-button {        \r\n            color : #1473e6; /* rgba(36, 192, 235, 1); */\r\n            font-family : Montserrat;\r\n            font-weight : bold;\r\n            font-size : 19px;\r\n          }\r\n          mwc-icon-button.disabledtrue{\r\n            color : red;\r\n            font-family : Montserrat;\r\n            font-weight : bold;\r\n            font-size : 19px;\r\n          }\r\n          mwc-icon-button#video {\r\n            color : #FFFFFF;\r\n            color : #1473e6; /* rgba(36, 192, 235, 1); */\r\n          }\r\n          sp-button {\r\n            background : #24C0EB;\r\n            background : #1473e6; /* rgba(36, 192, 235, 1); */\r\n            border-color : inherit !important;\r\n            border-radius : 35px;\r\n            -moz-border-radius : 35px;\r\n            -webkit-border-radius : 35px;\r\n            font-family : Montserrat;\r\n            font-weight : bold;\r\n            font-size : 19px;\r\n            color : #FFFFFF;\r\n            color : rgb(255, 255, 255);\r\n          }\r\n          mwc-textfield {\r\n            border-style : Solid;\r\n            border-color : #999999;\r\n            border-color : rgba(153, 153, 153, 1);\r\n            border-width : 1px;\r\n            border-radius : 7px;\r\n            -moz-border-radius : 7px;\r\n            -webkit-border-radius : 7px;\r\n            font-family : Montserrat;\r\n            font-weight : bold;\r\n            font-size : 19px;\r\n            background-color :  #FFFFFF;\r\n            background-color : rgb(255, 255, 255);\r\n            background: rgba(255, 255, 255, 0) none repeat scroll 0% 0%;\r\n          }\r\n          mwc-textfield.mdc-text-field {\r\n            background-color :  #FFFFFF;\r\n            background-color : rgb(255, 255, 255);\r\n          }\r\n          mwc-textfield.mdc-textfield.mdc-floating-label {\r\n            color: red;\r\n          }\r\n        </style>\r\n          ${refreshable.enable===true ?html`\r\n          <mwc-icon-button\r\n              ${refreshable===undefined||refreshable.class===undefined?'':html`class=\"${refreshable.class}\"`}          \r\n              icon=\"${refreshable.icon}\" id=\"refresh\"\r\n              title=\"${refreshable.title['label_' + this.lang]}\"\r\n              @click=${() => this.GetViewData()}\r\n              style=\"${refreshable.style !== undefined ? refreshable.style : ''}\">\r\n          </mwc-icon-button>` : nothing\r\n        }\r\n        ${printable.enable===true ?html`\r\n          <mwc-icon-button \r\n              ${printable===undefined||printable.class===undefined?'':html`class=\"${printable.class}\"`}\r\n              icon=\"${printable.icon}\" id=\"printable\" \r\n              title=\"${printable.title['label_' + this.lang]}\"             \r\n              @click=${() => this.printTable(sectionModel.index)}\r\n              style=\"${printable!==undefined&&printable.style !== undefined ? printable.style : ''}\">\r\n          </mwc-icon-button>` : nothing\r\n        }\r\n        ${downloadable.enable === true ?\r\n          html`\r\n          <mwc-icon-button \r\n          ${downloadable===undefined||downloadable.class===undefined?'':html`class=\"${downloadable.class}\"`}\r\n              icon=\"${downloadable.icon}\" id=\"downloadable\" \r\n              title=\"${downloadable.title['label_' + this.lang]}\"             \r\n              @click=${() => this.downloadDataTableToCSV(sectionModel, data, selectedItems, downloadable)}\r\n              style=\"${downloadable!==undefined&&downloadable.style !== undefined ? downloadable.style : ''}\">\r\n          </mwc-icon-button>` : nothing\r\n        }                \r\n          ${sectionModel !== undefined && sectionModel.actions && sectionModel.actions.map(action =>\r\n          html`\r\n\r\n              ${this.btnHidden(action, data) ? nothing :\r\n                  html`${action.button ?\r\n                    html`${action.button.icon ?\r\n                      html`<mwc-icon-button id=\"${action.actionName}\"\r\n                                                                                      \r\n                      class=\"${action.button.class} disabled${this.btnDisabled(action, sectionModel)}\"\r\n                      icon=\"${action.button.icon}\" \r\n                      title=\"${action.button.title['label_' + this.lang]}\" \r\n                      ?disabled=${this.btnDisabled(action, sectionModel)}\r\n                      ?hidden=${this.btnHidden(action, data)}\r\n                      style=\"${action.button.style !== undefined ? action.button.style : ''}\"\r\n                      .data=${data}\r\n                      @click=${(e) => this.trazitButtonsMethod(e, false, action, sectionModel, null, null, data, isProcManagement)}></mwc-icon-button>` :\r\n                      html`${action.button.img ?\r\n                        html`<mwc-icon-button  id=\"${action.actionName}\"\r\n                      class=\"${this.btnDisabled(action, sectionModel) === true ? 'disabledtrue' : 'disabledfalse'}\"\r\n                      title=\"${action.button.title['label_' + this.lang]}\" \r\n                      ?disabled=${this.btnDisabled(action, sectionModel)}\r\n                      ?hidden=${this.btnHidden(action, data)}\r\n                      style=\"${action.button.style !== undefined ? action.button.style : ''}\"\r\n                      .data=${data}\r\n                      @click=${(e) => this.trazitButtonsMethod(e, false, action, sectionModel, null, null, data, isProcManagement)}>\r\n                          <img class=\"iconBtn\" src=\"images/${this.giveFileName(action, sectionModel)}\">\r\n                      </mwc-icon-button>` :\r\n                        html`<mwc-button dense raised id=\"${action.actionName}\"\r\n                      label=\"${action.button.title['label_' + this.lang]}\" \r\n                      ?disabled=${this.btnDisabled(action, sectionModel)}\r\n                      ?hidden=${this.btnHidden(action , data)}\r\n                      style=\"${action.button.style !== undefined ? action.button.style : ''}\"\r\n                      .data=${data}\r\n                      @click=${(e) => this.trazitButtonsMethod(e, false, action, sectionModel, null, null, data, isProcManagement)}></mwc-button>`\r\n                        }`\r\n                      }` :\r\n                    nothing\r\n                    }`\r\n                }\r\n          `\r\n        )}\r\n      `\r\n    }\r\n\tgetSmartFilterButton(sectionModel, data, isProcManagement,lang) {\r\n\t\tlet action=sectionModel.smartFilter\r\n\t\tif(action==undefined){return}\r\n\t\tif (sectionModel === undefined) { sectionModel = this.viewModelFromProcModel }\r\n\t\tconsole.log(\"getButtondatasectionModel\", sectionModel);\r\n\t\tconsole.log('getButtondata', data)\r\n\t\treturn html`\r\n\t\t  <style>\r\n\t\t\tmwc-icon-button#lang {\r\n\t\t\t  color : rgba(36, 192, 235, 1);\r\n\t\t\t  font-family : Montserrat;\r\n\t\t\t  font-weight : bold;\r\n\t\t\t  font-size : 19px;\r\n\t\t\t}\r\n\t\t\tmwc-button {\r\n\t\t\t  background-color: rgba(36, 192, 235, 1);\r\n\t\t\t  font-family: Montserrat;\r\n\t\t\t  font-weight: bold;\r\n\t\t\t  font-size: 19px;\r\n\t\t\t  --mdc-theme-primary:rgba(36, 192, 235, 1);\r\n\t\t\t  border-radius: 12px;\r\n\t\t\t}\r\n\t\t\tmwc-button.button {\r\n\t\t\t  color : rgba(36, 192, 235, 1);\r\n\t\t\t  font-family : Montserrat;\r\n\t\t\t  font-weight : bold;\r\n\t\t\t  font-size : 19px;\r\n\t\t\t  background: rgb(36, 192, 235) none repeat scroll 0% 0%;\r\n\t\t\t  font-family: Montserrat;\r\n\t\t\t  font-weight: bold;\r\n\t\t\t  font-size: 19px;\r\n\t\t\t  color: white;\r\n\t\t\t  border-color: transparent !important;\r\n\t\t\t  --mdc-button-fill-color: red;\r\n\t\t\t  --mdc-button-ink-color: blue;\r\n\t\t\t  border-radius: 12px;\r\n\t\t\t}\r\n\t\t\tmwc-icon-button {\r\n\t\t\t  color : rgba(36, 192, 235, 1);\r\n\t\t\t  font-family : Montserrat;\r\n\t\t\t  font-weight : bold;\r\n\t\t\t  font-size : 19px;\r\n\t\t\t}\r\n\t\t\tmwc-icon-button.disabledtrue{\r\n\t\t\t  color : red;\r\n\t\t\t  font-family : Montserrat;\r\n\t\t\t  font-weight : bold;\r\n\t\t\t  font-size : 19px;\r\n\t\t\t}\r\n\t\t\tmwc-icon-button#video {\r\n\t\t\t  color : #FFFFFF;\r\n\t\t\t  color : rgba(36, 192, 235, 1);\r\n\t\t\t}\r\n\t\t\tsp-button {\r\n\t\t\t  background : #24C0EB;\r\n\t\t\t  background : rgba(36, 192, 235, 1);\r\n\t\t\t  border-color : inherit !important;\r\n\t\t\t  border-radius : 35px;\r\n\t\t\t  -moz-border-radius : 35px;\r\n\t\t\t  -webkit-border-radius : 35px;\r\n\t\t\t  font-family : Montserrat;\r\n\t\t\t  font-weight : bold;\r\n\t\t\t  font-size : 19px;\r\n\t\t\t  color : #FFFFFF;\r\n\t\t\t  color : rgb(255, 255, 255);\r\n\t\t\t}\r\n\t\t\tmwc-textfield {\r\n\t\t\t  border-style : Solid;\r\n\t\t\t  border-color : #999999;\r\n\t\t\t  border-color : rgba(153, 153, 153, 1);\r\n\t\t\t  border-width : 1px;\r\n\t\t\t  border-radius : 7px;\r\n\t\t\t  -moz-border-radius : 7px;\r\n\t\t\t  -webkit-border-radius : 7px;\r\n\t\t\t  font-family : Montserrat;\r\n\t\t\t  font-weight : bold;\r\n\t\t\t  font-size : 19px;\r\n\t\t\t  background-color :  #FFFFFF;\r\n\t\t\t  background-color : rgb(255, 255, 255);\r\n\t\t\t  background: rgba(255, 255, 255, 0) none repeat scroll 0% 0%;\r\n\t\t\t}\r\n\t\t\tmwc-textfield.mdc-text-field {\r\n\t\t\t  background-color :  #FFFFFF;\r\n\t\t\t  background-color : rgb(255, 255, 255);\r\n\t\t\t}\r\n\t\t\tmwc-textfield.mdc-textfield.mdc-floating-label {\r\n\t\t\t  color: red;\r\n\t\t\t}\r\n\t\t  </style>\r\n      ${refreshable.enable===true ?html`\r\n        <mwc-icon-button\r\n            ${refreshable===undefined||refreshable.class===undefined?'':html`class=\"${refreshable.class}\"`}          \r\n            icon=\"${refreshable.icon}\" id=\"refresh\"\r\n            title=\"${refreshable.title['label_' + this.lang]}\"\r\n            @click=${() => this.GetViewData()}\r\n            style=\"${refreshable.style !== undefined ? refreshable.style : ''}\">\r\n        </mwc-icon-button>` : nothing\r\n      }                \t  \r\n\t\t\t${this.btnHidden(action) ? nothing :\r\n\t\t\t\thtml`${action.button ?\r\n\t\t\t\t  html`${action.button.icon ?\r\n\t\t\t\t\thtml`<mwc-icon-button id=\"${action.actionName}\"\r\n\t\t\t\t\tclass=\"${action.button.class} disabled${this.btnDisabled(action, sectionModel)}\"\r\n\t\t\t\t\ticon=\"${action.button.icon}\"\r\n\t\t\t\t\ttitle=\"${action.button.title['label_' +lang]}\"\r\n\t\t\t\t\t?disabled=${this.btnDisabled(action, sectionModel)}\r\n\t\t\t\t\t?hidden=${this.btnHidden(action)}\r\n\t\t\t\t\tstyle=\"${action.button.style !== undefined ? action.button.style : ''}\"\r\n\t\t\t\t\t@click=${(e) => this.trazitButtonsMethod(e, false, action, sectionModel, null, null, data, isProcManagement)}></mwc-icon-button>` :\r\n\t\t\t\t\thtml`${action.button.img ?\r\n\t\t\t\t\t  html`<mwc-icon-button  id=\"${action.actionName}\"\r\n\t\t\t\t\tclass=\"${this.btnDisabled(action, sectionModel) === true ? 'disabledtrue' : 'disabledfalse'}\"\r\n\t\t\t\t\ttitle=\"${action.button.title['label_' + lang]}\"\r\n\t\t\t\t\t?disabled=${this.btnDisabled(action, sectionModel)}\r\n\t\t\t\t\t?hidden=${this.btnHidden(action)}\r\n\t\t\t\t\tstyle=\"${action.button.style !== undefined ? action.button.style : ''}\"\r\n\t\t\t\t\t@click=${(e) => this.trazitButtonsMethod(e, false, action, sectionModel, null, null, data, isProcManagement)}>\r\n\t\t\t\t\t\t<img class=\"iconBtn\" src=\"images/${this.giveFileName(action, sectionModel)}\">\r\n\t\t\t\t\t</mwc-icon-button>` :\r\n\t\t\t\t\t  html`<mwc-button dense raised id=\"${action.actionName}\"\r\n\t\t\t\t\tlabel=\"${action.button.title['label_' + lang]}\"\r\n\t\t\t\t\t?disabled=${this.btnDisabled(action, sectionModel)}\r\n\t\t\t\t\t?hidden=${this.btnHidden(action)}\r\n\t\t\t\t\tstyle=\"${action.button.style !== undefined ? action.button.style : ''}\"\r\n\t\t\t\t\t@click=${(e) => this.trazitButtonsMethod(e, false, action, sectionModel, null, null, data, isProcManagement)}></mwc-button>`\r\n\t\t\t\t\t  }`\r\n\t\t\t\t\t}` :\r\n\t\t\t\t  nothing\r\n\t\t\t\t  }`\r\n\t\t\t  }`\r\n\r\n\t}\r\n    giveFileName(action, sectionModel) {\r\n      const originalExtension = action.button.img.split('.').pop();\r\n      let imgUrl = action.button.img.replace(/\\.[^/.]+$/, `_${this.btnDisabled(action, sectionModel) === true ? 'disabledtrue' : 'disabledfalse'}.${originalExtension}`);\r\n      return imgUrl\r\n    }\r\n\r\n    btnDisabled(action, viewModelFromProcModel) {\r\n\r\n      //console.log(action)\r\n      let selRecord = []\r\n      if (viewModelFromProcModel.alternativeItemPropertyName !== undefined) {\r\n        selRecord = this[viewModelFromProcModel.alternativeItemPropertyName]\r\n      } else {\r\n        selRecord = this.selectedItems\r\n      }\r\n      let d = false\r\n      if (action.certificationException !== undefined && action.certificationException === true) { return false }\r\n      if (selRecord === undefined || selRecord.length == 0) {\r\n        if (action.button.requiresGridItemSelected !== undefined &&\r\n          action.button.requiresGridItemSelected === false) {\r\n          d = this.disabledByCertification(action)\r\n          //console.log('btnDisabled', 'disabledByCertification returned ', d)\r\n          return d\r\n        }\r\n        return true\r\n      }\r\n\r\n      //console.log('btnDisabled', viewModelFromProcModel.viewName, 'action', action)\r\n      if (viewModelFromProcModel === undefined) { viewModelFromProcModel = this.viewModelFromProcModel }\r\n\r\n\r\n      if (action.mode !== undefined && action.mode.toString().toUpperCase() === \"READONLY\") {\r\n        return true\r\n      }\r\n      if (viewModelFromProcModel.mode !== undefined && viewModelFromProcModel.mode.toString().toUpperCase() === \"READONLY\") {\r\n        return true\r\n      }\r\n      // if (action.buttonForQuery!==undefined && action.buttonForQuery===true) {\r\n      //   if (action.button.requiresGridItemSelected!==undefined&&\r\n      //     action.button.requiresGridItemSelected===true){\r\n      //       return false\r\n      //   }else{\r\n      //     return false\r\n      //   }\r\n      // }\r\n      if (action.buttonForQuery !== undefined && action.buttonForQuery === true) {\r\n      } else {\r\n        d = this.disabledByCertification(action)\r\n        //console.log('btnDisabled', 'disabledByCertification returned ', d)\r\n        if (d) { return d }\r\n      }\r\n      if (action.button.requiresGridItemSelected !== undefined) {\r\n        if (action.button.requiresGridItemSelected === false) {\r\n          return false\r\n        }\r\n\r\n        if (viewModelFromProcModel.alternativeItemPropertyName !== undefined) {\r\n          //console.log('viewModelFromProcModel.alternativeItemPropertyName', viewModelFromProcModel.alternativeItemPropertyName)\r\n          if (this[viewModelFromProcModel.alternativeItemPropertyName] === undefined) {\r\n            return true\r\n          } else {\r\n            if (this[viewModelFromProcModel.alternativeItemPropertyName].length > 0) {\r\n              return false\r\n            } else {\r\n              return true\r\n            }\r\n          }\r\n        } else {\r\n          if (selRecord === undefined) {\r\n            return true\r\n          } else {\r\n            if (selRecord[0] !== undefined) {\r\n              return false\r\n            } else {\r\n              return true\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return d\r\n    }\r\n    btnHiddenForRows(action, selItems) {\r\n      let selRow=selItems[0]\r\n      //console.log('btnHiddenForRows', 'action', action, 'selRow', selRow, 'show', action.button.showWhenSelectedItem, 'hide', action.button.hideWhenSelectedItem)\r\n      let d = false\r\n      if (selRow !== undefined && selRow[\"No Data\"] !== undefined) { return true }\r\n      if (action.button !== undefined&&action.button.showWhenSelectedItem !== undefined&&selItems.length===1) {\r\n        //console.log('btnHidden')\r\n        if (selRow === undefined || selRow === undefined) { return true } // keep hide when no selection\r\n        if (Array.isArray(action.button.showWhenSelectedItem)) {\r\n          action.button.showWhenSelectedItem.forEach(rowArray => {\r\n            let curValue = String(rowArray.value).split('|')\r\n            //console.log(rowArray.value, selRow[rowArray.column])\r\n\r\n            if (rowArray.value === \"*NULL*\") {\r\n\r\n              if (selRow[rowArray.column].length == 0) {\r\n                d = false\r\n              }\r\n            } else if ( String(rowArray.value).toUpperCase().includes(\"*NOT\")&&\r\n                        String(rowArray.value).toUpperCase().includes(\"NULL*\")) {                          \r\n              if (selRow[rowArray.column].length > 0) {\r\n                d = false\r\n              }\r\n            } else {\r\n              if (curValue.includes(selRow[rowArray.column])) {\r\n                d = true\r\n              } else {\r\n                d = false\r\n              }\r\n            }\r\n          })\r\n          return d\r\n        } else { //then it is json object\r\n          if (action.button.showWhenSelectedItem.value === \"*NULL*\") {\r\n            if (selRow[action.button.showWhenSelectedItem.column].length == 0) {\r\n              return false\r\n            } else { return true }\r\n          } else if ( String(action.button.showWhenSelectedItem.value).toUpperCase().includes(\"*NOT\")&&\r\n                      String(action.button.showWhenSelectedItem.value).toUpperCase().includes(\"NULL*\")) {                          \r\n            if (selRow[action.button.showWhenSelectedItem.column].length > 0) {\r\n              return false\r\n            } else { return true }\r\n          } else if (selRow[action.button.showWhenSelectedItem.column] !== action.button.showWhenSelectedItem.value) {\r\n            return true\r\n          } else {\r\n            return false\r\n          }\r\n        }\r\n      } else if (action.button !== undefined&&action.button.hideWhenSelectedItem !== undefined&&selItems.length===1) {\r\n        if (selRow === undefined || selRow === undefined) { return true } // keep shown when no selection\r\n        if (Array.isArray(action.button.hideWhenSelectedItem)) {\r\n          action.button.hideWhenSelectedItem.forEach(rowArray => {\r\n            if (rowArray.value === \"*NULL*\") {\r\n              if (selRow[rowArray.column].length == 0) {\r\n                d = true\r\n              } else { d = false }\r\n            } else if ( String(rowArray.value).toUpperCase().includes(\"*NOT\")&&\r\n                        String(rowArray.value).toUpperCase().includes(\"NULL*\")) {                          \r\n              if (selRow[rowArray.column].length > 0) {\r\n                d = true\r\n              } else { d = false }\r\n            } else {\r\n              if (selRow[rowArray.column] != rowArray.value) {\r\n                d = true\r\n              } else { d = false }\r\n            }\r\n          })\r\n          return !d\r\n        } else { //then it is json object\r\n          if (action.button.hideWhenSelectedItem.value === \"*NULL*\") {\r\n            if (selRow[action.button.hideWhenSelectedItem.column].length == 0) {\r\n              return true\r\n            } else {\r\n              return false\r\n            }\r\n          } else if ( String(action.button.hideWhenSelectedItem.value).toUpperCase().includes(\"*NOT\")&&\r\n                      String(action.button.hideWhenSelectedItem.value).toUpperCase().includes(\"NULL*\")) {                          \r\n            if (selRow[action.button.hideWhenSelectedItem.column].length > 0) {\r\n              return true\r\n            } else {\r\n              return false\r\n            }\r\n          } else if (selRow[action.button.hideWhenSelectedItem.column] === action.button.hideWhenSelectedItem.value) {\r\n            return true\r\n          } else {\r\n            return false\r\n          }\r\n        }\r\n      } else {\r\n        d = false\r\n      }\r\n      return d\r\n    }\r\n    btnHidden(action, selItems) {\r\n      // let selRow=selItems[0]      \r\n      if (selItems!==undefined){\r\n        if (selItems.length>1\r\n          &&(action.button===undefined||action.button.requiresGridItemSelected===undefined||action.button.requiresGridItemSelected===true)\r\n          &&(action.actionForMultiSelect===undefined||action.actionForMultiSelect!==true)){\r\n          return true\r\n        }\r\n        return this.btnHiddenForRows(action, selItems)\r\n      }\r\n      let d = false\r\n      if (action===undefined||action.button===undefined){return d}\r\n      if (action.button.showWhenSelectedItem !== undefined&&selItems.length===1) {\r\n        //console.log('btnHidden')\r\n        if (this.selectedItems === undefined || this.selectedItems[0] === undefined) { return true } // keep hide when no selection\r\n        if (Array.isArray(action.button.showWhenSelectedItem)) {\r\n          action.button.showWhenSelectedItem.forEach(rowArray => {\r\n            let curValue = String(rowArray.value).split('|')\r\n            //console.log(rowArray.value, this.selectedItems[0][rowArray.column])\r\n\r\n            if (rowArray.value === \"*NULL*\") {\r\n              if (this.selectedItems[0][rowArray.column].length == 0) {\r\n                d = true\r\n              }\r\n            } else if ( String(rowArray.value).toUpperCase().includes(\"*NOT\")&&\r\n                        String(rowArray.value).toUpperCase().includes(\"NULL*\")) {                          \r\n              if (this.selectedItems[0][rowArray.column].length > 0) {\r\n                d = true\r\n              }\r\n            } else {\r\n              if (curValue.includes(this.selectedItems[0][rowArray.column])) {\r\n                d = true\r\n              } else {\r\n                d = false\r\n              }\r\n            }\r\n          })\r\n          return d\r\n        } else { //then it is json object\r\n          if (action.button.showWhenSelectedItem.value === \"*NULL*\") {\r\n            if (this.selectedItems[0][action.button.showWhenSelectedItem.column].length == 0) {\r\n              d = true\r\n            }\r\n          } else if ( String(action.button.showWhenSelectedItem.value).toUpperCase().includes(\"*NOT\")&&\r\n                      String(action.button.showWhenSelectedItem.value).toUpperCase().includes(\"NULL*\")) {\r\n            if (this.selectedItems[0][action.button.showWhenSelectedItem.column].length > 0) {\r\n              d = true\r\n            }\r\n          } else if (this.selectedItems[0][action.button.showWhenSelectedItem.column] !== action.button.showWhenSelectedItem.value) {\r\n            return true\r\n          } else {\r\n            return false\r\n          }\r\n        }\r\n      } else if (action.button.hideWhenSelectedItem !== undefined&&selItems.length===1) {\r\n        if (this.selectedItems === undefined || this.selectedItems[0] === undefined) { return true } // keep shown when no selection\r\n        if (Array.isArray(action.button.hideWhenSelectedItem)) {\r\n          action.button.hideWhenSelectedItem.forEach(rowArray => {\r\n            if (rowArray.value === \"*NULL*\") {\r\n              if (this.selectedItems[0][rowArray.column].length == 0) {\r\n                d = true\r\n              }\r\n            } else if ( String(rowArray.value).toUpperCase().includes(\"*NOT\")&&\r\n                        String(rowArray.value).toUpperCase().includes(\"NULL*\")) {                          \r\n              if (this.selectedItems[0][rowArray.column].length > 0) {\r\n                d = true\r\n              }\r\n            } else {\r\n              if (this.selectedItems[0][rowArray.column] != rowArray.value) {\r\n                d = true\r\n              }\r\n            }\r\n          })\r\n          return !d\r\n        } else { //then it is json object\r\n          if (action.button.hideWhenSelectedItem.value === \"*NULL*\") {\r\n            if (this.selectedItems[0][action.button.hideWhenSelectedItem.column].length == 0) {\r\n              d = true\r\n            }\r\n          } else if ( String(action.button.hideWhenSelectedItem.value).toUpperCase().includes(\"*NOT\")&&\r\n                      String(action.button.hideWhenSelectedItem.value).toUpperCase().includes(\"NULL*\")) {                          \r\n            if (this.selectedItems[0][action.button.hideWhenSelectedItem.column].length > 0) {\r\n              d = true\r\n            }\r\n          } else if (this.selectedItems[0][action.button.hideWhenSelectedItem.column] === action.button.hideWhenSelectedItem.value) {\r\n            return true\r\n          } else {\r\n            return false\r\n          }\r\n        }\r\n      } else {\r\n        d = false\r\n      }\r\n      return d\r\n    }\r\n\r\n\r\n    getFromMasterData() {\r\n      if (this.procInstanceName === undefined) {\r\n        alert(\"Proc Instance Name not found\")\r\n        return\r\n      }\r\n      //alert(this.procInstanceName)\r\n\r\n      if (this.masterData === undefined) { return entries }\r\n      console.log('masterData', this.masterData)\r\n      console.log('actionBeingPerformedModel', this.actionBeingPerformedModel)\r\n      let entries = []\r\n\r\n      if (this.masterData[this.viewModelFromProcModel.viewQuery.actionName] === undefined) {\r\n        alert('Property ' + fldMDDef.propertyNameContainer + ' not found in Master Data')\r\n        return []\r\n      } else {\r\n        return this.masterData[this.viewModelFromProcModel.viewQuery.actionName]\r\n      }\r\n      // let setGrid = true\r\n      // if (setGrid){\r\n      //   if (entries && !entries.is_error) {\r\n      //     this.setGrid(entries)\r\n      //   } else {\r\n      //     this.setGrid()\r\n      //   }\r\n      // }\r\n    }\r\n\r\n    setTheValues(queryDefinition, j) {\r\n      if (queryDefinition.notUseGrid !== undefined && queryDefinition.notUseGrid === true) {\r\n        if (queryDefinition.variableName !== undefined) {\r\n          if (queryDefinition.endPointResponseVariableName !== undefined) {\r\n            this[queryDefinition.variableName] = j[queryDefinition.endPointResponseVariableName]\r\n          } else {\r\n            this[queryDefinition.variableName] = j\r\n          }\r\n        } else {\r\n          this.selectedItems = j\r\n          this.selectedItem = this.selectedItems[0]\r\n          console.log('this.selectedItems', this.selectedItems)\r\n          if (j && !j.is_error) {\r\n            this.requestData = j\r\n          } else {\r\n            this.requestData = {}\r\n          }\r\n        }\r\n      } else {\r\n        this.ready = true\r\n        if (this.setGrid !== undefined) {\r\n          if (j && !j.is_error) {\r\n            this.setGrid(j)\r\n          } else {\r\n            this.setGrid()\r\n          }\r\n        } else {\r\n          if (j && !j.is_error) {\r\n            this.requestData = j\r\n          } else {\r\n            this.requestData = {}\r\n          }\r\n        }\r\n      }\r\n      this.samplesReload = false\r\n    }\r\n\r\n\r\n    async GetViewData(setGrid = true, viewQuery) {\r\n      // const stack = new Error().stack;\r\n      // const stackLines = stack.split('\\n');\r\n      // if (stackLines!==null&&stackLines[1]!==null){\r\n      //   const callerName = stackLines[1].match(/at (\\w+)/)[0]; // Adjust the index as needed\r\n      //   console.log(\"Called from: \" + callerName);\r\n      // }\r\n      if (viewQuery === undefined) {\r\n        viewQuery = this.viewModelFromProcModel.viewQuery;\r\n      }\r\n      let queryDefinition = viewQuery;\r\n      if (queryDefinition === undefined) { return; }\r\n      let params = {};\r\n    \r\n      if (viewQuery !== undefined && viewQuery.clientMethod !== undefined) {\r\n        if (this[viewQuery.clientMethod] === undefined) {\r\n          alert('not found any clientMethod called ' + viewQuery.clientMethod);\r\n          return;\r\n        }\r\n        let j = this[viewQuery.clientMethod]();\r\n        this.setTheValues(viewQuery, j);\r\n        return;\r\n      }\r\n    \r\n      if (this.config === undefined || this.config.backendUrl === undefined) {\r\n        // fetch('../../../demo/config.json')\r\n        //   .then(response => {\r\n        //     if (!response.ok) {\r\n        //       throw new Error(`HTTP error! Status: ${response.status}`);\r\n        //     }\r\n        //     return response.json();\r\n        //   })\r\n        //   .then(json => {\r\n        //     this.config = json;\r\n        //   })\r\n        //   .catch(error => {\r\n        //     console.error('Error fetching config:', error);\r\n        //   });\r\n\r\n          this.config=JSON.parse(sessionStorage.getItem(\"userSession\"))\r\n      }\r\n    \r\n      this.samplesReload = true;\r\n      this.selectedItems = [];\r\n      let APIParams = this.getAPICommonParams(queryDefinition);\r\n      let viewParams = this.jsonParam(queryDefinition);\r\n      let endPointUrl = this.getQueryAPIUrl(queryDefinition);\r\n      if (String(endPointUrl).toUpperCase().includes(\"ERROR\")) {\r\n        alert(endPointUrl);\r\n        return;\r\n      }\r\n      let serviceAPIurl = this.getServiceAPIUrl(viewQuery);\r\n      if (this.config.backendUrl === undefined && serviceAPIurl === undefined) {\r\n        serviceAPIurl = \"https://platform.trazit.net:8443/TRAZiT-API\";\r\n        let sessionDbName = JSON.parse(sessionStorage.getItem(\"userSession\")).dbName;\r\n        if (sessionDbName !== undefined) {\r\n          this.config.dbName = sessionDbName;\r\n        }\r\n        if (this.config.dbName === undefined) {\r\n          this.config.dbName = \"labplanet\";\r\n          this.config.isForTesting = false;\r\n        }\r\n      }\r\n      params = serviceAPIurl + endPointUrl\r\n        + '?' + new URLSearchParams(APIParams) + '&' + new URLSearchParams(viewParams);\r\n    \r\n      // Emitir evento para mostrar el progreso circular\r\n      this.dispatchEvent(new CustomEvent('show-progress', {\r\n        bubbles: true,\r\n        composed: true\r\n      }));\r\n\r\n      await this.fetchApi(params, false, queryDefinition).then(j => {\r\n        if (queryDefinition.actionName === 'ONE_PROCEDURE_DEFINITION' || queryDefinition.actionName === 'ALL_PROCEDURES_DEFINITION') {\r\n          if (j.master_data !== undefined) {\r\n            let userSession = JSON.parse(sessionStorage.getItem(\"userSession\"));\r\n            userSession.proc_management_masterdata = {};\r\n            userSession.proc_management_masterdata = j.master_data;\r\n            sessionStorage.setItem('userSession', JSON.stringify(userSession));\r\n          }\r\n        }\r\n        if (queryDefinition.dataResponse!==undefined&&queryDefinition.dataResponse===\"ArrayInRoot\"){\r\n          let arrayToSingleObject={}\r\n          arrayToSingleObject.queryData=j\r\n          this.selectedItemInView=arrayToSingleObject\r\n          return\r\n        }\r\n        queryDefinition.notUseGrid\r\n        if (queryDefinition.notUseGrid !== undefined && queryDefinition.notUseGrid === true) {\r\n          if (queryDefinition.variableName !== undefined) {\r\n            if (queryDefinition.endPointResponseVariableName !== undefined) {\r\n              this[queryDefinition.variableName] = j[queryDefinition.endPointResponseVariableName];\r\n            } else {\r\n              this[queryDefinition.variableName] = j;\r\n            }\r\n          } else {\r\n\r\n            this.selectedItems = j;\r\n            if (this.selectedItems[0] !== undefined && this.selectedItems[0] !== null) {\r\n              this.selectedItem = this.selectedItems[0];\r\n\r\n              if (this.selectedItemInView) {\r\n                if (j.length==1){\r\n                  this.selectedItemInView =j[0]\r\n                }else{\r\n                  const uniqueKey = this.viewModelFromProcModel.viewQuery.selectedItemKeyProperty;\r\n                  const newItem = j.find(item => item[uniqueKey] === this.selectedItemInView[uniqueKey]);\r\n                  if (newItem) {\r\n                    this.selectedItemInView = newItem;\r\n                  }\r\n                }\r\n              }\r\n\r\n              this.render();\r\n            }\r\n            if (j && !j.is_error) {\r\n              this.requestData = j;\r\n            } else {\r\n              this.requestData = {};\r\n            }\r\n          }\r\n        // } else if (setGrid) {\r\n        //   if (j && !j.is_error) {\r\n        //     this.setGrid(j);\r\n        //   } else {\r\n        //     this.setGrid();\r\n        //   }\r\n        } else {\r\n          if (j && !j.is_error) {\r\n            this.requestData = j;\r\n          } else {\r\n            this.requestData = {};\r\n          }\r\n        }\r\n      });\r\n\r\n      // Emitir evento para ocultar el progreso circular\r\n      this.dispatchEvent(new CustomEvent('hide-progress', {\r\n        bubbles: true,\r\n        composed: true\r\n      }));\r\n      this.ready = true\r\n      this.requestUpdate();\r\n      this.samplesReload = false;\r\n    }\r\n    \r\n    async GetAlternativeViewData(queryDefinition, selObject = {}) {\r\n      if (queryDefinition.clientMethod !== undefined) {\r\n        //alert('Calling '+queryDefinition.clientMethod+' from GetViewData')\r\n        if (this[queryDefinition.clientMethod] === undefined) {\r\n          alert('not found any clientMethod called ' + queryDefinition.clientMethod)\r\n          return\r\n        }\r\n        this[queryDefinition.clientMethod]()\r\n        return\r\n      }\r\n      console.log('GetAlternativeViewData', 'queryDefinition', queryDefinition)\r\n      let APIParams = this.getAPICommonParams(queryDefinition)\r\n      let viewParams = this.jsonParam(queryDefinition, selObject)\r\n      let endPointUrl = this.getQueryAPIUrl(queryDefinition)\r\n      let serviceAPIurl=this.getServiceAPIUrl(queryDefinition)\r\n      let params = serviceAPIurl + endPointUrl\r\n        + '?' + new URLSearchParams(APIParams) + '&' + new URLSearchParams(viewParams)\r\n\r\n      //console.log('params', params)\r\n      // Emitir evento para mostrar el progreso circular\r\n      this.dispatchEvent(new CustomEvent('show-progress', {\r\n        bubbles: true,\r\n        composed: true\r\n      }));      \r\n      await this.fetchApi(params).then(j => {\r\n        if (j && !j.is_error) {\r\n          this.setGrid(j)\r\n        } else {\r\n          this.setGrid()\r\n        }\r\n      })\r\n      // Emitir evento para ocultar el progreso circular\r\n      this.dispatchEvent(new CustomEvent('hide-progress', {\r\n        bubbles: true,\r\n        composed: true\r\n      }));      \r\n      this.samplesReload = false\r\n    }\r\n\r\n    async GetQueryForDialogGrid(actionDefinition) {\r\n      console.log('GetQueryForDialogGrid', actionDefinition)\r\n      if (actionDefinition.dialogQuery === undefined) { return }\r\n\r\n      let currQuery = actionDefinition.dialogQuery\r\n      if (currQuery.clientMethod !== undefined) {\r\n        //alert('Calling '+currQuery.clientMethod+' from GetViewData')\r\n        if (this[currQuery.clientMethod] === undefined) {\r\n          alert('not found any clientMethod called ' + currQuery.clientMethod)\r\n          return\r\n        }\r\n        this[currQuery.clientMethod]()\r\n        return\r\n      }\r\n      console.log('GetQueryForDialogGrid', 'currQuery', currQuery)\r\n      let APIParams = this.getAPICommonParams(currQuery)\r\n      let viewParams = this.jsonParam(currQuery)\r\n      let endPointUrl = this.getQueryAPIUrl(currQuery)\r\n      let serviceAPIurl=this.getServiceAPIUrl(currQuery)\r\n      let params = serviceAPIurl + endPointUrl\r\n        + '?' + new URLSearchParams(APIParams) + '&' + new URLSearchParams(viewParams)\r\n      \r\n      // Emitir evento para mostrar el progreso circular\r\n      this.dispatchEvent(new CustomEvent('show-progress', {\r\n        bubbles: true,\r\n        composed: true\r\n      }));      \r\n      \r\n      await this.fetchApi(params).then(j => {\r\n        if (j && !j.is_error) {\r\n          this.genericDialogGridItems = j\r\n\r\n        } else {\r\n          this.genericDialogGridItems = []\r\n        }\r\n      })\r\n      // Emitir evento para ocultar el progreso circular\r\n      this.dispatchEvent(new CustomEvent('hide-progress', {\r\n        bubbles: true,\r\n        composed: true\r\n      }));      \r\n\r\n\r\n    }\r\n\r\n    async GetQueriesForDialog(actionDefinition) {\r\n      console.log('GetQueriesForDialog', actionDefinition)\r\n      if (actionDefinition.dialogQueries === undefined) { return }\r\n\r\n      let i = 0\r\n      for (i = 0; i < actionDefinition.dialogQueries.length; i++) {\r\n        let currQuery = actionDefinition.dialogQueries[i]\r\n        if (currQuery.clientMethod !== undefined) {\r\n          //alert('Calling '+currQuery.clientMethod+' from GetViewData')\r\n          if (this[currQuery.clientMethod] === undefined) {\r\n            alert('not found any clientMethod called ' + currQuery.clientMethod)\r\n            return\r\n          }\r\n          this[currQuery.clientMethod]()\r\n          return\r\n        }\r\n        console.log('GetQueriesForDialog', 'currQuery', currQuery)\r\n        let APIParams = this.getAPICommonParams(currQuery)\r\n        let viewParams = this.jsonParam(currQuery)\r\n        if (currQuery === undefined) { return }\r\n        let endPointUrl = this.getQueryAPIUrl(currQuery)\r\n        let serviceAPIurl=this.getServiceAPIUrl(currQuery)\r\n        let params = serviceAPIurl + endPointUrl\r\n          //let params = this.config.backendUrl + (currQuery.endPoint ? currQuery.endPoint : this.config.SampleAPIqueriesUrl)\r\n          + '?' + new URLSearchParams(APIParams) + '&' + new URLSearchParams(viewParams)\r\n\r\n        //console.log('params', params)\r\n        // Emitir evento para mostrar el progreso circular\r\n        this.dispatchEvent(new CustomEvent('show-progress', {\r\n          bubbles: true,\r\n          composed: true\r\n        }));        \r\n        await this.fetchApi(params).then(j => {\r\n          if (j && !j.is_error) {\r\n            //alert(j.length)\r\n            this[currQuery.variableForData] = j\r\n\r\n          } else {\r\n            this[currQuery.variableForData] = []\r\n          }\r\n        })\r\n      }\r\n      // Emitir evento para ocultar el progreso circular\r\n      this.dispatchEvent(new CustomEvent('hide-progress', {\r\n        bubbles: true,\r\n        composed: true\r\n      }));      \r\n\r\n      this.samplesReload = false\r\n    }\r\n\r\n    async getGenericDialogGridItems(dialogInfo) {\r\n\r\n      if ((dialogInfo.gridContent === undefined || dialogInfo.gridContent === false)\r\n        && (dialogInfo.filesListContent === undefined || dialogInfo.filesListContent === false)) { //dialogInfo.gridContent===true){\r\n        //this.getGenericDialogGridItems(this.actionBeingPerformedModel.dialogInfo)\r\n        return []\r\n      }\r\n      // if (dialogInfo.filesListContent!==undefined&&dialogInfo.filesListContent===true){\r\n      //     this.getGenericDialogGridItems(this.actionBeingPerformedModel.dialogInfo)\r\n      //     return\r\n      // }\r\n\r\n\r\n      if (dialogInfo.masterDataEntryName === undefined && dialogInfo.dialogQuery === undefined && dialogInfo.gridContent === undefined && dialogInfo.filesListContent === undefined) {\r\n        alert('By now, the getGenericDialogGridItems only works for master data entries or dialogQuery or gridContent or filesListContent')\r\n        return []\r\n      }\r\n      let data = []\r\n      if (dialogInfo.masterDataEntryName !== undefined) {\r\n        this.getProcMasterData()\r\n        if (this.masterData === undefined) { return [] }\r\n        if (this.masterData[dialogInfo.masterDataEntryName] === undefined) {\r\n          alert('the procedure instance ' + this.procInstanceName + ' has no one master data entry called ' + dialogInfo.masterDataEntryName)\r\n          return []\r\n        }\r\n        this.genericDialogGridItems = []\r\n        this.genericDialogGridItems = this.masterData[dialogInfo.masterDataEntryName]\r\n        //console.log('new code')\r\n        return this.genericDialogGridItems\r\n      }\r\n      if (dialogInfo.dialogQuery !== undefined) {\r\n        await this.GetQueryForDialogGrid(dialogInfo)\r\n        return this.genericDialogGridItems\r\n\r\n      }\r\n      let entry = { \"analysis\": \"hola\", \"method_name\": \"method\", \"method_version\": 1 }\r\n      data.push(entry)\r\n      console.log('genericDialogGridItems', data)\r\n      return data\r\n    }\r\n\r\n\r\n    disabledByCertification(action) {\r\n      return false;\r\n    }\r\n  }\r\n}"],"names":[],"sourceRoot":""}