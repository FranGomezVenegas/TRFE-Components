{"version":3,"file":"527.7b80e83e.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqGA;;AAoEA;AACA;;;;AAIA;AACA;AAGA;;;AAIA;AACA;;AAKA;AAMA;;AAEA;;;;;;;;;AASA;;;AAGA;AACA;AACA;;;;AAKA;;AAMA;AACA;;;;AAIA;AACA;AAGA;;;AAIA;AACA;;AAKA;AAMA;;AAEA;;;;;;;;;AASA;;;AAGA;AACA;AACA;;;;AAKA;AAqBA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AALA;AAsBA;AACA;AACA;AAGA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxUA;;;;;;;ACKA;AACA;AACA;;AAVA;;;;;;;;;;;;ACqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;;ACGA;;;;;AAKA;;AAEA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC+FA;AACA;;AAEA;AACA;;;;AAIA;;AAEA;AACA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AAoDA;AAKA;;AAIA;AAEA;AACA;AACA;AAIA;;AAEA;AACA;AACA;;AAEA;;AAIA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxEA;;;AAiCA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AAIA","sources":["webpack://@trazit/tr-procedures/./.yalc/@trazit/cred-dialog/src/CredDialog.js","webpack://@trazit/tr-procedures/./src/components/cameraview/index.js","webpack://@trazit/tr-procedures/./src/components/cameraview/cameraview.template.js","webpack://@trazit/tr-procedures/./src/components/dropzone/uploadNotification.js","webpack://@trazit/tr-procedures/./src/components/dropzone/index.js","webpack://@trazit/tr-procedures/./src/components/dropzone/dropzone.template.js","webpack://@trazit/tr-procedures/./src/components/GenericDialogs/TrazitTakePictureDialog.js","webpack://@trazit/tr-procedures/./src/components/templates-.js","webpack://@trazit/tr-procedures/./src/gridmodel-bottomcomp-chart.js"],"sourcesContent":["import { html, css, nothing } from 'lit';\r\nimport { CommonCore, commonLangConfig } from '@trazit/common-core';\r\nimport { Layouts } from '@collaborne/lit-flexbox-literals';\r\nimport '@material/mwc-textfield';\r\nimport '@vaadin/vaadin-combo-box/vaadin-combo-box';\r\nimport '@spectrum-web-components/button/sp-button';\r\nimport '@trazit/tr-dialog/tr-dialog';\r\n\r\n\r\nconst langConfig = {\r\n  \"pwdWindowTitle\": {\r\n    \"label_en\": \"Please confirm your credentials (user & password)\",\r\n    \"label_es\": \"Por favor confirma tu identidad (usuario y contraseña)\"\r\n  },\r\n  \"esignWindowTitle\": {\r\n    \"label_en\": \"Please enter your eSign\",\r\n    \"label_es\": \"Por favor entra tu frase de Firma Electrónica\"\r\n  },\r\n  \"justificationWindowTitle\": {\r\n    \"label_en\": \"Please enter the justification phrase\",\r\n    \"label_es\": \"Por favor entra tu frase de justificación\"\r\n  },\r\n  \"action\": {\r\n    \"label_en\": \"Action name\", \r\n    \"label_es\": \"Nombre de la acción\"\r\n  },\r\n  \"userToCheck\": {\r\n    \"label_en\": \"User\", \r\n    \"label_es\": \"Usuario\"\r\n  },\r\n  \"pwToCheck\": {\r\n    \"label_en\": \"Password\", \r\n    \"label_es\": \"Contraseña\"\r\n  },\r\n  \"esgToCheck\": {\r\n    \"label_en\": \"Esign\", \r\n    \"label_es\": \"Esign\"\r\n  },\r\n  \"jstToCheck\": {\r\n    \"label_en\": \"Justification Phrase\", \r\n    \"label_es\": \"Frase de Justificación\"\r\n  },\r\n  \"notCorrectMessage\": {\r\n    \"now\": {\r\n      \"message_en\": \"Validation not completed, action aborted\",\r\n      \"message_es\": \"Validación no completada, acción abortada\"\r\n    },\r\n    \"dialog_cancelled\": {\r\n      \"message_en\": \"dialog canceled, action aborted\",\r\n      \"message_es\": \"Diálogo cancelado, acción abortada\"\r\n    },\r\n    \"attempts_consumed\": {\r\n      \"message_en\": \"All attempts consumed, action aborted\",\r\n      \"message_es\": \"Todos los intentos consumidos, acción abortada\"\r\n    }\r\n  }\r\n}\r\n\r\nexport class CredDialog extends CommonCore {\r\n  static get styles() {\r\n    return [\r\n      Layouts, \r\n      css`\r\n      :host {\r\n        display: block;\r\n      }\r\n      :host([hidden]) {\r\n        display: none;\r\n      }\r\n      tr-dialog {\r\n        --mdc-dialog-heading-ink-color: blue;\r\n        --mdc-typography-headline6-font-size: 35px;\r\n        --mdc-dialog-z-index:9999999;\r\n      }\r\n      .content {\r\n        opacity: 0.9;\r\n        --mdc-dialog-z-index:9999999;\r\n      }\r\n      .content * {\r\n        margin: 5px 0;\r\n      }\r\n      p.attemptsphraseblue {\r\n        color: #464dbb;\r\n      }\r\n      p.attemptsphrasered {\r\n        color: #f3371680;\r\n        animation-duration: 2s;\r\n        animation-name: slidein;\r\n      }\r\n      @keyframes slidein {\r\n        from {\r\n          margin-left: 30%;\r\n        }\r\n        to {\r\n          margin-left: 0%;\r\n        }\r\n      }           \r\n      @media (max-width: 460px) {\r\n      }\r\n      `\r\n    ];\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      type: { type: String }, // user, esign, justification (default user)\r\n      header: { type: String },\r\n      // for changing purpose we will adjust the placeholder of text label\r\n      // for example in user-profile\r\n      changing: { type: Boolean },\r\n      attempt: { type: Number },\r\n      maxFails: { type: Number },\r\n      actionName: { type: String },\r\n      actionObj: { type: Object },\r\n      objectId: { type: String },\r\n      justificationType: { type: String },\r\n      nonProc: { type: Boolean },\r\n      escapeKey: { type: Boolean },\r\n      reqParams: { type: Object }\r\n    };\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.escapeKey = true;\r\n    this.reqParams = {};\r\n    this.reset();\r\n  }\r\n\r\n  reset() {\r\n    this.type = \"\";\r\n    this.changing = false;\r\n    this.attempt = 0;\r\n    this.maxFails = 3;\r\n    this.justificationType = \"\";\r\n    this.nonProc = false;\r\n    this.actionObj = {};\r\n  }\r\n\r\n  firstUpdated() {\r\n    super.firstUpdated()\r\n    this.updateComplete.then(() => {\r\n      // manually backgrounding the dialog box\r\n      // password dialog\r\n      this.dialogSurface.style.backgroundImage = \"url(/images/abstract.jpg)\";\r\n      this.dialogSurface.style.backgroundSize = \"cover\";\r\n      this.dialogSurface.style.backgroundRepeat = \"no-repeat\";\r\n      this.dialogSurface.style.textAlign = \"center\";\r\n      this.credDialog.shadowRoot.querySelector(\"h2#title\").style.fontSize = \"20px\";\r\n      this.credDialog.shadowRoot.querySelector(\"#content\").style.paddingBottom = \"0\";\r\n    })\r\n  }\r\n\r\n  headerLabel() {\r\n    if (this.type == \"user\") {\r\n      return `${langConfig.pwdWindowTitle[\"label_\"+this.lang]}`\r\n    } else if (this.type == \"esign\") {\r\n      return `${langConfig.esignWindowTitle[\"label_\"+this.lang]}`\r\n    } else {\r\n      return `${langConfig.justificationWindowTitle[\"label_\"+this.lang]}`\r\n    }\r\n  }\r\n\r\n\r\n  creadDialogs() {\r\n    //alert('credDialog-popup')\r\n    //console.log('credDialog>>render')\r\n    return html`\r\n      <tr-dialog id=\"credDialog\" \r\n        @closed=${this.closed}\r\n        .heading=\"${this.headerLabel()}\"\r\n        hideActions=\"\"\r\n        hideXtoClose=\"\"\r\n        scrimClickAction=\"\"\r\n        .escapeKeyAction=\"${this.escapeKey?'close':''}\">\r\n        ${this.changing||this.nonProc ?\r\n          nothing :\r\n          html`<div style=\"position:absolute;left:15px;top:8px;font-size:12px;\">\r\n            ${this.actionObj.button ? this.actionObj.button.title[\"label_\"+ this.lang] : this.actionName} (id: ${this.objectId})\r\n          </div>`\r\n        }\r\n        <div class=\"content layout vertical flex center-justified\">\r\n          ${this.inputField()}\r\n          ${this.changing||this.nonProc ?\r\n            null :\r\n            html`${this.auditField()}`\r\n          }\r\n          <div style=\"margin-top:30px\">\r\n            ${this.nonProc ?\r\n              // closing dialog for non procedures i.e relogin on lock inactivity\r\n              html`<sp-button size=\"xl\" variant=\"secondary\" @click=${this.failedAttempt}>${commonLangConfig.cancelDialogButton[\"label_\"+this.lang]}</sp-button>` :\r\n              // for procedures\r\n              html`<sp-button size=\"xl\" variant=\"secondary\" dialogAction=\"close\">${commonLangConfig.cancelDialogButton[\"label_\"+this.lang]}</sp-button>`\r\n            }\r\n            <sp-button size=\"xl\" @click=${this.checking}>${commonLangConfig.confirmDialogButton[\"label_\"+this.lang]}</sp-button>\r\n          </div>\r\n          ${this.setAttempts()}\r\n        </div>\r\n      </tr-dialog>\r\n      <tr-dialog id=\"confirmDialog\" \r\n        heading=\"\"\r\n        hideActions=\"\"\r\n        hideXtoClose=\"\"\r\n        scrimClickAction=\"\">\r\n        <div class=\"layout vertical flex center-justified\">\r\n          <div>${commonLangConfig.confirmActionPhrase[\"label_\" + this.lang]} ${this.actionObj.button ? this.actionObj.button.title[\"label_\"+ this.lang] : this.actionName}?</div>\r\n          <div style=\"margin-top:30px;text-align:center\">\r\n            <sp-button size=\"xl\" variant=\"secondary\" slot=\"secondaryAction\" dialogAction=\"decline\">\r\n              ${commonLangConfig.cancelDialogButton[\"label_\" + this.lang]}</sp-button>\r\n            <sp-button size=\"xl\" slot=\"primaryAction\" dialogAction=\"accept\" @click=${this.nextRequest}>\r\n              ${commonLangConfig.confirmDialogButton[\"label_\" + this.lang]}</sp-button>\r\n          </div>\r\n        </div>\r\n      </tr-dialog>\r\n    `;\r\n  }  \r\n\r\n  render() {\r\n    //console.log('credDialog>>render')\r\n    return html`\r\n      <tr-dialog id=\"credDialog\" \r\n        @closed=${this.closed}\r\n        .heading=\"${this.headerLabel()}\"\r\n        hideActions=\"\"\r\n        hideXtoClose=\"\"\r\n        scrimClickAction=\"\"\r\n        .escapeKeyAction=\"${this.escapeKey?'close':''}\">\r\n        ${this.changing||this.nonProc ?\r\n          nothing :\r\n          html`<div style=\"position:absolute;left:15px;top:8px;font-size:12px;\">\r\n            ${this.actionObj.button ? this.actionObj.button.title[\"label_\"+ this.lang] : this.actionName} (id: ${this.objectId})\r\n          </div>`\r\n        }\r\n        <div class=\"content layout vertical flex center-justified\">\r\n          ${this.inputField()}\r\n          ${this.changing||this.nonProc ?\r\n            null :\r\n            html`${this.auditField()}`\r\n          }\r\n          <div style=\"margin-top:30px\">\r\n            ${this.nonProc ?\r\n              // closing dialog for non procedures i.e relogin on lock inactivity\r\n              html`<sp-button size=\"xl\" variant=\"secondary\" @click=${this.failedAttempt}>${commonLangConfig.cancelDialogButton[\"label_\"+this.lang]}</sp-button>` :\r\n              // for procedures\r\n              html`<sp-button size=\"xl\" variant=\"secondary\" dialogAction=\"close\">${commonLangConfig.cancelDialogButton[\"label_\"+this.lang]}</sp-button>`\r\n            }\r\n            <sp-button size=\"xl\" @click=${this.checking}>${commonLangConfig.confirmDialogButton[\"label_\"+this.lang]}</sp-button>\r\n          </div>\r\n          ${this.setAttempts()}\r\n        </div>\r\n      </tr-dialog>\r\n      <tr-dialog id=\"confirmDialog\" \r\n        heading=\"\"\r\n        hideActions=\"\"\r\n        hideXtoClose=\"\"\r\n        scrimClickAction=\"\">\r\n        <div class=\"layout vertical flex center-justified\">\r\n          <div>${commonLangConfig.confirmActionPhrase[\"label_\" + this.lang]} ${this.actionObj.button ? this.actionObj.button.title[\"label_\"+ this.lang] : this.actionName}?</div>\r\n          <div style=\"margin-top:30px;text-align:center\">\r\n            <sp-button size=\"xl\" variant=\"secondary\" slot=\"secondaryAction\" dialogAction=\"decline\">\r\n              ${commonLangConfig.cancelDialogButton[\"label_\" + this.lang]}</sp-button>\r\n            <sp-button size=\"xl\" slot=\"primaryAction\" dialogAction=\"accept\" @click=${this.nextRequest}>\r\n              ${commonLangConfig.confirmDialogButton[\"label_\" + this.lang]}</sp-button>\r\n          </div>\r\n        </div>\r\n      </tr-dialog>\r\n    `;\r\n  }\r\n\r\n  get confirmDialog() {\r\n    return this.shadowRoot.querySelector(\"tr-dialog#confirmDialog\")\r\n  }\r\n\r\n  closed() {\r\n    this.reset()\r\n    if (this.pwd) this.pwd.value = \"\"\r\n    if (this.esg) this.esg.value = \"\"\r\n    if (this.jst) this.jst.value = \"\"\r\n  }\r\n\r\n  /**\r\n   * Composition template for the input fields\r\n   * filter out by creds type\r\n   */\r\n  inputField() {\r\n    if (this.type == \"user\") {\r\n      // adjust the placeholder label for changing purpose\r\n      return html`\r\n        <mwc-textfield id=\"userTxtFld\" label=\"${langConfig.userToCheck[\"label_\"+this.lang]}\" type=\"text\" dialogInitialFocus .value=${this.userName}></mwc-textfield>\r\n        <mwc-textfield id=\"pwd\" label=\"${this.adjustLbl(`${langConfig.pwToCheck[\"label_\"+this.lang]}`)}\" type=\"password\" iconTrailing=\"visibility\"           \r\n          @click=${this.showPwd}\r\n          @keypress=${e=>this.keyPress(e, 'checkingUser')}></mwc-textfield>\r\n      `\r\n    } else if (this.type == \"esign\") {\r\n      // adjust the placeholder label for changing purpose\r\n      return html`\r\n        <mwc-textfield id=\"esg\" label=\"${this.adjustLbl(`${langConfig.esgToCheck[\"label_\"+this.lang]}`)}\" type=\"password\" iconTrailing=\"visibility\"           \r\n          @click=${this.showPwd}\r\n          @keypress=${e=>this.keyPress(e, 'checkingPhrase')}></mwc-textfield>\r\n      `\r\n    }\r\n  }\r\n\r\n  /**\r\n   * TEXT: free text auditPhrase\r\n   * LIST: list of auditPhrase\r\n   * TEXTLIST: combination of TEXT & LIST\r\n   */\r\n  auditField() {\r\n    if (this.justificationType===null||this.justificationType===undefined||this.justificationType.length==0){\r\n      this.justificationType=\"TEXT\"\r\n    }\r\n    // adjust the placeholder label for changing purpose\r\n    if (this.justificationType == \"TEXT\" || this.justificationType == \"LABPLANET_FALSE\") {\r\n      return html`\r\n        <mwc-textfield id=\"jst\" label=\"${this.adjustLbl(`${langConfig.jstToCheck[\"label_\"+this.lang]}`)}\" type=\"text\" \r\n          ?dialogInitialFocus=${this.justificationType?true:false} \r\n          @keypress=${this.keyPress}></mwc-textfield>\r\n      `\r\n    } else {\r\n      return html`\r\n        <vaadin-combo-box id=\"jst\"\r\n          item-label-path=\"name\"\r\n          item-value-path=\"id\"\r\n          .placeholder=\"${langConfig.jstToCheck[\"label_\"+this.lang]}\"\r\n          .label=\"${langConfig.jstToCheck[\"label_\"+this.lang]}\"\r\n          .value=${this.justificationType==\"LIST\"?this.justificationList[0]:null}\r\n          ?dialogInitialFocus=${this.justificationType?true:false}\r\n          @keypress=${this.keyPress}\r\n          @change=${this.keyPress}\r\n          .items=\"${this.justificationList}\"></vaadin-combo-box>\r\n      `\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adjusting the placeholder label based the actived language\r\n   * @param {*} label \r\n   */\r\n  adjustLbl(label) {\r\n    if (this.changing) {\r\n      if (this.lang == \"en\") {\r\n        return \"Current \"+label\r\n      } else {\r\n        return label+\" Actual\"\r\n      }\r\n    } else {\r\n      return label\r\n    }\r\n  }\r\n\r\n  get credDialog() {\r\n    return this.shadowRoot.querySelector(\"tr-dialog#credDialog\")\r\n  }\r\n\r\n  \r\n  get userTxtFld() {\r\n    return this.shadowRoot.querySelector(\"mwc-textfield#userTxtFld\")\r\n  }\r\n\r\n  get pwd() {\r\n    return this.shadowRoot.querySelector(\"mwc-textfield#pwd\")\r\n  }\r\n\r\n  get esg() {\r\n    return this.shadowRoot.querySelector(\"mwc-textfield#esg\")\r\n  }\r\n\r\n  get jst() {\r\n    return this.shadowRoot.querySelector(\"#jst\")\r\n  }\r\n\r\n  get dialogSurface() {\r\n    return this.credDialog.shadowRoot.querySelector(\".mdc-dialog__surface\")\r\n  }\r\n\r\n  keyPress(e, method) {\r\n    if (e.keyCode==13) {\r\n      if (method) { // keypress password / esign field\r\n        // if found justification field, focus to audit field\r\n        if (this.justificationType) {\r\n          this.jst.focus()\r\n        } else {\r\n          this.checking()\r\n        }\r\n      } else { // keypress justification field\r\n        this.checking()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * which creds request should be requested\r\n   */\r\n  checking() {\r\n    if (this.type == \"user\") {\r\n      this.checkingUser()\r\n    } else if (this.type == \"esign\") {\r\n      this.checkingPhrase()\r\n    } else if (this.type == \"justification\") {\r\n      this.nextRequest()\r\n    }\r\n  }\r\n\r\n  checkAttempt() {\r\n    if (this.attempt > 1) {\r\n      this.failedAttempt()\r\n    } else {\r\n      this.attempt++\r\n    }\r\n  }\r\n\r\n  failedAttempt() {\r\n    this.credDialog.close()\r\n  }\r\n\r\n  checkingUser() {\r\n    let params = this.config.backendUrl + this.config.appAuthenticateApiUrl + '?' + new URLSearchParams({\r\n      actionName: \"TOKEN_VALIDATE_USER_CREDENTIALS\",\r\n      finalToken: JSON.parse(sessionStorage.getItem(\"userSession\")).finalToken,\r\n      userToCheck: this.userTxtFld.value,\r\n      passwordToCheck: this.pwd.value\r\n    })\r\n    params = params.replace(/\\|/g, \"%7C\");\r\n    this.fetchApi(params).then(j => {\r\n      if (j.is_error) {\r\n        this.checkAttempt()\r\n      } else {\r\n        this.nextRequest()\r\n      }\r\n    })\r\n  }\r\n\r\n  checkingPhrase() {\r\n    let params = this.config.backendUrl + this.config.appAuthenticateApiUrl + '?' + new URLSearchParams({\r\n      actionName: \"TOKEN_VALIDATE_ESIGN_PHRASE\",\r\n      finalToken: JSON.parse(sessionStorage.getItem(\"userSession\")).finalToken,\r\n      esignPhraseToCheck: this.esg.value\r\n    })\r\n    params = params.replace(/\\|/g, \"%7C\");\r\n    this.fetchApi(params).then(j => {\r\n      if (j.is_error) {\r\n        this.checkAttempt()\r\n      } else {\r\n        this.nextRequest()\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  setAttempts() {\r\n    if (this.type == \"justification\") {\r\n      return\r\n    }\r\n    let txt = this.lang == \"en\" ? \r\n      `*** Attempts: ${this.attempt} of 3` : \r\n      `*** Intentos: ${this.attempt} de ${this.maxFails}`\r\n    return html`<p class=${this.attempt==0?'attemptsphraseblue':'attemptsphrasered'}>${txt}</p>`\r\n  }\r\n\r\n  \r\n  xnextRequestCommons(action) {\r\n    console.log('xnextRequestCommons')\r\n    this.reqParams = {\r\n      ...this.reqParams,\r\n      procInstanceName: this.procInstanceName,      \r\n      finalToken: JSON.parse(sessionStorage.getItem(\"userSession\")).finalToken,\r\n      dbName: this.config.dbName,\r\n      actionName: action.actionName,\r\n      //sampleId: this.objectId,\r\n      userToCheck: this.userName,\r\n      passwordToCheck: this.pwd ? this.pwd.value : \"\",\r\n      esignPhraseToCheck: this.esg ? this.esg.value : \"\",\r\n      auditReasonPhrase: this.jst ? this.jst.value: \"\"\r\n    }\r\n    let params = this.config.backendUrl + action.endPoint\r\n    + '?' + new URLSearchParams(this.reqParams) \r\n    // if (extraParams!==undefined){\r\n    //   params=params + '&' + new URLSearchParams(extraParams)\r\n    // }\r\n    params = params.replace(/\\|/g, \"%7C\");\r\n    this.fetchApi(params).then(() => {\r\n//      this.reload()\r\n    })\r\n    let cleanParams = {}\r\n    Object.entries(this.reqParams).map(([key, value]) => {\r\n      if (value != null || value != undefined) {\r\n        cleanParams[key] = value\r\n      }\r\n    })\r\n    this.reqParams = cleanParams\r\n    if (this.credDialog) {\r\n      this.credDialog.close()\r\n    }\r\n  }\r\n  \r\n}\r\n","import { LitElement } from 'lit-element';\r\nimport { styles } from './cameraview.css';\r\nimport { template } from './cameraview.template';\r\nimport { ApiFunctions } from '../Api/ApiFunctions';\r\n\r\nexport class CameraView extends ApiFunctions(LitElement) {\r\n  static get styles() {\r\n    return styles;\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      video: { state: true },\r\n      viewport: { state: true },\r\n      record: { state: true },\r\n      capture: { state: true },\r\n      imageDataUrl: { type: String },\r\n      lang: { type: String },\r\n      config: { type: Object },\r\n      action: { type: Object },\r\n      selectedItem: { type: Object },\r\n      procInstanceName: String,\r\n\r\n    };\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.config={}\r\n    this.action={}\r\n    this.selectedItem={}    \r\n  }\r\n\r\n  firstUpdated() {\r\n    this.video = this.shadowRoot.querySelector(\"#video\");\r\n    this.viewport = this.shadowRoot.querySelector(\"#viewport\");\r\n    this.startBtn = this.shadowRoot.querySelector(\"#start\");\r\n    this.captureBtn = this.shadowRoot.querySelector(\"#capture\");\r\n    this.uploadBtn = this.shadowRoot.querySelector(\"#upload\");\r\n    this._init();\r\n  }\r\n\r\n  render() {\r\n    return template({}, this.lang);\r\n  }\r\n\r\n  _init = () => {\r\n    this.startBtn.addEventListener('click', this._startCamera);\r\n    this.uploadBtn.addEventListener('click', this._upload);\r\n    this.captureBtn.addEventListener('click', this._capture);\r\n  }\r\n\r\n  _reset = () => {\r\n    this.video.srcObject = null;\r\n    this.viewport.getContext('2d').clearRect(0, 0, this.viewport.width, this.viewport.height);\r\n  }\r\n\r\n  _startCamera = async () => {\r\n    const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });\r\n    this.video.srcObject = stream;\r\n  }\r\n\r\n  _captureYanko = () => {\r\n    const width = this.viewport.width;\r\n    const height = this.viewport.height;\r\n    this.viewport.getContext('2d').drawImage(this.video, 0, 0, width, height);\r\n    this.imageDataUrl = this.viewport.toDataURL('image/jpeg');\r\n    // this.viewport.getContext('2d').clearRect(0, 0, width, height);\r\n  }\r\n  _capture = () => {\r\n    const width = this.viewport.width;\r\n    const height = this.viewport.height;\r\n    const context = this.viewport.getContext('2d');\r\n\r\n    // Draw the video frame to the canvas\r\n    context.drawImage(this.video, 0, 0, width, height);\r\n\r\n    // Get the image as a Data URL\r\n    let captureimageDataUrl = this.viewport.toDataURL('image/jpeg', 0.9); // Adjust the quality if needed\r\n\r\n    this.imageDataUrl = this.dataURLToBlob(captureimageDataUrl);\r\n    // Optional: Clear the canvas (uncomment if necessary)\r\n    // context.clearRect(0, 0, width, height);\r\n\r\n    // Log the Data URL length to check the size\r\n    console.log('Image Data URL length:', this.imageDataUrl.length);\r\n  }\r\n\r\n  dataURLToBlob = (dataURL) => {\r\n    const byteString = atob(dataURL.split(',')[1]);\r\n    const mimeString = dataURL.split(',')[0].split(':')[1].split(';')[0];\r\n    const ab = new ArrayBuffer(byteString.length);\r\n    const ia = new Uint8Array(ab);\r\n    for (let i = 0; i < byteString.length; i++) {\r\n        ia[i] = byteString.charCodeAt(i);\r\n    }\r\n    return new Blob([ab], { type: mimeString });\r\n  }\r\n\r\n  base64ToBlob(base64, mime) {\r\n    const byteCharacters = atob(base64);\r\n    const byteNumbers = new Array(byteCharacters.length);\r\n    for (let i = 0; i < byteCharacters.length; i++) {\r\n      byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n    }\r\n    const byteArray = new Uint8Array(byteNumbers);\r\n    return new Blob([byteArray], { type: mime });\r\n    \r\n  }\r\n  downloadBlob(blob, fileName) {\r\n    const link = document.createElement('a');\r\n    const url = URL.createObjectURL(blob);\r\n    link.href = url;\r\n    link.download = fileName;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n  }\r\n  _upload = async () => {\r\n    if (!this.imageDataUrl) {\r\n      if (this.lang==='es'){\r\n        alert('Por favor toma una foto antes, para subirla')\r\n      }else{\r\n        alert(\"Please Capture Image previously, to upload it\");        \r\n      }\r\n      return;\r\n    }\r\n    //const dataUrl = this.imageDataUrl;\r\n    //const base64String = dataUrl.split(',')[1];\r\n\r\n    //const mimeType = 'image/jpeg';\r\n    //const imageBlob = this.base64ToBlob(base64String, mimeType);\r\n    //this.downloadBlob(imageBlob, \"hola.jpeg\")\r\n    \r\n    let form = new FormData();\r\n    form.append('title', 'Sample');\r\n    form.append('picture', this.imageDataUrl);\r\n    let requestResult={}\r\n    try{\r\n        // URL parameters for the fetchApi call\r\n        //let params = 'http://localhost:8081/TRAZiT-API/moduleProjectRnD/ProjectRnDAPIactions?actionName=FORMULA_ADD_INGREDIENT&dbName=demo_v0_9_2&procInstanceName=RandD&finalToken=eyJ1c2VyREIiOiJhZG1pbiIsImRhdGV0aW1lRm9ybWF0QXRQbGF0Zm9ybUxldmVsIjoiRElTQUJMRUQiLCJwcm9jc01vZHVsZU5hbWUiOiJpbnNwZWN0aW9uX2xvdCpJTlNQRUNUSU9OX0xPVFN8aW5zdHJ1bWVudHMqSU5TVFJVTUVOVFN8RGVtbypJTlNUUlVNRU5UU3xEaXNlYXNlU3R1ZGllcypDTElOSUNBTF9TVFVESUVTfG1iX2VtKk1PTklUT1JJTkd8c3RvY2sqU1RPQ0tTfG1vbl93YXRlcipNT05JVE9SSU5HfFJhbmREKlJhbmREIFBST0pFQ1RTIiwiZGJOYW1lIjoiZGVtb192MF85XzIiLCJ0eXAiOiJKV1QiLCJ1c2VyX3Byb2NlZHVyZV9oYXNoY29kZXMiOiJpbnNwZWN0aW9uX2xvdCoxKi03MDQyMTQ1NTZ8aW5zdHJ1bWVudHMqMSotOTQ0MTQ0NTQ3fERlbW8qMSoxNzcyNjIzMTI4fERpc2Vhc2VTdHVkaWVzKjEqMTk3NDc3MTczMXxtYl9lbSoxKjIzNDI0MjU0NXxzdG9jayoxKjEzNjEyMjU2OTF8bW9uX3dhdGVyKjEqMjA1MzgwNjg2NXxSYW5kRCoxKjEyMzg0NTgzNjUiLCJlU2lnbiI6ImZpcm1hZGVtbyIsInVzZXJEQlBhc3N3b3JkIjoidHJheml0IiwidXNlck1haWwiOiJORVd0cmF6aXQuaW5mb0BnbWFpbC5jb20iLCJ1c2VyX3Byb2NlZHVyZXMiOiJbaW5zcGVjdGlvbl9sb3QsIGluc3RydW1lbnRzLCBEZW1vLCBEaXNlYXNlU3R1ZGllcywgbWJfZW0sIHN0b2NrLCBtb25fd2F0ZXIsIFJhbmREXSIsImFwcFNlc3Npb25JZCI6IjYzODgiLCJhcHBTZXNzaW9uU3RhcnRlZERhdGUiOiJUdWUgTWF5IDIxIDE0OjM0OjE1IFVUQyAyMDI0IiwidXNlclJvbGUiOiJzdXBlcnVzZXIiLCJhbGciOiJIUzI1NiIsImludGVybmFsVXNlcklEIjoiNDU0ODkyMjMifQ.eyJpc3MiOiJMYWJQTEFORVRkZXN0cmFuZ2lzSW5UaGVOaWdodCJ9.PNpQDZobs2EcR4L1pRUXE0lLDBNIZH2CDxexKTfidjk&formulaName=formula+nueva+1&ingredient=Almid%C3%B3n+de+ma%C3%ADz&quantity=100&quantityUom=mg&&isForTesting=false';\r\n\r\n        let APIParams = this.getAPICommonParams(this.action)\r\n        let endPointUrl = this.getActionAPIUrl(this.action)\r\n        let serviceAPIurl=this.getServiceAPIUrl(this.action)\r\n        if (String(endPointUrl).toUpperCase().includes(\"ERROR\")) {\r\n          alert(endPointUrl)\r\n          return\r\n        }\r\n/*\r\n        if (this.config !== undefined && serviceAPIurl !== undefined) {\r\n          params = serviceAPIurl + endPointUrl\r\n        } else {\r\n          let userSession = JSON.parse(sessionStorage.getItem(\"userSession\"))\r\n          params = serviceAPIurl + endPointUrl\r\n        }\r\n*/\r\n        /*let targetValue = {\r\n          rawValueResult: '',\r\n          resultId: this.selectedItem.result_id,\r\n          eventId: this.selectedItem.event_id,\r\n          instrumentName: this.selectedItem.instrument,\r\n          variableName: this.selectedItem.param_name\r\n        } */       \r\n        let actionParams = this.jsonParam(this.action, this.selectedItem, undefined, this.selectedItem, undefined, undefined, undefined)\r\n        // params = params + '?' + new URLSearchParams(APIParams) + '&' + new URLSearchParams(actionParams)\r\n        //   //+ '&' + new URLSearchParams(credDialogArgs)        \r\n        // console.log('_upload', 'action', this.action.actionName, params)\r\n\r\n        Object.keys(actionParams).forEach(key => {\r\n          form.append(key, actionParams[key]);\r\n        });\r\n        Object.keys(APIParams).forEach(key => {\r\n          form.append(key, APIParams[key]);\r\n        });\r\n        let params=serviceAPIurl + endPointUrl\r\n        //params=params.replace('https://platform.trazit.net:8443/', 'http://localhost:8081/')\r\n        // Call fetchApi with the FormData\r\n        //let response = await fetch(serviceAPIurl + endPointUrl, { //params\r\n      // Emitir evento para ocultar el progreso circular\r\n        this.dispatchEvent(new CustomEvent('show-progress', {\r\n          bubbles: true,\r\n          composed: true\r\n        }));      \r\n\r\n        let response = await fetch(params, {\r\n            method: 'POST',\r\n            body: form,\r\n            credentials: 'same-origin'\r\n        })\r\n        .then(response => response.json())\r\n        .catch(error => console.error(error))\r\n        if (response.status === 200) {\r\n            // const blob = await response.blob();\r\n            // const url = window.URL.createObjectURL(blob);\r\n            // const a = document.createElement('a');\r\n            // a.href = url;\r\n            // a.download = 'processed_report.txt'; // Adjust the filename as needed\r\n            // document.body.appendChild(a); // Append to the document to make it clickable\r\n            // a.click(); // Trigger the download\r\n            // a.remove(); // Remove the element after the download\r\n        } else {\r\n            // const errorText = await response.text();\r\n            // throw new Error(errorText);\r\n        }\r\n    } catch (e) {\r\n        requestResult = { error: 1, message: e.message };\r\n    }\r\n      // Emitir evento para ocultar el progreso circular\r\n      this.dispatchEvent(new CustomEvent('hide-progress', {\r\n        bubbles: true,\r\n        composed: true\r\n      }));      \r\n\r\n    console.log(requestResult);\r\n    return requestResult;\r\n\r\n\r\n\r\n    return\r\n    try {\r\n      const result = await fetch('/api/upload', {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          image: this.imageDataUrl\r\n        })\r\n      });\r\n\r\n      console.log(result);\r\n    } catch (e) {\r\n      console.log(\"error\");\r\n    }\r\n  }\r\n}\r\n\r\nwindow.customElements.define('camera-view', CameraView);\r\n","import { html } from \"lit-element\";\r\n\r\nexport const template = (props, lang) => {\r\n  return html`\r\n    <div class=\"container\">\r\n      <video id=\"video\" width=\"240\" height=\"180\" autoplay></video>\r\n      <canvas id=\"viewport\" width=\"240\" height=\"180\"></canvas>\r\n    </div>\r\n\r\n    <div class=\"button-container\">\r\n      <button id=\"start\" class=\"button\">${lang===undefined||lang===\"en\"?\"Start Camera\":\"Iniciar Cámara\"}</button>\r\n      <button id=\"capture\" class=\"button\">${lang===undefined||lang===\"en\"?\"Capture\":\"Capturar\"}</button>\r\n      <button id=\"upload\" class=\"button\">${lang===undefined||lang===\"en\"?\"Upload\":\"Subir\"}</button>      \r\n    </div>\r\n  `\r\n}","import { LitElement, html, css } from 'lit';\r\n\r\nclass UploadNotification extends LitElement {\r\n    static properties = {\r\n        message: { type: String },\r\n        visible: { type: Boolean },\r\n        type: { type: String }\r\n    };\r\n\r\n    static styles = css`\r\n        #notification {\r\n            display: none;\r\n            position: fixed;\r\n            bottom: 20px;\r\n            right: 20px;\r\n            color: white;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n            transition: opacity 0.3s ease-in-out;\r\n        }\r\n    `;\r\n\r\n    constructor() {\r\n        super();\r\n        this.message = '';\r\n        this.visible = false;\r\n        this.type = 'success';\r\n    }\r\n\r\n    show(message, type = 'success') {\r\n        this.message = message;\r\n        this.type = type;\r\n        this.visible = true;\r\n        this.requestUpdate();\r\n\r\n        const notification = this.shadowRoot.querySelector('#notification');\r\n        notification.style.display = 'block';\r\n        notification.style.opacity = '1';\r\n        notification.style.backgroundColor = type === 'success' ? '#4caf50' : '#f44336';\r\n\r\n        setTimeout(() => {\r\n            notification.style.opacity = '0';\r\n            setTimeout(() => {\r\n                this.visible = false;\r\n                notification.style.display = 'none';\r\n            }, 300); // Match the CSS transition duration\r\n        }, 3000);\r\n    }\r\n\r\n    render() {\r\n        return html`<div id=\"notification\">${this.message}</div>`;\r\n    }\r\n}\r\n\r\ncustomElements.define('upload-notification', UploadNotification);\r\n","import { LitElement } from 'lit-element';\r\nimport { template } from './dropzone.template';\r\nimport { styles } from './dropzone.css';\r\nimport { ApiFunctions } from '../Api/ApiFunctions';\r\n\r\nexport class Dropzone extends ApiFunctions(LitElement) {\r\n  static get styles() {\r\n    return styles;\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      container: { state: true },\r\n      fileSelector: { state: true },\r\n      errorContent: { state: true },\r\n      previewContent: { state: true },\r\n      files: { state: true },\r\n      lang: { type: String },\r\n      config: { type: Object },\r\n      action: { type: Object },\r\n      selectedItem: { type: Object },\r\n      procInstanceName: String,\r\n      fileName: { type: String },\r\n      close: { type: Function },\r\n    };\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.files = [];\r\n    this.close = () => {};\r\n  } \r\n\r\n  firstUpdated() {\r\n    this.container = this.shadowRoot.querySelector('.container');\r\n    this.fileSelector = this.shadowRoot.querySelector('#file-selector');\r\n    this.errorContent = this.shadowRoot.querySelector('#error');\r\n    this.previewContent = this.shadowRoot.querySelector('#preview');\r\n    this._init();\r\n    \r\n    this.addEventListener('upload-success', async (event) => {\r\n      const upload = this.shadowRoot.querySelector('upload-notification')\r\n      await upload.show(event.detail.message);        \r\n    });\r\n  }\r\n\r\n  render() {\r\n    return template({\r\n      handleUpload: this._upload,\r\n      getFile: this.getFile,\r\n      thisComponent: this,\r\n      fileName: this.fileName\r\n    });\r\n  }\r\n\r\n  getFile = (event) => {\r\n    this.previewContent.innerHTML = \"\";\r\n    Array.from(event.target.files).forEach((file) => {\r\n      this._handleFile(file, file.name, file.type);\r\n    });\r\n    this.files = event.target.files;\r\n    this.fileName = this.files[0].fileName\r\n  };\r\n\r\n  _handleFile = (file, name, type) => {\r\n    this.errorContent.innerText = \"\";\r\n\r\n    let reader = new FileReader();\r\n\r\n    reader.onloadend = async () => {\r\n      let fileContainer = document.createElement(\"figure\");\r\n      fileContainer.classList.add(\"file-preview\");\r\n\r\n      let caption = document.createElement(\"figcaption\");\r\n      caption.innerText = name;\r\n      fileContainer.appendChild(caption);\r\n\r\n      if (type.startsWith(\"image/\")) {\r\n        let img = document.createElement(\"img\");\r\n        img.src = reader.result;\r\n        img.style.maxWidth = \"100%\";\r\n        img.style.borderRadius = \"8px\";\r\n        fileContainer.appendChild(img);\r\n      } else if (type === \"application/pdf\") {\r\n        let canvas = document.createElement(\"canvas\");\r\n        canvas.style.maxWidth = \"100%\";\r\n        fileContainer.appendChild(canvas);\r\n\r\n        const pdf = await pdfjsLib.getDocument({ data: reader.result }).promise;\r\n        const page = await pdf.getPage(1);\r\n        const viewport = page.getViewport({ scale: 1 });\r\n        const context = canvas.getContext('2d');\r\n        canvas.height = viewport.height;\r\n        canvas.width = viewport.width;\r\n        const renderContext = {\r\n          canvasContext: context,\r\n          viewport: viewport\r\n        };\r\n        page.render(renderContext);\r\n      }\r\n      this.previewContent.innerHTML = ''\r\n      this.previewContent.appendChild(fileContainer);\r\n    };\r\n\r\n    if (type === \"application/pdf\") {\r\n      reader.readAsArrayBuffer(file);\r\n    } else if (type.startsWith(\"image/\")) {\r\n      reader.readAsDataURL(file);\r\n    } else {\r\n      let fileContainer = document.createElement(\"figure\");\r\n      fileContainer.classList.add(\"file-preview\");\r\n\r\n      let caption = document.createElement(\"figcaption\");\r\n      caption.innerText = name;\r\n      fileContainer.appendChild(caption);\r\n      this.previewContent.innerHTML = ''\r\n      this.previewContent.appendChild(fileContainer);\r\n    }\r\n  };\r\n\r\n\r\n  _init = () => {\r\n    this.fileSelector.addEventListener(\"change\", this.getFile);\r\n\r\n    this.container.addEventListener(\"dragenter\", (event) => {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      this.container.classList.add(\"active\");\r\n    }, false);\r\n\r\n    this.container.addEventListener(\"dragleave\", (event) => {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      this.container.classList.remove(\"active\");\r\n    }, false);\r\n\r\n    this.container.addEventListener(\"dragover\", (event) => {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      this.container.classList.add(\"active\");\r\n    }, false);\r\n\r\n    this.container.addEventListener(\"drop\", (event) => {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      this.container.classList.remove(\"active\");\r\n      let draggedData = event.dataTransfer;\r\n      let files = draggedData.files;\r\n      this.previewContent.innerHTML = \"\";\r\n      Array.from(files).forEach((file) => {\r\n        this._handleFile(file, file.name, file.type);\r\n      });\r\n\r\n      this.files = [...this.files, ...files];\r\n    }, false);\r\n  };\r\n\r\n  _upload = async () => {\r\n    let form = new FormData();\r\n    Array.from(this.files).forEach(file => {\r\n      form.append('file', file);\r\n    });\r\n\r\n    let APIParams = this.getAPICommonParams(this.action);\r\n    let endPointUrl = this.getActionAPIUrl(this.action);\r\n    if (String(endPointUrl).toUpperCase().includes(\"ERROR\")) {\r\n      alert(endPointUrl);\r\n      return;\r\n    }\r\n\r\n    let actionParams = this.jsonParam(this.action, this.selectedItem, undefined, this.selectedItem, undefined, undefined, undefined);\r\n\r\n    if (actionParams!==undefined){\r\n      Object.keys(actionParams).forEach(key => {\r\n        form.append(key, actionParams[key]);\r\n      });\r\n    }\r\n    if (APIParams!==undefined){\r\n      Object.keys(APIParams).forEach(key => {\r\n        form.append(key, APIParams[key]);\r\n      });\r\n    }\r\n    let serviceAPIurl=this.getServiceAPIUrl(this.action)\r\n    let params = serviceAPIurl + endPointUrl;\r\n\r\n    try {\r\n      // Emitir evento para ocultar el progreso circular\r\n      this.dispatchEvent(new CustomEvent('show-progress', {\r\n        bubbles: true,\r\n        composed: true\r\n      }));            \r\n      const response = await fetch(params, {\r\n        method: 'POST',\r\n        body: form,\r\n        credentials: 'same-origin'\r\n      });\r\n  \r\n      if (response.ok) {\r\n        // Dispatch the success event if the response is OK\r\n        this.dispatchEvent(new CustomEvent('upload-success', {\r\n          detail: { message: 'File Uploaded successfully!' },\r\n          bubbles: true,\r\n          composed: true\r\n        }));\r\n      } else {\r\n        // Handle non-OK responses\r\n        console.error('Upload failed with status:', response.status);\r\n        setTimeout(() => {\r\n          if (typeof this.close === 'function') {\r\n            this.close();\r\n          }\r\n        }, 300);\r\n      }\r\n  \r\n      return response.json();\r\n    } catch (error) {\r\n      // Handle network errors or other fetch-related errors\r\n      console.error('Upload failed with error:', error);\r\n      setTimeout(() => {\r\n        if (typeof this.close === 'function') {\r\n          this.close();\r\n        }\r\n      }, 300);\r\n    }\r\n    // Emitir evento para ocultar el progreso circular\r\n    this.dispatchEvent(new CustomEvent('hide-progress', {\r\n      bubbles: true,\r\n      composed: true\r\n    }));      \r\n  };\r\n  \r\n}\r\n\r\nwindow.customElements.define('drop-zone', Dropzone);","import { html } from \"lit-element\";\r\nimport './uploadNotification'\r\n\r\nexport const template = (props) => {\r\n  const { name, label, handleUpload, getFile, fileName } = props;\r\n\r\n  return html`\r\n    <div class=\"container\">\r\n      <input type=\"file\" id=\"file-selector\" multiple accept=\"*/*\" @change=\"${getFile}\" />\r\n      <label for=\"file-selector\">\r\n        Choose Or Drop Document\r\n      </label>\r\n      <mwc-icon-button class=\"button\" icon=\"upload_file\" id=\"uploadfile\" \r\n        title=\"Click to upload the file\" @click=${handleUpload}></mwc-icon-button>\r\n      <div id=\"error\"></div>\r\n      ${fileName}\r\n      <div id=\"preview\">\r\n      </div>\r\n      <upload-notification></upload-notification>\r\n    </div>\r\n  `;\r\n};","import { html, nothing } from 'lit';\r\nimport {GridFunctions} from '../grid_with_buttons/GridFunctions';\r\nimport {DialogsFunctions} from './DialogsFunctions';\r\nimport { ApiFunctions } from '../Api/ApiFunctions';\r\nimport '../cameraview/index';\r\nimport '../dropzone/index';\r\nexport function TrazitTakePictureDialog(base) {\r\nreturn class extends ApiFunctions(GridFunctions(DialogsFunctions(base))) {\r\n    static get properties() {\r\n        return {\r\n            lang:{type:String},\r\n            actionModel:{type: Object},\r\n            recordData:{type: Object}\r\n        }\r\n    }\r\n    constructor() {\r\n        console.log(\"constructor\");    \r\n        super()\r\n        this.actionModel={}\r\n        this.recordData={}\r\n        this.thisComponent = this\r\n        this.showUploadDialog = true;\r\n    }\r\n    show(viewModel, actionModel, data){\r\n        console.log('show', 'actionModel', actionModel)\r\n        this.actionModel=actionModel\r\n        this.recordData=data\r\n        this.requestUpdate(); // Ensure the component updates with new properties\r\n\r\n        // Open the dialog after properties are set\r\n        const dialog = this.shadowRoot.querySelector(\"#takePictureDialog\");\r\n        if (dialog) {\r\n          dialog.open = true;\r\n        }        \r\n\r\n    }\r\n    openTakePictureDialog(actionModel = this.actionBeingPerformedModel){   \r\n        \r\n        if (actionModel.dialogInfo===undefined||actionModel.dialogInfo.name===undefined){\r\n            return false\r\n        }    \r\n        console.log('openTakePictureDialog.open?', 'name', actionModel.dialogInfo.name)     \r\n        if (actionModel.dialogInfo.name.toString().toUpperCase()!==\"TAKEPICTUREDIALOG\"\r\n                &&actionModel.dialogInfo.name.toString().toUpperCase()!==\"UPLOADFILEDIALOG\"){\r\n            return false\r\n        }    \r\n        return true \r\n    }    \r\n    resetView(actionModel = this.actionBeingPerformedModel){\r\n        if (actionModel.dialogInfo===undefined||actionModel.dialogInfo.name===undefined\r\n            ||actionModel.dialogInfo.name.toString().toUpperCase()!==\"TAKEPICTUREDIALOG\"){\r\n                if (this.cameraView!==null){\r\n                    this.cameraView._init()\r\n                }\r\n        }        \r\n    }\r\n    close(){\r\n        const uploadDialog = this.shadowRoot.querySelector('#uploadDialog')\r\n        uploadDialog.open = false;  \r\n    }\r\n    takePictureFormDialog(actionModel) {\r\n        //console.log(actionModel)\r\n        if (actionModel === undefined) {\r\n            actionModel = this.actionBeingPerformedModel\r\n        }\r\n         // @closed=${this.resetFields} this is in use but moved to be executed about to perform the fetchApi \r\n         //     otherwise it is not compatible with actions requiring credentials dialog.\r\n    return html`\r\n        <style>\r\n            mwc-textfield {\r\n                border-style : Solid;\r\n                border-color : #999999;\r\n                border-color : rgba(153, 153, 153, 1);\r\n                border-width : 1px;\r\n                border-radius : 7px;\r\n                -moz-border-radius : 7px;\r\n                -webkit-border-radius : 7px;   \r\n                font-family : Montserrat;\r\n                font-weight : bold;\r\n                font-size : 19px;\r\n                background-color :  #FFFFFF;\r\n                background-color : rgb(255, 255, 255);  \r\n                --mdc-text-field-idle-line-color:#148CFA;\r\n                --mdc-text-field-outlined-idle-border-color: #148CFA;\r\n                --mdc-text-field-label-ink-color:  #148CFA;\r\n                --mdc-text-field-focused-label-color: #148CFA;\r\n                --mdc-theme-primary: #0465FB;\r\n            }\r\n            mwc-select {        \r\n                --mdc-theme-primary : rgba(36, 192, 235, 1);\r\n                --mdc-theme-text-primary-on-background : rgba(49, 130, 189, 1);\r\n                --mdc-select-ink-color: rgb(47, 47, 47);\r\n                --mdc-select-dropdown-icon-color:rgba(36, 192, 235, 1);\r\n                --mdc-select-hover-line-color:rgba(36, 192, 235, 1);\r\n                --mdc-notched-outline-border-color: rgba(186, 235, 248, 0.4);\r\n                --mdc-select-disabled-dropdown-icon-color:rgba(36, 192, 235, 1);\r\n\r\n                font-family : Montserrat;\r\n                font-weight : bold;\r\n                font-size : 19px;\r\n            }\r\n            mwc-select.outlined {        \r\n                --mdc-theme-primary : rgba(36, 192, 235, 1);\r\n                --mdc-theme-text-primary-on-background : rgba(49, 130, 189, 1);\r\n                --mdc-select-ink-color: rgba(36, 192, 235, 1);\r\n                font-family : Montserrat;\r\n                font-weight : bold;\r\n                font-size : 19px;\r\n                background-color: 4fcad029;\r\n            }       \r\n            .title {\r\n                text-align: center;    \r\n                font-size: 22px;\r\n            }\r\n        </style>\r\n        ${actionModel.dialogInfo===undefined||actionModel.dialogInfo.name.toString().toUpperCase()!==\"TAKEPICTUREDIALOG\"?nothing:html`\r\n            <tr-dialog id=\"takePictureDialog\" @opened=${this.resetView(actionModel)} ?open=${this.openTakePictureDialog(actionModel)} \r\n                heading=\"\" hideActions=\"\" scrimClickAction=\"\">\r\n                <p class=\"title\" >${this.lang===\"en\"?html`Turn on the cam, Take one picture and upload it`:html`Activa la cámara, toma una foto y súbela`}</p>\r\n                <camera-view id=\"cameraView\" .lang=${this.lang} procInstanceName=\"${this.procInstanceName}\" .config=\"${this.config}\" .action=\"${this.actionBeingPerformedModel}\" .selectedItem=\"${this.selectedItem}\"></camera-view>\r\n            </tr-dialog>\r\n        `}\r\n          \r\n                    <tr-dialog id=\"uploadDialog\" @opened=${this.resetView(actionModel)} ?open=${this.openTakePictureDialog(actionModel)} \r\n                heading=\"\" hideActions=\"\" scrimClickAction=\"\">\r\n                <p class=\"title\">${this.lang===\"en\"?html``:html``}</p>\r\n                <drop-zone id=\"dropFileZone\" .lang=${this.lang} procInstanceName=\"${this.procInstanceName}\" .config=\"${this.config}\" .action=\"${this.actionBeingPerformedModel}\" .close=\"${()=>{this.close()}}\" .selectedItem=\"${this.selectedItem}\"></drop-zone>\r\n            </tr-dialog>    \r\n        \r\n    `\r\n    }\r\n    get cameraView() {return this.shadowRoot.querySelector(\"camera-view#cameraView\")}\r\n    get takePictureDialog() {\r\n        if (this.cameraView!==null){\r\n            this.cameraView._reset();\r\n        }\r\n        return this.shadowRoot.querySelector(\"tr-dialog#takePictureDialog\")\r\n    }\r\n}\r\n}  ","import { LitElement, html, css, nothing } from 'lit';\r\nimport { Layouts } from '@collaborne/lit-flexbox-literals';\r\nimport '@material/mwc-select';\r\nimport '@material/mwc-list/mwc-list-item';\r\nimport {GridFunctions} from '../components/grid_with_buttons/GridFunctions';\r\n\r\nexport class Templates extends GridFunctions(LitElement) {\r\n  static get styles() {\r\n    return [\r\n      Layouts,\r\n      css`\r\n      mwc-select[hidden] {\r\n        display: none;\r\n      }\r\n      div#topElement{\r\n        padding-top:5px;\r\n        display: flex;\r\n      }\r\n      mwc-icon-button {        \r\n        color : rgba(36, 192, 235, 1);\r\n        font-family : Montserrat;\r\n        font-weight : bold;\r\n        font-size : 19px;\r\n      }   \r\n      mwc-select {        \r\n        --mdc-theme-primary : rgba(36, 192, 235, 1);\r\n        --mdc-theme-text-primary-on-background : rgba(49, 130, 189, 1);\r\n        --mdc-select-ink-color: rgba(36, 192, 235, 1);\r\n        --mdc-select-dropdown-icon-color:rgba(36, 192, 235, 1);\r\n        --mdc-select-hover-line-color:rgba(36, 192, 235, 1);\r\n\r\n        --mdc-select-disabled-dropdown-icon-color:rgba(36, 192, 235, 1);\r\n\r\n        font-family : Montserrat;\r\n        font-weight : bold;\r\n        font-size : 19px;\r\n      }\r\n      mwc-select.outlined {        \r\n        --mdc-theme-primary : rgba(36, 192, 235, 1);\r\n        --mdc-theme-text-primary-on-background : rgba(49, 130, 189, 1);\r\n        --mdc-select-ink-color: rgba(36, 192, 235, 1);\r\n        font-family : Montserrat;\r\n        font-weight : bold;\r\n        font-size : 19px;\r\n      } \r\n      h1 {        \r\n        color : rgba(36, 192, 235, 1);\r\n        font-family : Montserrat;\r\n        font-weight : bold;\r\n        font-size:calc(12px + 1.5vw);\r\n        text-align: center;\r\n        padding-left: 5px;\r\n      }                         \r\n      `\r\n    ];\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      templateName: { type: String },\r\n      buttons: { type: Array },\r\n      lang: { type: String },\r\n      programsList: { type: Array },\r\n      selectedProgram: { type: Array },\r\n      viewModelFromProcModel: {type: Object},\r\n      viewName: { type: String },\r\n      filterName: { type: String },\r\n      procInstanceName: { type: String },\r\n      \r\n\r\n    };\r\n  }\r\n\r\n  constructor() {\r\n    super()\r\n    this.programsList = []\r\n    this.selectedProgram = {}\r\n    this.viewModelFromProcModel={}\r\n    this.lang='en'\r\n  }\r\n\r\n  render() {\r\n    return html`${this.templateName ?\r\n      html`${this[this.templateName]()}` :\r\n      nothing\r\n    }`\r\n  }\r\n  resetView(){\r\n    //console.log('resetView-templates-')\r\n    this.selectedProgram = []\r\n    this.programsList = []\r\n  }\r\n  populateProgramsList(){\r\n    let myList=[]\r\n    this.programsList.forEach(row =>{\r\n      myList.push(row)\r\n    })\r\n    let firstProgram=this.programsList[0]\r\n    if (firstProgram!==undefined){\r\n      this.selectedProgram=[]\r\n      this.selectedProgram.push(firstProgram)\r\n      let mye={target:{value:''}}\r\n      mye.target.value=firstProgram.name\r\n      //console.log('mye', mye)\r\n      this.programChanged(mye)\r\n    }\r\n    return html`\r\n    ${myList.map((c, i) =>\r\n      html`<mwc-list-item value=\"${c.name}\" ?selected=${i==0}>${c.name}</mwc-list-item>`\r\n    )}\r\n    `\r\n\r\n  }\r\n  specCode() {\r\n    return html`    \r\n      <div id= \"topElement\" class=\"layout center\">\r\n        ${this.buttons&&this.buttons.map(b =>\r\n          html`<mwc-icon-button \r\n            icon=\"${b.icon}\" \r\n            title=\"${b.title['label_'+this.lang]}\" \r\n            @click=${()=>this.dispatchEvent(new CustomEvent('template-event', {\r\n              detail: b\r\n            }))}></mwc-icon-button>`\r\n        )}\r\n        ${this.programsList===undefined?html`\r\n            No programs founds, please review the master data\r\n        `:html`\r\n          <mwc-select outlined label=\"Program Name\" @change=${this.programChanged} ?hidden=${this.programsList.length<2}>\r\n              ${this.populateProgramsList()}\r\n          </mwc-select>\r\n          ${this.programsList.length==1 ?\r\n            html`<h3>${this.programsList[0].name}</h3>` : nothing\r\n          }\r\n        `} \r\n        ${this.getTitle()}  \r\n      </div>\r\n    `\r\n  }\r\n\r\n  programChanged(e) {\r\n    if (this.programsList.length) {\r\n      this.selectedProgram = this.programsList.filter(p => p.name == e.target.value)\r\n      // console.log('programChanged', this.selectedProgram)\r\n      \r\n      this.dispatchEvent(new CustomEvent('program-changed', {\r\n        detail: this.selectedProgram[0].sample_points || []\r\n      }))\r\n    }\r\n  }\r\n}\r\nwindow.customElements.define('templates-', Templates);","import { html, css, nothing } from 'lit';\r\nimport { CredDialog } from '@trazit/cred-dialog';\r\nimport { Layouts } from '@collaborne/lit-flexbox-literals';\r\nimport '@google-web-components/google-chart';\r\nlet chartWithNoData = {\r\n   label_en: 'No data for charting', label_es: 'No hay datos para una gráfica' }\r\n\r\nexport class GridmodelBottomcompChart extends ((CredDialog)) {\r\n  static get styles() {\r\n    return [\r\n      Layouts,\r\n      super.styles,\r\n      css`\r\n        mwc-button {\r\n          --mdc-typography-button-text-transform: none;\r\n          margin: 0 2px;\r\n        }\r\n        tr-dialog * {\r\n          margin-bottom: 5px;\r\n        }\r\n        mwc-textfield[hidden] {\r\n          display: none;\r\n        }\r\n        mwc-button[hidden] {\r\n          display: none;\r\n        }\r\n        div.input * {\r\n          margin: 10px 0 5px;\r\n        }\r\n        mwc-icon-button[hidden] {\r\n          display: none;\r\n        }\r\n        #resultDialog {\r\n          --mdc-dialog-min-width: 800px;\r\n        }\r\n        #batchDetail {\r\n          width: 200px;\r\n          margin: 0 20px;\r\n          padding-top: 20px;\r\n        }\r\n        #batchDetail h1 {\r\n          color: blue;\r\n        }\r\n        #samplesArr {\r\n          border-radius: 2px;\r\n          box-shadow: rgb(136, 136, 136) 2px 2px;\r\n          padding: 5px;\r\n          background: #c2f2ff;\r\n        }\r\n        #samplesArr div {\r\n          margin: 5px 0;\r\n        }\r\n        #assignDialog {\r\n          --mdc-dialog-min-width: 500px;\r\n        }\r\n        @media (max-width: 460px) {\r\n          vaadin-grid {\r\n            font-size: 10px;\r\n          }\r\n          vaadin-grid-cell-content {\r\n            padding: 5px;\r\n          }\r\n        }\r\n      `\r\n    ];\r\n  }\r\n  static get properties() {\r\n    return {\r\n      selectedItems: { type: Array },\r\n      chartLineAllData: {type: Array}\r\n    };\r\n  }\r\n  constructor() {\r\n    super()\r\n    this.chartLineAllData = []\r\n  }\r\n  updated(updates) {\r\n    super.updated(updates)\r\n    if (updates.has('model')) {\r\n      this.filterName = this.model.filter\r\n      this.resetView()\r\n      this.authorized()\r\n    }\r\n  }\r\n  resetView() {\r\n    this.selectedItems = []\r\n    this.assignList = []\r\n    this.langConfig = this.model.langConfig\r\n    if (this.mode&&this.model.actions){\r\n      this.actions = this.model.actions\r\n      this.selectedAction = this.model.actions[0]\r\n    }\r\n  }\r\n  render() {\r\n    return html`${this.model ? \r\n      html`      \r\n      <div class=\"layout horizontal flex wrap\">\r\n        <div class=\"layout flex\">\r\n        <h3>${this.model.chartTitle[\"label_\"+ this.lang]}</h3>\r\n        ${!this.lineData()||this.lineData().length<=1 ? html`\r\n          ${chartWithNoData[\"label_\"+ this.lang]}\r\n          `:html`      \r\n            <google-chart type='${this.model.data.chartType}' .data='${this.lineData()}'></google-chart>\r\n          `}\r\n        </div>\r\n        ${super.render()}\r\n      </div>\r\n      ` : \r\n      nothing\r\n    }\r\n    `;\r\n  }\r\n  lineData() {\r\n    let allData=[[]]\r\n    //console.log('lineData', 'selectedItems', this.selectedItems)\r\n    allData[0][0]=this.model.data.chartValuesHeader[this.lang][0]\r\n    allData[0][1]=this.model.data.chartValuesHeader[this.lang][1]\r\n    if (this.selectedItems===undefined||this.selectedItems.length==0){\r\n      return allData\r\n    }\r\n    if (this.selectedItems[0][this.model.data.objectArrayValuesName]===undefined||this.selectedItems[0][this.model.data.objectArrayValuesName]===\"No readings\"||this.selectedItems[0][this.model.data.objectArrayValuesName].length==0){\r\n      return allData  \r\n    }\r\n    let valuesArr=this.selectedItems[0][this.model.data.objectArrayValuesName]\r\n    if (valuesArr===\"No readings\"||valuesArr.length==0){\r\n      return allData  \r\n    }\r\n    for (let i = 0; i < this.selectedItems[0][this.model.data.objectArrayValuesName].length; i++) {\r\n      let curReading=[]\r\n      curReading[0]=this.selectedItems[0][this.model.data.objectArrayValuesName][i][this.model.data.valuesFirstPropertyName]\r\n      curReading[1]=this.selectedItems[0][this.model.data.objectArrayValuesName][i][this.model.data.valuesSecondPropertyName]\r\n      allData.push(curReading)\r\n  }    \r\n    this.chartLineAllData=allData\r\n    return allData\r\n  }\r\n}\r\nwindow.customElements.define('gridmodel-bottomcomp-chart', GridmodelBottomcompChart);"],"names":[],"sourceRoot":""}