{"version":3,"file":"components-serialPort-_serialPort-stories.c0efdda0.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;AAIA;AAMA;;AAGA;;;;AAIA;;;AAGA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAIA;;AAEA;;;;;AAjBA;;;AAyBA;;AAEA;AACA;AACA;;;AAGA;;;AAGA;AAEA;AAnDA;;;ACrBA;;ACkGA;AAGA","sources":["webpack://@trazit/tr-procedures/./src/components/serialPort/serial-port-template.js","webpack://@trazit/tr-procedures/./src/components/serialPort/serial-port.js","webpack://@trazit/tr-procedures/./src/components/serialPort/_serialPort.stories.js"],"sourcesContent":["import { html } from 'lit';\r\nimport '@material/mwc-dialog';\r\nimport '@material/mwc-button';\r\n\r\nexport const template = (logAreaHeight, timeout, isSendEnabled, lang, messages, isTimeoutEditable, handleKeyDown, canSendData,\r\n  displayObjectsTable, tableDefinition, tableData, handleButton1, handleButton2, handleButton3, dialogWeightMessage, handleKeyDownNextWeight\r\n) => html`\r\n  <div class=\"container\">\r\n    <div class=\"left-column\">    \r\n      ${isSendEnabled ? html`\r\n        <input type=\"text\" id=\"userInput\" placeholder=\"${messages.enterText[lang]}\" @keydown=\"${handleKeyDown}\" ?disabled=\"${!canSendData}\">\r\n      ` : ''}\r\n      <div class=\"button-row\">\r\n        <button class=\"standard-button\" id=\"connectButton\">${messages.connect[lang]}</button>\r\n        <button class=\"standard-button\" id=\"closeButton\">${messages.closeConnection[lang]}</button>\r\n        <button class=\"icon-button\" id=\"clearLogButton\" title=\"${messages.clearLog[lang]}\">üóëÔ∏è</button>\r\n      </div>\r\n      <textarea id=\"output\" readonly style=\"height: ${logAreaHeight}px;\"></textarea>\r\n      <div>\r\n        <label for=\"timeout\">${messages.timeout[lang]}:</label>\r\n        <input type=\"number\" id=\"timeout\" value=\"${timeout}\" min=\"1\" step=\"1\" ?disabled=\"${!isTimeoutEditable}\">\r\n      </div>\r\n    </div>\r\n    <div class=\"right-column\">\r\n      ${displayObjectsTable ? html`\r\n        ${dragObjectsTable(messages, {viewTable: true}, lang, tableDefinition, tableData, true, handleButton1, handleButton2, handleButton3, dialogWeightMessage, handleKeyDownNextWeight)}\r\n      ` : ''}\r\n    </div>\r\n  </div>\r\n`;\r\nfunction dragObjectsTable(messages, tmpLogic, lang, elem, dataArr, componentRef, handleButton1, handleButton2, handleButton3, dialogWeightMessage, handleKeyDownNextWeight){  \r\n  return html`\r\n  \r\n  ${tmpLogic.viewTable ? html`\r\n  <div style=\"margin-top:42px\">\r\n      <table class=\"dragdropable TRAZiT-DefinitionArea\"> \r\n          <thead>\r\n              ${elem.columns.map((column) => html`<th>${column.label_en}</th>`)}\r\n          </thead>\r\n          <tbody>\r\n              ${dataArr === undefined || !Array.isArray(dataArr) ? html`No Data` : \r\n              html`  \r\n                  ${dataArr.map((p, idx) => html`\r\n                  <tr class=\"dragdropabletr\" draggable=\"true\" @dragstart=${(e) => tmpLogic.dragTableTr(e, elem, p)}>\r\n                      ${elem.columns.map((fld, index) => fld.is_icon !== undefined && fld.is_icon == true ? \r\n                          fld.icon_class ?\r\n                              html`<div class=\"left-area\">\r\n                                  ${this.iconRenderer(p, fld.name, idx, fld)}\r\n                                  <mwc-icon-button class=\"icon ${p[fld.icon_class]}\" icon=\"${p[fld.icon_name]}\" alt=\"${fld.name}\"></mwc-icon-button>\r\n                              </div>` :\r\n                              html`${this.iconRenderer(p, fld.name, idx, fld)}\r\n                                  <img src=\"${tmpLogic.iconRendererSrc(p, fld.name, idx, fld)}\" style=\"width:20px\">` \r\n                          :     \r\n                          html`<td @click=\"${() => componentRef.shadowRoot.querySelector('#detail' + idx).toggle()}\">${p[fld.name]}</td>`                    \r\n                      )}\r\n                      ${elem.row_buttons === undefined ? html`` : html`<td><div class=\"layout horizontal center flex wrap\">${this.getButtonForRows(elem.row_buttons, p, false, parentData)}</div></td>`}\r\n                  </tr>\r\n                  <table-row-detail id=\"detail${idx}\">\r\n                    <div slot=\"details\">                    \r\n                      <!-- Aqu√≠ puedes poner el contenido detallado para esta fila -->\r\n                    </div>\r\n                  </table-row-detail>`)}\r\n              `}\r\n          </tbody>\r\n      </table>\r\n      <mwc-dialog id=\"confirm-dialog\" heading=\"${dialogWeightMessage[\"label_\"+lang]}\">\r\n        <div>What would you like to do next?</div>\r\n        <mwc-button slot=\"primaryAction\" dialogAction=\"ok\" @click=\"${handleButton1}\">Next weight</mwc-button>\r\n        <mwc-button slot=\"secondaryAction\" dialogAction=\"cancel\" @click=\"${handleButton2}\">Change Balance</mwc-button>\r\n        <mwc-button slot=\"secondaryAction\" dialogAction=\"close\" @click=\"${handleButton3}\">Exit</mwc-button>\r\n      </mwc-dialog>\r\n      <mwc-dialog id=\"next-weight\" heading=\"\">\r\n        <input type=\"text\" id=\"userInputNextWeight\" placeholder=\"${messages.enterText[lang]}\" @keydown=\"${handleKeyDownNextWeight}\" ?disabled=\"${false}\">\r\n      </mwc-dialog>\r\n  </div> \r\n  ` : null}\r\n  `\r\n}\r\n\r\n","// Archivo: serial-port.js\r\nimport { LitElement, html } from 'lit';\r\nimport { styles } from './serial-port-styles.js';\r\nimport { template } from './serial-port-template.js';\r\n\r\nclass SerialPortComponent extends LitElement {\r\n  constructor() {\r\n    super();\r\n    this.output = '';\r\n    this.buffer = '';\r\n    this.reader = null;\r\n    this.writer = null;\r\n    this.port = null;\r\n    this.timeout = 4; // Tiempo de espera por defecto en segundos\r\n    this.baudRate = 9600;\r\n    this.messageTimeout = null;\r\n    this.value = ''; // Propiedad para guardar el mensaje completo\r\n    this.sendEnabled = true; // Propiedad para habilitar o deshabilitar el env√≠o de datos\r\n    this.canSendData = true; // Propiedad para habilitar o deshabilitar el campo de env√≠o de datos tras la conexi√≥n\r\n    this.lang = 'en'; // Idioma por defecto\r\n    this.logAreaHeight = 250; \r\n    this.messages = {\r\n      enterText: {\r\n        en: 'Enter the sample id',\r\n        es: 'Ingrese Id de muestra'\r\n      },\r\n      connect: {\r\n        en: 'Connect to Serial Port',\r\n        es: 'Conectar al puerto serial'\r\n      },\r\n      closeConnection: {\r\n        en: 'Close Connection',\r\n        es: 'Cerrar conexi√≥n'\r\n      },\r\n      clearLog:{\r\n        en: 'Clear log',\r\n        es: 'Borrar log'\r\n      },\r\n      timeout: {\r\n        en: 'Timeout (seconds)',\r\n        es: 'Tiempo de espera (segundos)'\r\n      },\r\n      portOpen: {\r\n        en: '<<Opened>>',\r\n        es: '<<Abierto>>'\r\n      },\r\n      dataSent: {\r\n        en: 'Data sent: ',\r\n        es: 'Datos enviados: '\r\n      },\r\n      portClose: {\r\n        en: '<<Port closed>>',\r\n        es: '<<Puerto cerrado>>'\r\n      },\r\n      messageReceived: {\r\n        en: 'Message received: ',\r\n        es: 'Mensaje recibido: '\r\n      },\r\n      errorRead: {\r\n        en: 'Read error: ',\r\n        es: 'Error de lectura: '\r\n      },\r\n      errorSend: {\r\n        en: 'Error: Could not send data, port is not open.',\r\n        es: 'Error: No se pudo enviar el dato, el puerto no est√° abierto.'\r\n      },\r\n      errorClose: {\r\n        en: 'Error closing port: ',\r\n        es: 'Error al cerrar el puerto: '\r\n      },\r\n      alertMessage: {\r\n        en: 'Message received: ',\r\n        es: 'Mensaje recibido: '\r\n      }\r\n    };\r\n    this.isTimeoutEditable = true; // Propiedad para determinar si el timeout es editable\r\n    this.displayObjectsTable=true\r\n    this.tableDefinition={\r\n      columns:[\r\n        {\"name\": \"sample_id\", \"label_en\": \"Sample\", \"label_en\": \"Muestra\"},\r\n        {\"name\": \"raw_value\", \"label_en\": \"Got result\", \"label_en\": \"Resultado Obtenido\"},\r\n        {\"name\": \"serial_log\", \"label_en\": \"Entire log\", \"label_en\": \"Registro entero\"}\r\n      ]\r\n    } \r\n    this.tableData=[\r\n      //{sample_id: 1, raw_value:\"\", serial_log: \"\"  }\r\n    ]\r\n    this.dialogWeightMessage = { label_en: '', label_es: '' };\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      output: { type: String },\r\n      timeout: { type: Number },\r\n      logAreaHeight: { type: Number },\r\n      baudRate: { type: Number },\r\n      value: { type: String }, // Propiedad para guardar el mensaje completo\r\n      sendEnabled: { type: Boolean }, // Propiedad para habilitar o deshabilitar el env√≠o de datos\r\n      canSendData: { type: Boolean }, // Propiedad para habilitar o deshabilitar el campo de env√≠o de datos tras la conexi√≥n\r\n      lang: { type: String }, // Propiedad para el idioma\r\n      messages: { type: Object }, // Propiedad para los mensajes\r\n      isTimeoutEditable: { type: Boolean }, // Propiedad para editar el timeout\r\n      displayObjectsTable: { type: Boolean },\r\n      tableDefinition:{type: Object},\r\n      tableData:{type: Array},\r\n      dialogWeightMessage: { type: Object }\r\n    };\r\n  }\r\n\r\n  static styles = styles;\r\n\r\n  firstUpdated() {\r\n    this.shadowRoot.getElementById('connectButton').addEventListener('click', () => this.handleConnectButtonClick());\r\n    this.shadowRoot.getElementById('closeButton').addEventListener('click', () => this.closeSerialPort());\r\n    this.shadowRoot.getElementById('clearLogButton').addEventListener('click', () => this.clearLog());\r\n    this.shadowRoot.getElementById('timeout').addEventListener('input', (event) => {\r\n      this.timeout = event.target.value;\r\n    });\r\n\r\n    const portList = this.shadowRoot.querySelectorAll('.port-item'); // Asumiendo que los elementos de la lista tienen la clase 'port-item'\r\n    portList.forEach(item => {\r\n      item.addEventListener('dblclick', () => {\r\n        item.click(); // Simula el clic en el elemento\r\n        this.handleConnectButtonClick(); // Llama a la funci√≥n para conectar\r\n      });\r\n    });\r\n\r\n    if (this.sendEnabled) {\r\n      const inputElement = this.shadowRoot.getElementById('userInput');\r\n      if (inputElement) {\r\n        inputElement.focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  handleConnectButtonClick() {\r\n    if (!this.port) {\r\n      this.connectAndSendData();\r\n    } else {\r\n      this.sendDataFromInput();\r\n    }\r\n  }\r\n\r\n  handleKeyDown(event) {\r\n    if (event.key === 'Enter') {\r\n      this.handleConnectButtonClick();\r\n    }\r\n  }\r\n  handleKeyDownNextWeight(event) {\r\n    if (event.key === 'Enter') {\r\n      //alert('enter')\r\n      const inputNextWeight = this.shadowRoot.getElementById('userInputNextWeight');\r\n      const inputElement = this.shadowRoot.getElementById('userInput');\r\n      inputElement.value=inputNextWeight.value  \r\n      inputNextWeight.value=\"\"\r\n      this.closeNewSampleIdDialog()\r\n      this.handleConnectButtonClick();\r\n    }\r\n  }\r\n\r\n  startNoDataReceivedTimer() {\r\n    if (this.noDataReceivedTimer) {\r\n      clearTimeout(this.noDataReceivedTimer);\r\n    }\r\n    this.noDataReceivedTimer = setTimeout(() => {\r\n      if (!this.hasReceivedData) {\r\n        this.showNoDataReceivedAlert();\r\n      }\r\n    }, this.timeout * 1000);\r\n  }\r\n  \r\n  \r\n  async connectAndSendData() {\r\n    try {\r\n      if (this.baudRate === undefined) {\r\n        this.baudRate = 9600;\r\n      }\r\n      if (!this.port){\r\n        this.port = await navigator.serial.requestPort();\r\n        await this.port.open({ baudRate: this.baudRate });\r\n      } \r\n        \r\n      this.logMessage(this.messages.portOpen[this.lang], true);\r\n\r\n      this.startNoDataReceivedTimer();\r\n  \r\n      this.reader = this.port.readable.getReader();\r\n      this.writer = this.port.writable.getWriter(); // Crear un writer para enviar datos si est√° habilitado\r\n  \r\n      if (this.sendEnabled) {\r\n        this.sendDataFromInput();\r\n      }\r\n  \r\n      this.readData();\r\n      this.canSendData = true; // Habilitar el campo de texto para enviar datos\r\n      this.requestUpdate(); // Actualizar la UI\r\n  \r\n      // Iniciar el temporizador para detectar inactividad\r\n      this.startNoDataReceivedTimer();\r\n    } catch (error) {\r\n      this.logMessage(`${this.messages.errorRead[this.lang]}${error.message}`);\r\n    }\r\n  }\r\n    \r\n\r\n  async sendDataFromInput() {\r\n    const inputElement = this.shadowRoot.getElementById('userInput');\r\n    const data = inputElement.value;\r\n    if (data) {\r\n      await this.sendData(data);\r\n  //      inputElement.value = ''; // Limpiar la caja de texto\r\n    }\r\n  }\r\n  async showNoDataReceivedAlert() {\r\n    const alertMessage = this.lang === 'en' ? 'No data received.' : 'No se ha recibido nada.';\r\n    this.showMessageAlert(alertMessage);\r\n    this.logMessage(alertMessage);\r\n    await this.closeSerialPort();\r\n  }\r\n  \r\n  async readData() {\r\n    while (true) {\r\n      try {\r\n        const { value, done } = await this.reader.read();\r\n        if (done) {\r\n          this.reader.releaseLock();\r\n          break;\r\n        }\r\n        this.hasReceivedData = true; // Marcar que se ha recibido alg√∫n dato\r\n        this.buffer += new TextDecoder().decode(value);\r\n        this.buffer = this.cleanBuffer(this.buffer); // Limpiar caracteres de control\r\n        this.processData();\r\n        this.resetMessageTimeout();\r\n  \r\n        // Reiniciar el temporizador de inactividad cada vez que se recibe un car√°cter\r\n        this.startNoDataReceivedTimer();\r\n      } catch (error) {\r\n        this.logMessage(`${this.messages.errorRead[this.lang]}${error.message}`);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  \r\n\r\n\r\n  processData() {\r\n    const lines = this.buffer.split('\\n');\r\n    this.buffer = lines.pop(); // Dejar lo que est√° despu√©s del √∫ltimo \\n en el buffer\r\n    lines.forEach(line => {\r\n      this.value += line + '\\n';\r\n    });\r\n  \r\n    this.updateOutput();\r\n  }\r\n  \r\n\r\n  resetMessageTimeout() {\r\n    if (this.messageTimeout) {\r\n      clearTimeout(this.messageTimeout);\r\n    }\r\n    this.messageTimeout = setTimeout(() => this.finalizeMessage(), this.timeout * 1000);\r\n  \r\n    // Resetear el temporizador de no recepci√≥n de datos\r\n    this.startNoDataReceivedTimer();\r\n  }\r\n  \r\n\r\n  async finalizeMessage() {\r\n    if (this.buffer) {\r\n      this.value += this.cleanBuffer(this.buffer) + '\\n'; // A√±adir salto de l√≠nea al final del buffer\r\n    }\r\n    const inputElement = this.shadowRoot.getElementById('userInput');\r\n    this.sendReadingToAPI(inputElement.value, this.value);\r\n    this.showMessageAlert(this.value);\r\n    this.logMessage(`${this.messages.messageReceived[this.lang]}\\n${this.value}`);\r\n    this.buffer = '';\r\n    this.value = ''; // Limpiar el mensaje acumulado\r\n    inputElement.value = ''; // Limpiar la caja de texto\r\n    this.hasReceivedData = false; // Resetear el indicador\r\n  \r\n    this.updateOutput();\r\n  }\r\n  \r\n  \r\n  \r\n  cleanBuffer(buffer) {\r\n    //return buffer.replace(/[\\u0000-\\u0008\\u000B\\u000C\\u000E-\\u001F\\u007F-\\u009F]/g, '');\r\n    return buffer\r\n    //return buffer.replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, '');\r\n  }\r\n  \r\n  \r\n  sendReadingToAPI(inputData, logValue) {  \r\n    logValue = this.cleanBuffer(logValue); // Limpiar caracteres de control\r\n  \r\n    if (inputData === undefined || inputData.length === 0) {\r\n      alert('Please enter sample id on the top');\r\n      return;\r\n    }\r\n  \r\n    let weightValue = this.getWeightValue(logValue);\r\n    if (weightValue === null) {\r\n      alert('No valid weight value found in the log.');\r\n      return;\r\n    }\r\n  \r\n    let newReadingRow = { sample_id: inputData, raw_value: weightValue, serial_log: logValue };\r\n    this.tableData.push(newReadingRow);\r\n    let lblEn = \"Weight \" + weightValue + \" for sample \" + inputData;\r\n    let lblES = \"Peso \" + weightValue + \" para la muestra \" + inputData;\r\n    this.dialogWeightMessage = {\r\n      label_en: lblEn,\r\n      label_es: lblES\r\n    };\r\n    this.showDialog();\r\n  }\r\n  \r\n\r\ngetWeightValue(logValue) {\r\n    // Funci√≥n auxiliar para convertir la coma en punto\r\n    function convertToDecimal(value) {\r\n        return value.replace(',', '.');\r\n    }\r\n\r\n    // Expresi√≥n regular para verificar si es solo un n√∫mero\r\n    const numberPattern = /^-?\\d+([,.]\\d+)?$/;\r\n    \r\n    // Expresiones regulares para unidades de masa\r\n    const massUnits = [\"mg\", \"g\", \"kg\"];\r\n    const massPattern = new RegExp(`(\\\\d+[,.]?\\\\d*)\\\\s*(${massUnits.join('|')})`, 'i');\r\n\r\n    // Verifica si el logValue es solo un n√∫mero\r\n    if (numberPattern.test(logValue.trim())) {\r\n        return convertToDecimal(logValue.trim());\r\n    }\r\n\r\n    // Busca y extrae el n√∫mero antes de la unidad de masa\r\n    const match = logValue.match(massPattern);\r\n    if (match) {\r\n        return convertToDecimal(match[1]);\r\n    }\r\n\r\n    // Si no se encuentra un n√∫mero v√°lido, devuelve null o un valor indicativo\r\n    return null;\r\n  }\r\n\r\n\r\n  showDialog() {\r\n    const dialog = this.shadowRoot.getElementById('confirm-dialog');\r\n    dialog.show();\r\n  }\r\n\r\n  showNewSampleIdDialog() {\r\n    const dialog = this.shadowRoot.getElementById('next-weight');\r\n    dialog.show();\r\n    // Usa setTimeout para asegurarte de que el campo de entrada est√© disponible despu√©s de que el di√°logo se haya renderizado\r\n    setTimeout(() => {\r\n      const inputNextWeight = this.shadowRoot.getElementById('userInputNextWeight');\r\n      if (inputNextWeight) {\r\n        inputNextWeight.focus();\r\n      }\r\n    }, 0);\r\n  }\r\n  \r\n\r\n  closeNewSampleIdDialog() {\r\n    const dialog = this.shadowRoot.getElementById('next-weight');\r\n    dialog.close();\r\n  }  \r\n  \r\n\r\n  async handleButtonNextWeight() {\r\n    this.showNewSampleIdDialog()\r\n    // Acci√≥n para el bot√≥n 1\r\n    console.log('Bot√≥n 1 presionado');\r\n  }\r\n\r\n  async handleButtonChangeCOM() {\r\n    await this.closeSerialPort();\r\n\r\n    // Acci√≥n para el bot√≥n 2\r\n    console.log('Bot√≥n 2 presionado');\r\n  }\r\n\r\n  async handleButtonClose() {\r\n    await this.closeSerialPort();\r\n    // Acci√≥n para el bot√≥n 3\r\n    console.log('Bot√≥n 3 presionado');\r\n  }  \r\n\r\n  async sendData(data) {\r\n    if (this.writer) {\r\n      const encoder = new TextEncoder();\r\n      await this.writer.write(encoder.encode(data + '\\r\\n'));\r\n      this.logMessage(`${this.messages.dataSent[this.lang]}${data}`);\r\n    } else {\r\n      this.logMessage(this.messages.errorSend[this.lang]);\r\n    }\r\n  }\r\n\r\n  async closeSerialPort() {\r\n    try {\r\n      if (this.reader) {\r\n        await this.reader.cancel();\r\n        await this.reader.releaseLock();\r\n      }\r\n      if (this.writer) {\r\n        await this.writer.close();\r\n        await this.writer.releaseLock();\r\n      }\r\n      if (this.port) {\r\n        await this.port.close();\r\n        this.logMessage(this.messages.portClose[this.lang], true);\r\n        this.logMessage('', true);\r\n      }\r\n    } catch (error) {\r\n      this.logMessage(`${this.messages.errorClose[this.lang]}${error.message}`);\r\n    } finally {\r\n      this.port = null;\r\n      this.reader = null;\r\n      this.writer = null;\r\n      this.canSendData = true; // Deshabilitar el campo de texto para enviar datos tras cerrar el puerto\r\n      this.requestUpdate(); // Actualizar la UI\r\n    }\r\n  }\r\n\r\n  clearLog() {\r\n    this.output = '';\r\n    this.updateOutput();\r\n  }\r\n\r\n  showMessageAlert(message) {\r\n    if (!this.showAlert) return;\r\n    alert(`${this.messages.alertMessage[this.lang]}${message}`);\r\n    this.logMessage(`${this.messages.alertMessage[this.lang]}${message}`);\r\n  }\r\n\r\n  logMessage(message, isBold = false) {\r\n    const timestamp = new Date().toLocaleString();\r\n    const formattedMessage = `[${timestamp}] ${message}`;\r\n    this.output += isBold ? `**${formattedMessage}**\\n` : `${formattedMessage}\\n`;\r\n    this.updateOutput();\r\n  }\r\n\r\n  updateOutput() {\r\n    const outputElement = this.shadowRoot.getElementById('output');\r\n    if (outputElement) {\r\n      outputElement.value = this.output;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return html`${template(this.logAreaHeight, this.timeout, this.sendEnabled, this.lang, this.messages, this.isTimeoutEditable, this.handleKeyDown.bind(this), this.canSendData, \r\n      this.displayObjectsTable, this.tableDefinition, this.tableData, this.handleButtonNextWeight.bind(this), this.handleButtonChangeCOM.bind(this), this.handleButtonClose.bind(this), \r\n      this.dialogWeightMessage, this.handleKeyDownNextWeight.bind(this))}`;\r\n  }\r\n}\r\n\r\ncustomElements.define('serial-port-component', SerialPortComponent);\r\n","import { html } from 'lit-html';\r\nimport './serial-port.js';\r\nimport './serial-port-styles.js';\r\nimport './serial-port-template.js';\r\n\r\nexport default {\r\n  title: 'Components/SerialPort',\r\n  component: 'serial-port',\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component: 'The `SerialPort` component is used to manage serial port communication. It allows configuration of various serial port settings and provides a list of available ports.'\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    lang: {\r\n      description: 'Language',\r\n      control: 'select',\r\n      options: ['en', 'es']            \r\n    },\r\n    baudRate: {\r\n      description: 'The baud rate for the serial communication',\r\n      control: {value: 9600 },\r\n    },    \r\n    timeout:{\r\n        description: 'Number of seconds of inactivity (nothing being received) to consider that this message is done',\r\n        control:{\r\n          value:4,\r\n          min: 0\r\n        }\r\n    },\r\n    sendEnabled:{\r\n      description: 'Enable the line on the top to transmit one message through the port when connection is started, for devices with echo enabled this means that TRAZiT can send one message to be displayed in the device and as for bi-directional and traceability purpose.',\r\n      control: 'boolean',\r\n      defaultValue: { summary:true },\r\n    },\r\n    isTimeoutEditable:{\r\n      description: 'Allow the user to change the timeout seconds or not',\r\n      control: 'boolean',\r\n      defaultValue: { summary:false },\r\n    }, \r\n    showAlert:{\r\n      description: 'Show one alert to notify the user that one communication-message is completed/received, independently of enabling the alert or not the message will be displayed in the log textarea',\r\n      control: 'boolean',\r\n      defaultValue: { summary:false },\r\n    }, \r\n    logAreaHeight:{\r\n      description: 'Height, in pixels (px), for the log area',\r\n      control:{\r\n        value:150,\r\n        min: 0\r\n      }\r\n    },           \r\n    config: {\r\n      description: 'Configuration object for the serial port component',\r\n      control: 'object',\r\n      table: {\r\n        type: { summary: 'object' },\r\n      },\r\n    },\r\n    dataBits: {\r\n      description: 'The number of data bits per byte',\r\n      control: 'number',\r\n      table: {\r\n        category: 'config',\r\n        type: { summary: 'number' },\r\n        defaultValue: { summary: 8 },\r\n      },\r\n    },\r\n    stopBits: {\r\n      description: 'The number of stop bits per byte',\r\n      control: 'number',\r\n      table: {\r\n        category: 'config',\r\n        type: { summary: 'number' },\r\n        defaultValue: { summary: 1 },\r\n      },\r\n    },\r\n    parity: {\r\n      description: 'The parity bit setting',\r\n      control: 'text',\r\n      table: {\r\n        category: 'config',\r\n        type: { summary: 'string' },\r\n        defaultValue: { summary: 'none' },\r\n      },\r\n    },\r\n    flowControl: {\r\n      description: 'Indicates if flow control is enabled',\r\n      control: 'boolean',\r\n      table: {\r\n        category: 'config',\r\n        type: { summary: 'boolean' },\r\n        defaultValue: { summary: false },\r\n      },\r\n    }\r\n  },\r\n};\r\n\r\nconst Template = ({ lang, baudRate, logAreaHeight, sendEnabled, timeout, isTimeoutEditable, showAlert, config }) => html`\r\n  \r\n  <serial-port-component .config=${config} logAreaHeight=${logAreaHeight} baudRate=${baudRate} timeout=${timeout}  lang=${lang} .sendEnabled=\"${sendEnabled}\" .isTimeoutEditable=\"${isTimeoutEditable}\" .showAlert=\"${showAlert}\"></serial-port-component>\r\n`;\r\n\r\nexport const Default = Template.bind({});\r\nDefault.args = {  \r\n  lang: 'en',\r\n  baudRate: 9600,\r\n  logAreaHeight: 150,\r\n  sendEnabled: true,\r\n  timeout: 4,\r\n  isTimeoutEditable: false,\r\n  showAlert: false,\r\n  config: {\r\n    baudRate: 9600,\r\n    dataBits: 8,\r\n    stopBits: 1,\r\n    parity: 'none',\r\n    flowControl: false,\r\n  },\r\n};"],"names":[],"sourceRoot":""}