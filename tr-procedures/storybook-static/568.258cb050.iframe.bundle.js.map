{"version":3,"file":"568.258cb050.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;AAwDA;AACA;AACA;AAEA;;AAIA;;AAEA;AACA;AACA;AAEA;;AAIA;AACA;AACA;;AAEA;;;;AAKA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAGA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAaA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAKA;AAoBA;AACA;AAGA;;;;;AAKA;;AAEA;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;;;;AAKA;;AAIA;AACA;AACA;AACA;AACA;;;;;AAOA;;AAsHA;AAUA;AACA;AACA;AACA;AAGA;;AAKA","sources":["webpack://@trazit/tr-procedures/./src/components/DragDropBox/drag-box.js"],"sourcesContent":["import { html, css, LitElement, nothing } from 'lit';\r\nimport { gridRowDetailsRenderer } from 'lit-vaadin-helpers';\r\nimport { Layouts, Alignment } from '@collaborne/lit-flexbox-literals';\r\nimport '@material/mwc-button';\r\nimport '@material/mwc-icon-button';\r\nimport '@material/mwc-textfield';\r\nimport '@vaadin/vaadin-grid/vaadin-grid';\r\nimport '@vaadin/vaadin-grid/vaadin-grid-column';\r\nimport '@vaadin/vaadin-grid/vaadin-grid-selection-column';\r\nimport '@vaadin/vaadin-grid/vaadin-grid-sort-column';\r\nimport '@vaadin/vaadin-grid/vaadin-grid-filter-column';\r\nimport '@vaadin/vaadin-context-menu/vaadin-context-menu';\r\n\r\nimport '@trazit/cred-dialog'\r\nimport '../../gridmodel-bottomcomp-chart';\r\n\r\nimport '../templates-';\r\nimport '@trazit/tr-dialog/tr-dialog';\r\nimport { AuditFunctions} from '../Audit/AuditFunctions';\r\nimport {ButtonsFunctions} from '../Buttons/ButtonsFunctions';\r\nimport {GridFunctions} from '../grid_with_buttons/GridFunctions';\r\nimport {ModuleEnvMonitClientMethods} from '../../module_env_monit/ModuleEnvMonitClientMethods';\r\nimport { ProceduresModel } from '../../ProceduresModel';\r\nimport {TrazitGenericDialogs} from '../GenericDialogs/TrazitGenericDialogs';\r\nimport {TrazitReactivateObjectsDialog} from '../GenericDialogs/TrazitReactivateObjectsDialog';\r\nimport {TrazitEnterResultWithSpec} from '../GenericDialogs/TrazitEnterResultWithSpec';\r\nimport {ModuleEnvMonitDialogsMicroorganism} from '../../module_env_monit/Dialogs/ModuleEnvMonitDialogsMicroorganism';\r\nimport {TrazitInvestigationsDialog} from '../GenericDialogs/TrazitInvestigationsDialog';\r\n\r\nimport {TrazitCredentialsDialogs} from '../GenericDialogs/TrazitCredentialsDialogs';\r\nimport { TrazitTakePictureDialog } from '../GenericDialogs/TrazitTakePictureDialog';\r\n\r\nimport '../DragDropBox';\r\n\r\n\r\nimport '../Audit/audit-dialog';\r\nexport class DrapBox extends TrazitTakePictureDialog(TrazitCredentialsDialogs(AuditFunctions((TrazitInvestigationsDialog(ModuleEnvMonitDialogsMicroorganism(TrazitEnterResultWithSpec(TrazitReactivateObjectsDialog(TrazitGenericDialogs(ModuleEnvMonitClientMethods(GridFunctions(ButtonsFunctions(LitElement)))))))))))) {\r\n    static get styles() {\r\n      return [\r\n        Layouts, Alignment,\r\n        //super.styles,\r\n        css`\r\n          :host {\r\n            display: block;\r\n          }\r\n          .tabContainer {\r\n            overflow: auto;\r\n          }\r\n          .tabContainer::-webkit-scrollbar {\r\n            display: none;\r\n          }\r\n          .tabContainer > * {\r\n            display: inline-block;\r\n            flex-shrink: 0;\r\n          }\r\n          mwc-button {\r\n            --mdc-typography-button-text-transform: none;\r\n          }\r\n          mwc-icon-button.slide[hidden] {\r\n            visibility: hidden;\r\n          }\r\n          mwc-select[hidden] {\r\n            display: none;\r\n          }\r\n          h1 {        \r\n            color : rgba(36, 192, 235, 1);\r\n            font-family : Montserrat;\r\n            font-weight : bold;\r\n            font-size:calc(12px + 1.5vw);\r\n            text-align: center;\r\n          }        \r\n          vaadin-grid-cell-content{\r\n            color : rgb(94, 145, 186);\r\n          }\r\n          #vaadin-text-field-input{\r\n          background-color: #d0f1fa;\r\n          }\r\n        `\r\n      ];\r\n    }\r\n  \r\n    static get properties() {\r\n      return {\r\n        model: { type: Object },\r\n        config: { type: Object },\r\n        procInstanceName: { type: String },\r\n        viewModelFromProcModel: {type: Object},\r\n        ready:{type: Boolean},\r\n        viewName: { type: String },\r\n        filterName: { type: String },\r\n        lang: { type: String },\r\n        selectedItems: { type: Array },\r\n        actionBeingPerformedModel:{type:Object},\r\n        localProceduresModels: { type: Object},\r\n        masterData:{type: Object},\r\n        contextMenuItems: { type: Array },\r\n        useFakeData: {type: Boolean},\r\n        data: { type: Array },\r\n\r\n      };\r\n    }\r\n  \r\n    constructor() {\r\n      super()\r\n      this.ready=false;\r\n      this.selectedItems=[]\r\n      this.config={}\r\n      this.viewModelFromProcModel={}   \r\n      this.actionBeingPerformedModel={}\r\n      this.localProceduresModels=ProceduresModel\r\n      this.masterData={}\r\n      this.contextMenuItems=[]\r\n      this.useFakeData=true\r\n      this.data=[]\r\n    }\r\n\r\n    firstUpdated() {\r\n      if (this.useFakeData){\r\n        this.data=this.viewModelFromProcModel.fakedata\r\n      }else{\r\n        this.filterPerformAction()\r\n      }\r\n    }\r\n  \r\n    async filterPerformAction(e, flag) {\r\n  \r\n      await this.GetViewData(false)\r\n      this.data=this.requestData\r\n    }    \r\n    resetView(){\r\n      this.selectedItems=[]\r\n      this.ready=false;\r\n    }\r\n    render(){\r\n      return html`\r\n        <dragdrop-box .action=${this.actionModelForTable} .config=${this.config} .viewModelFromProcModel=${this.viewModelFromProcModel}\r\n          .data=${this.data}\r\n          .lang=${this.lang} .procName=${this.procName} .procInstanceName=${this.procInstanceName} .desktop=${this.desktop} > </dragdrop-box>\r\n      `\r\n    }\r\n    renderWhenRequiresRefreshDueToMultipleViewsUsingIt(){\r\n      return html`\r\n        <div style='display:none;'>\r\n          ${this.ready===false ? html`${this.GetViewData()}`: nothing}  \r\n        </div>\r\n        <dragdrop-box .action=${this.actionModelForTable} .config=${this.config} .viewModelFromProcModel=${this.viewModelFromProcModel}\r\n          .data=${this.data}\r\n          .lang=${this.lang} .procName=${this.procName} .procInstanceName=${this.procInstanceName} .desktop=${this.desktop} > </dragdrop-box>\r\n      `\r\n    }    \r\n    renderOriginal() {\r\n      return html`\r\n        <div>      \r\n          ${this.topCompositionBlock()} \r\n          ${this.abstractBlock()}\r\n          ${this.bottomCompositionBlock()}  \r\n          <div style=\"display:none\">\r\n            ${this.ready===false&&this.viewModelFromProcModel.tabs===undefined ? html`${this.GetViewData()}`: nothing}            \r\n          </div>\r\n         \r\n        </div>\r\n      `\r\n    }\r\n    loadDialogs(){\r\n      //console.log('loadDialogs')\r\n      return html`\r\n      ${this.credentialsDialog()}\r\n      ${this.genericFormDialog()}\r\n      ${this.reactivateObjectsDialog()}\r\n      ${this.moduleEnvMonitMicroorganismsDialogAdd()}\r\n      ${this.moduleEnvMonitMicroorganismsDialogRemove()}\r\n      ${this.pointTemplate()}\r\n      ${this.resultTemplate()}\r\n      ${this.takePictureFormDialog()}\r\n      \r\n      ${this.investigationTemplate()}\r\n      ${this.filterName==\"open\" ?\r\n        html`${this.decisionTemplate()}` : nothing\r\n      }  \r\n      ${this.decisionTemplate()}\r\n    `}\r\n  topCompositionBlock(){\r\n      return html`\r\n      ${this.viewModelFromProcModel.topCompositions ?\r\n        html`${this.viewModelFromProcModel.topCompositions.map(c => \r\n          html`<templates- id=\"topComp\"\r\n            .windowOpenable=${this.windowOpenable}\r\n            .sopsPassed=${this.sopsPassed}\r\n            .templateName=${c.templateName} .buttons=${c.buttons} .lang=${this.lang}\r\n            .viewName=${this.viewName} .filterName=${this.filterName}\r\n            .viewModelFromProcModel=${this.viewModelFromProcModel}\r\n            .procInstanceName=${this.procInstanceName}\r\n            @program-changedzzzz=${e=>this.gridItems=e.detail}\r\n            @program-changed=${this.programChangedAction}\r\n            @template-event=${this.templateEvent}></templates->           \r\n          `\r\n        )}` :\r\n        nothing\r\n      }\r\n      `\r\n  }\r\n\r\n  setReady(){\r\n    this.ready=true\r\n  }\r\n  programChangedAction(e){\r\n    if (e===undefined){return}\r\n    this.ready=true\r\n    this.gridItems=e.detail\r\n\r\n  }\r\n  bottomCompositionBlock(){\r\n  return html`\r\n  ${this.viewModelFromProcModel.bottomCompositions ?\r\n      html`${this.viewModelFromProcModel.bottomCompositions.map(c =>                             \r\n      html`\r\n          ${c.elementName=='envmonit-batch-sampleincubation' ? html`                               \r\n          <div class=\"layout flex\">\r\n          <gridmodel-bottomcomp-sampleincubation id=${c.filter} .procInstanceName=${this.procInstanceName} .viewName=${this.viewName}\r\n              .lang=${this.lang}\r\n              .windowOpenable=${this.windowOpenable}\r\n              .sopsPassed=${this.sopsPassed}\r\n              .model=${c} .config=${this.config} .batchName=${this.batchName}\r\n              @reload-samples=${e=>this[e.detail.method]()}\r\n              @selected-incub=${this.filteringBatch}\r\n              @selected-batch=${this.filteringIncub}\r\n              @set-grid=${e=>this.setGrid(e.detail)}></gridmodel-bottomcomp-sampleincubation>\r\n          </div>\r\n          ` : nothing} \r\n          ${c.elementName=='chart' ? html`      \r\n          <div class=\"layout flex\">\r\n          <gridmodel-bottomcomp-chart id=${c.filter} .procInstanceName=${this.procInstanceName} .viewName=${this.viewName}\r\n          .selectedItems=${this.selectedItems} .lang=${this.lang}\r\n          .model=${c} .config=${this.config}></gridmodel-bottomcomp-chart>\r\n          </div>\r\n      ` : nothing} \r\n      `\r\n      )}` :\r\n      html``\r\n  }\r\n  `\r\n  }\r\n  activeItemChanged(e){    \r\n    if (e===undefined){return}\r\n    let d=true\r\n    d=this.disabledByCertification(this.viewModelFromProcModel.langConfig.gridActionOnClick)     \r\n    if (d) {\r\n       //alert('View in read only mode')\r\n      return\r\n    }\r\n    this.selectedItems=e.detail.value ? [e.detail.value] : []\r\n    if (this.selectedItems.length>0&&this.viewModelFromProcModel.langConfig.gridActionOnClick!==undefined){\r\n      //alert(this.viewModelFromProcModel.langConfig.gridActionOnClick.actionName)\r\n      this.GetAlternativeViewData(this.viewModelFromProcModel.langConfig.gridActionOnClick)\r\n    }\r\n\r\n  }\r\n  abstractBlock(){\r\n    //console.log('abstractBlock')\r\n    let addContextMenu=this.addContextMenu()    \r\n  return html`\r\n  ${this.loadDialogs()} \r\n  ${this.abstract ? \r\n      nothing :\r\n      html`\r\n        ${this.viewModelFromProcModel.topCompositions!==undefined ? nothing: html`${this.getTitle()}`}\r\n      \r\n        <div class=\"layout horizontal flex wrap\">\r\n            <div class=\"layout flex\">          \r\n            <div class=\"layout horizontal center flex wrap\">\r\n              ${this.getButton()}\r\n            </div>\r\n            ${this.ready ? \r\n              html`\r\n              ${addContextMenu!==undefined&&addContextMenu===true?html`\r\n                <vaadin-context-menu .items=${this.contextMenuItems} @item-selected=\"${this.contextMenuAction}\">\r\n                <vaadin-grid id=\"mainGrid\" theme=\"row-dividers\" column-reordering-allowed multi-sort \r\n                  @active-item-changed=${this.activeItemChanged}\r\n                  .items=${this.gridItems} .selectedItems=\"${this.selectedItems}\"\r\n                  ${gridRowDetailsRenderer(this.detailRenderer)}\r\n                  ${this.setCellListener()}                  \r\n                >\r\n                  ${this.gridList(this.viewModelFromProcModel)}\r\n                </vaadin-grid>\r\n                </vaadin-context-menu>`\r\n              :html`\r\n                <vaadin-grid id=\"mainGrid\" theme=\"row-dividers\" column-reordering-allowed multi-sort \r\n                @active-item-changed=${this.activeItemChanged}\r\n                .items=${this.gridItems} .selectedItems=\"${this.selectedItems}\"\r\n                ${gridRowDetailsRenderer(this.detailRenderer)}\r\n                ${this.setCellListener()}                \r\n                >\r\n                ${this.gridList(this.viewModelFromProcModel)}\r\n              </vaadin-grid>`\r\n              }\r\n              \r\n              <div id=\"rowTooltip\">&nbsp;</div>\r\n              ` :\r\n              html``\r\n          }\r\n          </div>   \r\n          <audit-dialog @sign-audit=${this.setAudit} .actionBeingPerformedModel=${this.actionBeingPerformedModel} \r\n          .filterName=${this.filterName} .lang=${this.lang} .windowOpenable=${this.windowOpenable}\r\n          .sopsPassed=${this.sopsPassed} .procInstanceName=${this.procInstanceName} .viewName=${this.viewName} \r\n          .viewModelFromProcModel=${this.viewModelFromProcModel}\r\n          .selectedItems=${this.selectedItems} .config=${this.config}></audit-dialog>\r\n\r\n\r\n        </div>\r\n      `\r\n  }    \r\n  `\r\n  }\r\n  contextMenuAction(e){\r\n    //console.log(e.target)\r\n    let selectedItem=e.target\r\n    if (selectedItem) {\r\n      //console.log(selectedItem.item)      \r\n    }        \r\n    this.actionMethod(e.detail.value.actionDef, e.detail.value.actionDef, null, null, this.selectedItems[0], false)\r\n  }\r\n  addContextMenu(){\r\n    if (this.viewModelFromProcModel.enableContextMenu!==undefined||this.viewModelFromProcModel.enableContextMenu===false){\r\n      return false\r\n    }\r\n    this.contextMenuItems=[]    \r\n      let menuItem={}\r\n      menuItem.component='hr'\r\n      this.contextMenuItems.push(menuItem)\r\n      if (this.viewModelFromProcModel.addActionsInContextMenu!==undefined&&this.viewModelFromProcModel.addActionsInContextMenu===true){\r\n        this.viewModelFromProcModel.actions.forEach(action => {\r\n          menuItem={}\r\n          menuItem.text=action.button.title['label_'+this.lang]\r\n          if ((action.button.requiresGridItemSelected===undefined||action.button.requiresGridItemSelected===true)&&(this.selectedItems===undefined||this.selectedItems.length==0)){\r\n            menuItem.disabled=true\r\n          }\r\n          menuItem.actionDef=action\r\n          this.contextMenuItems.push(menuItem)\r\n        })\r\n      }\r\n      if (this.viewModelFromProcModel.actionsForContextMenu!==undefined){\r\n        this.viewModelFromProcModel.actionsForContextMenu.forEach(action => {\r\n          menuItem={}\r\n          menuItem.text=action.button.title['label_'+this.lang]\r\n          if ((action.button.requiresGridItemSelected===undefined||action.button.requiresGridItemSelected===true)&&(this.selectedItems===undefined||this.selectedItems.length==0)){\r\n            menuItem.disabled=true\r\n          }\r\n          menuItem.actionDef=action\r\n          this.contextMenuItems.push(menuItem)\r\n        })\r\n      }\r\n      menuItem={}\r\n      menuItem.component='hr'\r\n      this.contextMenuItems.push(menuItem)    \r\n    return true\r\n    /*\r\n    ${this.btnHidden(action) ? nothing : \r\n      html`${action.button ?\r\n          html`${action.button.icon ?\r\n          html`<mwc-icon-button \r\n              class=\"${action.button.class} disabled${this.btnDisabled(action, sectionModel)}\"\r\n              icon=\"${action.button.icon}\" \r\n              title=\"${action.button.title['label_'+this.lang]}\" \r\n              ?disabled=${this.btnDisabled(action, sectionModel)}\r\n              ?hidden=${this.btnHidden(action)}\r\n              @click=${()=>this.actionMethod(action, sectionModel, null, null, data, isProcManagement)}></mwc-icon-button>` :\r\n    */\r\n  }\r\n\r\n//  ${this.resultTemplate()}\r\nget rowTooltip() {\r\n  return this.shadowRoot.querySelector(\"#rowTooltip\")\r\n}\r\n  get xtabsCompositionc() {return this.shadowRoot.querySelector(\"tabs-composition\")}\r\n\r\n  get batchElement() {return this.shadowRoot.querySelector(\"gridmodel-bottomcomp-sampleincubation#active_batches\")}\r\n  get incubElement() {return this.shadowRoot.querySelector(\"gridmodel-bottomcomp-sampleincubation#samplesWithAnyPendingIncubation\")}\r\n  get grid() {return this.shadowRoot.querySelector(\"vaadin-grid#mainGrid\")}\r\n  get chart() {return this.shadowRoot.querySelector(\"google-chart\")}   \r\n  get templates() {return this.shadowRoot.querySelector(\"templates-#topComp\")}\r\n  get audit() {return this.shadowRoot.querySelector(\"audit-dialog\")}    \r\n\r\n  templateEvent(e) {\r\n    console.log('templateEvent')\r\n    if (e.detail.calledActionIdx >= 0) {\r\n      this.selectedAction = ProceduresModel[this.procInstanceName][this.viewName].actions[e.detail.calledActionIdx]\r\n      this.reload()\r\n    }\r\n  }\r\n\r\n  showLockReason(i) {\r\n    //alert('showLockReason', i)\r\n    let labels = {\r\n      \"warning_reason_label_en\": \"Warning Reason\", \"warning_reason_label_es\": \"Razón Aviso\",\r\n      \"locking_reason_label_en\": \"Locking Reason\", \"locking_reason_label_es\": \"Razón Bloqueo\"\r\n    }\r\n    if (this.grid.items[i - 1].is_locked) {\r\n      this.rowTooltip.style.backgroundColor = \"#24C0EB\"\r\n      this.rowTooltip.style.visibility = \"visible\"\r\n      let txtValue=labels['locking_reason_label_' + this.lang] + \": \"\r\n      if (this.grid.items[i - 1].locking_reason===undefined||this.grid.items[i - 1].locking_reason[\"message_\" + this.lang]===undefined){\r\n        txtValue=txtValue+\"undefined\"\r\n      }else{\r\n        txtValue=txtValue+this.grid.items[i - 1].locking_reason[\"message_\" + this.lang]\r\n      }\r\n      this.rowTooltip.textContent = txtValue\r\n    } else if (this.grid.items[i - 1].warning_reason) {\r\n      this.rowTooltip.style.backgroundColor = \"#D6E9F8\"\r\n      this.rowTooltip.style.visibility = \"visible\"\r\n      let txtValue=labels['warning_reason_label_' + this.lang] + \": \"\r\n      if (this.grid.items[i - 1].warning_reason===undefined||this.grid.items[i - 1].warning_reason[\"message_\" + this.lang]===undefined){\r\n        txtValue=txtValue+\"undefined\"\r\n      }else{\r\n        txtValue=txtValue+this.grid.items[i - 1].warning_reason[\"message_\" + this.lang]\r\n      }\r\n    }\r\n  }\r\n\r\n  hideLockReason() {\r\n    this.rowTooltip.style.visibility = \"hidden\"\r\n  }\r\n\r\n  detailRenderer(result) {\r\n    //console.log('detailRenderer', result)\r\n    let labels = {\r\n      \"warning_reason_label_en\": \"Warning Reason\", \"warning_reason_label_es\": \"Razón Aviso\",\r\n      \"locking_reason_label_en\": \"Locking Reason\", \"locking_reason_label_es\": \"Razón Bloqueo\"\r\n    }\r\n    return html`\r\n      <div style=\"text-align:center;font-size:12px\">\r\n        <p>${result.spec_eval ?\r\n        html`${result.spec_eval == 'IN' ?\r\n          html`<mwc-icon style=\"color:green\">radio_button_checked</mwc-icon>` :\r\n          html`${result.spec_eval.toUpperCase().includes(\"OUT\") && result.spec_eval.toUpperCase().includes(\"SPEC\") ?\r\n            html`<mwc-icon style=\"color:red\">radio_button_checked</mwc-icon>` :\r\n            html`<mwc-icon style=\"color:orange\">radio_button_checked</mwc-icon>`\r\n            }`\r\n          }` :\r\n        html`<img style=\"height:24px; width: 24px;\" src=\"https://upload.wikimedia.org/wikipedia/commons/9/96/Button_Icon_White.svg\">`\r\n      }</p>\r\n        <p>${this.lang == \"en\" ? \"Method\" : \"Método\"}: ${result.method_name} (${result.method_version})</p>\r\n        <p>Range Rule: ${result.spec_rule_info[0].ruleRepresentation}</p>\r\n        <p>Range Evaluation: ${result.spec_eval} (${result.spec_eval_detail})</p>\r\n      ${result.is_locked ?\r\n        html`<p style=\"color:rgb(255 8 8)\">${labels['locking_reason_label_' + this.lang]}: ${result.locked_reason}</p>` : nothing\r\n      }\r\n        ${result.warning_reason ?\r\n        html`<p style=\"color:#0085ff\">${labels['warning_reason_label_' + this.lang]}: ${result.warning_reason[\"message_\" + this.lang]}</p>` : nothing\r\n      }\r\n      </div>\r\n    `\r\n  }  \r\n\r\n  setCellListener() {\r\n    // alert('setCellListener')\r\n    //console.log('setCellListener')\r\n    if (this.grid===undefined||this.grid===null){return}\r\n    this.rowTooltip.style.display = \"block\"\r\n    this.rowTooltip.style.visibility = \"hidden\"\r\n    this.rowTooltip.style.fontSize = \"12px\"\r\n    this.rowTooltip.style.color = \"white\"\r\n    let rows = this.grid.shadowRoot.querySelectorAll(\"tr[part=row]\")\r\n    rows.forEach((r, i) => {\r\n      if (i > 0 && this.grid.items[i - 1]) {\r\n        r.removeEventListener('mouseenter', () => this.showLockReason(i))\r\n        r.removeEventListener('mouseleave', this.hideLockReason.bind(this))\r\n      }\r\n      if (i > 0 && this.grid.items[i - 1] && (this.grid.items[i - 1].is_locked || this.grid.items[i - 1].warning_reason)) {\r\n        r.addEventListener('mouseenter', () => this.showLockReason(i))\r\n        r.addEventListener('mouseleave', this.hideLockReason.bind(this))\r\n      }\r\n    })    \r\n  }\r\n\r\n  }\r\n  window.customElements.define('drag-box', DrapBox);"],"names":[],"sourceRoot":""}