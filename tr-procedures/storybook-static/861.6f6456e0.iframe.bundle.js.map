{"version":3,"file":"861.6f6456e0.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkFA;;;AAgBA;AACA;;;AAGA;;;;AAIA;;;;AAIA;;;;;;;;AAQA;;;;AAKA;;;;;;;AAqEA;AACA;AACA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACOA;AAyOA;AACA;;;;AAIA;AACA;AACA;AAEA;;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAIA;;AAEA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AAGA;;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AAQA;;;;;;;;;AAWA;;;;;;ACzeA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;;;;;AAKA;AAqFA;AACA;AACA;;;;AAIA;AACA;;;AAGA;;AAEA;AACA;AAEA;AACA;AACA;;AAEA;AACA;;;;AAIA;AAEA;;AAEA;;AAEA;AACA;;;;;;;;AAQA;;AAEA;;AAEA;;AAKA;;AAEA;;AAGA;AAGA;;;AAgHA;;;AAGA;AAEA;AACA;;AAEA;AAKA;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;;;;AAIA;;AAIA;AACA;AACA;;AAEA;AACA;;;;;AAMA;AACA;;;;AA/CA;;;AAuDA;AAzKA;;AAGA;AA7GA;AACA;AACA;AACA;AAEA;AACA;;AAEA;;AAEA;;AAIA;;AAEA;;;AAKA;;AAnDA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;;;;AAKA;AAmJA;;;;AAIA;;;AAGA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAIA;;AAEA;;;;;;AAjBA;;;;AA2BA;AAEA;;;AApLA;AA8HA;AAEA;AAKA;AACA;AACA;;;AAIA;;;;AAgDA;;;AAGA;AAEA;AACA;;AAEA;;AAEA;;AAKA;;AAEA;AAEA;AACA;AAIA;AACA;;;;AAtBA;;;AA8BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtJA;;;AAiFA;AACA;;;AAGA;AACA;AAGA;;;AAIA;AACA;;AAKA;AAMA;;AAEA;;;;AAIA;;;;AAIA;;;AAGA;;;AAGA;AACA;AACA;;;;AAKA;AAmBA;;AAEA;;AAEA;AACA;AAEA;AAGA;;AAEA;AACA;AANA;AAqBA;AACA;AACA;AAGA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AC3TA;AACA;AACA;AACA;;;;AAIA;AACA;;;AAGA;;;;;;;;AAQA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC4DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEA;AACA;AACA;;;;AAIA;AAEA;;AAIA;AACA;AAaA;AACA;AACA;;AAKA;;;;;AAYA;;;;;AAKA;AACA;;;;AAMA;;;;AAKA;;AAkBA;AAUA;AACA;AACA;AACA;;AAIA;AAGA;;AAKA;AA2DA;AAEA;AAEA;;;AAGA;AACA;AAGA;;;;AAIA;AACA;AAIA;;;;AAIA;AACA;AAUA;AAEA;AAEA;;AAEA;AACA;AAGA;;AAEA;AACA;AAIA;;;;AAIA;AACA;;AAcA;AAKA;AAEA;AAEA;;;AAGA;AACA;AAGA;AAEA;AAEA;;AAEA;AACA;;AAOA;;AAuDA;;AAIA;;AAIA;AAEA;;AAEA;AACA;;AAGA;AAEA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;;AAIA;AAEA;AACA;;;AAOA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAUA;;AAIA;;AAIA;AAEA;;AAEA;AACA;;AAGA;AAEA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;;AAIA;AAEA;AACA;;;AAOA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA0EA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzlBA;;AA2CA;;AAEA;AACA;;AAEA;;;;;AAMA;;AAEA;;AAGA;AACA;;AAEA;;AAEA;;AAGA;;AAEA;;AAIA;;AAQA;AACA;AACA;;;;AAKA;;AAEA;;AAGA;AACA;AACA;;AAEA;;;AAGA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnOA;;;ACcA;AACA;;;;;;AAwCA;AA/BA;;;AAIA;;AAEA;;;;;AAKA;;AAEA;AACA;;;AAIA;;AAEA;;;;AAKA;AAhDA;AC2UA;AAEA;AA4EA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpVA;AAEA;;;;AAIA;AACA;AACA;;;AAGA;;;;;;AAMA;AACA;;;AAGA;;;AAnBA;AAwBA;;;;ACpBA;;;AAKA;AAKA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6IA;;AAEA;;AAGA;AACA;AACA;AACA;;;AAGA;AAGA;AACA;AACA;AACA;;;AAKA;AACA;AAsBA;AAEA;AAEA;AAFA;;AAKA;AAEA;AACA;AACA;AACA;AALA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;;AAJA;AAQA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;;AAHA;AAMA;;;AAIA;AACA;AACA;AACA;;AAPA;;AAWA;;;AAIA;AACA;AACA;AACA;AACA;;AARA;AAWA;;AAGA;AACA;AACA;;AALA;AAQA;;AAGA;AACA;AACA;;AALA;AAQA;;AAGA;AACA;AACA;;AALA;AAQA;;AAGA;AACA;AACA;;AALA;AAQA;;AAGA;AACA;AACA;;AALA;AAQA;;AAGA;AACA;AACA;;AALA;AAQA;;AAGA;AACA;AACA;;AALA;AAQA;;AAGA;AACA;AACA;;AALA;AAQA;;AAGA;AACA;AACA;;AALA;AAQA;AAEA;;AAEA;AACA;AACA;;;AANA;AAUA;AAEA;;AAEA;AACA;AACA;;;AANA;AAUA;AAEA;;AAEA;AACA;AACA;;;AANA;AAUA;AAEA;;AAEA;AACA;AACA;;;AANA;AAUA;AAEA;;AAEA;AACA;AACA;;;AANA;AAUA;AAEA;;AAEA;AACA;AACA;;;AANA;AAUA;AAEA;;AAEA;AACA;AACA;;;AANA;AAUA;AAEA;;AAEA;AACA;AACA;;;AANA;AAUA;AAEA;;AAEA;AACA;AACA;;;AANA;AAUA;AAEA;;AAEA;AACA;AACA;;;AANA;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;AACA;AADA;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;;AAQA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;AACA;;AAJA;;AAUA;;AAEA;AAEA;AACA;;AAHA;AAQA;AAEA;AACA;;AAHA;AAQA;AAEA;AACA;;AAHA;;AASA;AAEA;AACA;;AAHA;AAQA;AAEA;AACA;;AAHA;;;AAWA;AACA;AACA;AACA;;AAnjBA;AAEA;AAEA;;AAGA;AACA;;AAGA;AACA;AACA;AACA;;;;;AAMA;;;;AAqiBA;;AAkBA;AACA;;AAIA;;AAKA;AACA;;AAIA;;AC7yBA;;;;;;AAMA;AACA;AACA;;AAEA;;;;;AAKA;;AAEA;AACA;AACA;;;;AAKA;;AAQA;AACA;;;;;AAKA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;;;AAKA;ACtFA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AADA;;;;AAQA;AACA;AACA;AACA;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;AAKA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;AAIA;AACA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1EA;;;;;;;ACkCA;;;;AAIA;;AAGA;AACA;AAGA;AACA;;AAEA;AAEA;AACA;;;;;;;;AAUA;AAIA;AACA;AAIA;;AAGA;AACA;;;AAIA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAIA;;;AAGA;AACA;AACA;;;;AAKA;;AAIA;AACA;;;AAIA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAIA;;AAEA;AACA;AACA;AACA;;;;AAKA;;AAIA;AACA;;;AAIA;AACA;AACA;;AAEA;;AAEA;;;;;AAMA;;;AAGA;AAEA;AACA;;;;AAKA;AACA;AACA;AACA;;;;;AAMA;AACA;AACA;;AAEA;;AAEA;;;AAIA;AACA;AACA;AACA;;;;;AAOA;;AAIA;;AAEA;;;;;;;AAOA;AACA;AAEA;AACA;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnHA;AAGA;;;AAGA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;;AAEA;;;;;;AAMA;;AAEA;;;;AAKA;;;;;;AAoCA;AACA;AACA;AACA;;;AAMA;;;;AAOA;AACA;AACA;;AAEA;;;AAKA;AAsTA;AACA;;AAIA;AAgRA;AAGA;AACA;AACA;AAKA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/pBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyHA;;;AAOA;;;;;AAOA;;;AAGA;;AAIA;AAGA;;AAIA;;;;;;AAOA;AAeA;;AAEA;AACA;;AAEA;AAEA;;AAIA;;AAKA;;AAGA;;;AA0BA;AACA;AACA;AAMA;;;;;AAOA;;;AAKA;;AAKA;AAgEA;;AAGA;AAUA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;;;;AAKA;;;AAIA;AAsBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAqGA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAEA;;AAKA;AACA;AACA;;;;;AAMA;AAIA;;AAGA;;AAEA;AACA;;AAGA;;;AAKA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;AAIA;AAIA;;AAIA;AACA;;AAGA;;AAGA;;AAEA;;;AAGA;AACA;;AAGA;;AAEA;;AAEA;;AAEA;;;;;AAMA;AAIA;;AAGA;AACA;AACA;;AAEA;AACA;;;;AAKA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnhBA;AAEA;AAEA;;AAGA;AACA;;;AAJA;AAQA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;;AAIA;AACA;;AALA;AAQA;;AAGA;AACA;AACA;;AALA;AAQA;;AAGA;AACA;AACA;;AALA;AAQA;;AAGA;AACA;AACA;;AALA;AAQA;;AAGA;AACA;AACA;;AALA;AAQA;;AAGA;AACA;AACA;;AALA;AAQA;;AAGA;AACA;AACA;;AALA;AAQA;;AAGA;AACA;AACA;;AALA;AAQA;;AAGA;AACA;AACA;;AALA;AAQA;;AAGA;AACA;AACA;;AALA;AAQA;AAEA;AACA;AACA;;;AAJA;AAQA;AAEA;AACA;AACA;;;AAJA;AAQA;AAEA;AACA;AACA;;;AAJA;AAQA;AAEA;AACA;AACA;;;AAJA;AAQA;AAEA;AACA;AACA;;;AAJA;AAQA;AAEA;AACA;AACA;;;AAJA;AAQA;AAEA;AACA;AACA;;;AAJA;AAQA;AAEA;AACA;AACA;;;AAJA;AAQA;AAEA;AACA;AACA;;;AAJA;AAQA;AAEA;AACA;AACA;;;AAJA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;AAOA;;AAGA;AACA;;AAJA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAlVA;AAwVA;AAwIA;AAIA;AChoBA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAOA;;AAgGA;;AAIA;;AAEA;AAGA;;;AAMA;;;AAyBA;;;AAIA;;AAQA;;AAIA;AACA;AAVA;AAyBA;;AAIA;AACA;;AALA;AASA;;;;;;;;;;;;;;;;;;;;;AA0BA;AAGA;AAGA;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;AAGA;;;AAGA;;AAEA;;AAIA;;;AAOA;;AAEA;;;AAMA;;AAIA;;;;;;AAOA;AAGA;;AAIA;AAGA;;;AAIA;;;AAMA;;;AAMA;;;AAMA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;;;;AAMA;;AAIA;;;;;;AAMA;;AAGA;AASA;AAUA;;;;;;;AAvIA;;;;;;;;AAoKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoGA;AAGA;AACA;;;;;;;;AAQA;;AAEA;AAGA;;;;;;AAUA;;AAEA;;;;AAIA;AAGA;;;AAKA;;;;;;AAOA;AAGA;;AAIA;AAGA;AAKA;;;;AAMA;;;;AAOA;;;;AAOA;;;AAMA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;;;;AAMA;;AAKA;;;;;;AASA;;AAGA;AASA;AAaA;;;;;;;;AA5JA;;;;;;;AA2LA;AA6KA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmIA;AAGA;AACA;;;;AAIA;;;AAGA;AAGA;AAGA;;;AAMA;AACA;;AAGA;;;;;;;;AASA;AAGA;AAGA;;AAIA;AAGA;AAIA;;;;AAQA;;AAEA;AAGA;;;;AAMA;AAKA;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;AAsBA;AAEA;AAMA;AACA;AACA;AAGA;AAMA;AAEA;AAGA;AAGA;AA2FA;;AAIA;;;AAIA;;;AAIA;AAOA;;AAIA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiKA;AACA;;AAKA;;;AAGA;;;;AAIA;;AAIA;AAEA;AAGA;AAGA;AAgDA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;;;AAGA;;AAEA;;AAEA;AACA;;;;;AASA;AAEA;;;AA7IA;;;AAKA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;;;;AAKA;;;;;;;;AAQA;AAEA;AAEA;AAEA;;;AAGA;;AAGA;;;;;;;;;;;;AAiHA;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AAKA;AACA;AACA;AACA;;;AAGA;AACA;;;AAIA;AAeA;AACA;AACA;;AAEA;AACA;;;AAlBA;AAEA;AACA;AACA;;;AAKA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AAGA;;;AAGA;AAMA;;;;;;;AAYA;;AAMA;AAKA;AACA;AAMA;AASA;;;;;;AAeA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;AAxHA;;AAiIA;AAoCA;AAGA;;AAEA;AACA;AACA;AACA;AACA;;;AAjBA;;;AA6OA;;;AAQA;;;;AAIA;;;AAQA;;AAGA;;;AAUA;;;AAGA;;;;;AAOA;AAGA;AACA;;AAEA;AACA;AACA;;;AAIA;AAEA;AAGA;;AAGA;AAGA;;;;;;AAQA;AAIA;AACA;AACA;;;;;;;;AAUA;AAIA;AACA;AACA;;;;AAOA;AAGA;;AAMA;AACA;AAGA;AAIA;AAOA;AACA;AACA;AAGA;AAEA;AAIA;;;AAKA;;;;AAKA;AAEA;;AAEA;;;;;AAOA;;;;AAiEA;;;AAGA;;;;;AAOA;;;AAQA;;;AAGA;;;;AAUA;;;AAGA;;;;;AAOA;;;AAQA;;;;AAIA;;;;AAIA;;;AAQA;;;;AAUA;;;AAGA;;;;;AAOA;;;AAQA;;;;AAIA;;;AAQA;;;;;;AAMA;;;AAGA;AA2UA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiKA;;;AAIA;AACA;;;;AAIA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;;;;AAMA;;;AAGA;AACA;;AAKA;AACA;;;AAGA;AACA;;AAIA;;AAEA;;;AAGA;AACA;;AAEA;AAEA;;;;;AAKA;AAGA;;AAIA;AAUA;AACA;;AAEA;AACA;;AAEA;AAEA;;;AAGA;AAEA;AA9BA;;;;;;;AAwCA;AAMA;AACA;AACA;AACA;;AAGA;AAKA;AACA;AACA;AACA;AAEA;AAoEA;AACA;AACA;AACA;AAEA;;;;;;;AC3wGA;AA+DA;AAMA;AAIA;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;;AAGA;;AAKA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;;AAKA;;AAGA;AACA;AACA;;;;AAMA;;;;;;;;;;;;;;AAwBA;AACA;;;;AAMA;;;;;;;;;;;;;;AA2CA;AACA;;;;AAMA;AAiEA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAGA;AAKA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxUA;;;AAsBA;AAEA;AACA;AACA;AACA;AACA;;;AAKA;;;;;;;ACvDA;;;;;AA8BA;;;;AAKA;AAOA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;AAGA;;;AAGA;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAKA;ACvEA;AACA;AACA;;;;AAIA;AAEA;;AAIA;;;;AAKA;AAcA;AACA;AACA;;;;AAIA;AAEA;;AAIA;;;;AAKA;AAMA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAEA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;;AAIA;;;AA4FA;AACA;AACA;AACA;;;AAGA;AAEA;AACA;AAGA;AACA;AAEA;ACrKA;AACA;;;;;;;AAOA;AACA;;;AAGA;AACA;;AAIA;AACA;;AAIA;;;;;AAYA","sources":["webpack://@trazit/tr-procedures/./.yalc/@trazit/cred-dialog/.yalc/@trazit/tr-dialog/src/TrDialog.js","webpack://@trazit/tr-procedures/./src/components/Audit/audit-dialog.js","webpack://@trazit/tr-procedures/./src/components/DragDropBox/dragdropbox.template.js","webpack://@trazit/tr-procedures/./src/components/GenericDialogs/TrazitCredentialsDialogs.js","webpack://@trazit/tr-procedures/./src/components/uploadButton/uploadButton.template.js","webpack://@trazit/tr-procedures/./src/components/GenericDialogs/TrazitEnterResultWithSpec.js","webpack://@trazit/tr-procedures/./src/components/Tree/tree-viewfran.js","webpack://@trazit/tr-procedures/./src/components/speclimitquantitative/index.js","webpack://@trazit/tr-procedures/./src/components/speclimitquantitative/speclimitquantitative.template.js","webpack://@trazit/tr-procedures/./src/form_fields/lists-functions.js","webpack://@trazit/tr-procedures/./src/form_fields/twolistslinked.js","webpack://@trazit/tr-procedures/./src/components/GenericDialogs/TrazitGenericDialogs.js","webpack://@trazit/tr-procedures/./src/components/GenericDialogs/TrazitInvestigationsDialog.js","webpack://@trazit/tr-procedures/./src/components/GenericDialogs/TrazitReactivateObjectsDialog.js","webpack://@trazit/tr-procedures/./src/components/MultiSelect/multiselect.template.js","webpack://@trazit/tr-procedures/./src/components/DependencyForm/app/index.js","webpack://@trazit/tr-procedures/./src/components/DependencyForm/app/app.template.js","webpack://@trazit/tr-procedures/./src/components/GenericDialogs/TrazitTestScriptNewStepDialog.js","webpack://@trazit/tr-procedures/./src/components/Views/ReadOnlyTableParts.js","webpack://@trazit/tr-procedures/./src/components/GenericDialogs/TrazitFormsElements.js","webpack://@trazit/tr-procedures/./src/components/Views/DataViews.js","webpack://@trazit/tr-procedures/./src/components/grid_with_buttons/GridFunctions.js","webpack://@trazit/tr-procedures/./src/components/grid_with_buttons/gridCellTooltip.js","webpack://@trazit/tr-procedures/./src/components/grid_with_buttons/tableRowDetail.js","webpack://@trazit/tr-procedures/./src/module_env_monit/Dialogs/ModuleEnvMonitDialogsMicroorganism.js","webpack://@trazit/tr-procedures/./src/module_env_monit/ModuleEnvMonitClientMethods.js"],"sourcesContent":["import { html, css } from 'lit';\r\nimport { cssClasses } from '@material/dialog/constants';\r\nimport { classMap } from 'lit/directives/class-map.js';\r\nimport { Dialog } from '@material/mwc-dialog';\r\nimport '@material/mwc-button';\r\nimport '@material/mwc-icon';\r\n\r\nexport class TrDialog extends Dialog {\r\n  static get styles() {\r\n    return [\r\n      super.styles,\r\n      css`\r\n      mwc-icon.corner {\r\n        cursor: pointer;\r\n        --mdc-icon-size: 15px;\r\n        margin: auto 5px;\r\n        color: rgb(94, 145, 186);\r\n      }\r\n      ::slotted(mwc-icon) {\r\n        cursor: pointer;\r\n        --mdc-icon-size: 15px;\r\n      }\r\n      mwc-icon[hidden] {\r\n        display: none;\r\n      }\r\n      div[hidden] {\r\n        display: none;\r\n      }\r\n      /*Resizeable*/\r\n\r\n      .mdc-dialog__surface .resizer-right {\r\n        width: 5px;\r\n        height: 100%;\r\n        background: transparent;\r\n        position: absolute;\r\n        right: 0;\r\n        bottom: 0;\r\n        cursor: e-resize;\r\n      }\r\n\r\n      .mdc-dialog__surface .resizer-bottom {\r\n        width: 100%;\r\n        height: 5px;\r\n        background: transparent;\r\n        position: absolute;\r\n        right: 0;\r\n        bottom: 0;\r\n        cursor: n-resize;\r\n      }\r\n\r\n      .mdc-dialog__surface .resizer-both {\r\n        width: 5px;\r\n        height: 5px;\r\n        background: transparent;\r\n        z-index: 10;\r\n        position: absolute;\r\n        right: 0;\r\n        bottom: 0;\r\n        cursor: nw-resize;\r\n      }\r\n\r\n      /*NOSELECT*/\r\n\r\n      .mdc-dialog__surface * {\r\n        -webkit-touch-callout: none; /* iOS Safari */\r\n        -webkit-user-select: none; /* Safari */\r\n        -khtml-user-select: none; /* Konqueror HTML */\r\n        -moz-user-select: none; /* Firefox */\r\n        -ms-user-select: none; /* Internet Explorer/Edge */\r\n        user-select: none; /* Non-prefixed version, currently\r\n                                        supported by Chrome and Opera */\r\n      }\r\n\r\n      .mdc-dialog__surface {\r\n        max-width: 100% !important;\r\n      }\r\n\r\n      .popup-header {\r\n        cursor: move;\r\n      }\r\n      `\r\n    ];\r\n  }\r\n\r\n  render() {\r\n    const classes = {\r\n      [cssClasses.STACKED]: this.stacked,\r\n    };\r\n    let heading = html``;\r\n    if (this.heading) {\r\n      heading = this.renderHeading();\r\n    }\r\n    const actionsClasses = {\r\n      'mdc-dialog__actions': !this.hideActions,\r\n    };\r\n    return html`\r\n    <style>\r\n      :host {\r\n        --mdc-shape-medium: ${this.dialogShape};\r\n        --mdc-dialog-z-index: ${this.zIndex};\r\n      }\r\n    </style>\r\n    <div class=\"mdc-dialog ${classMap(classes)}\" role=\"alertdialog\" aria-modal=\"true\" aria-labelledby=\"title\"\r\n      aria-describedby=\"content\">\r\n      <div class=\"mdc-dialog__container\">\r\n        <div class=\"mdc-dialog__surface\" style=\"top: 0px; left: 0px\">\r\n          ${heading}\r\n          <div id=\"content\" class=\"mdc-dialog__content\">\r\n            <slot id=\"contentSlot\"></slot>\r\n          </div>\r\n          <footer id=\"actions\" class=\"${classMap(actionsClasses)}\">\r\n            <span>\r\n              <slot name=\"secondaryAction\"></slot>\r\n            </span>\r\n            <span>\r\n              <slot name=\"primaryAction\"></slot>\r\n            </span>\r\n          </footer>\r\n          ${this.cornerButton()}\r\n        </div>\r\n      </div>\r\n      <div class=\"mdc-dialog__scrim\"></div>\r\n    </div>`;\r\n  }\r\n\r\n  get mdcDialog() {\r\n    return this.shadowRoot.querySelector(\".mdc-dialog\")\r\n  }\r\n\r\n  get mdcScrim() {\r\n    return this.shadowRoot.querySelector(\".mdc-dialog__scrim\")\r\n  }\r\n\r\n  get dialogSurface() {\r\n    return this.shadowRoot.querySelector(\".mdc-dialog__surface\")\r\n  }\r\n\r\n  get dialogContent() {\r\n    return this.shadowRoot.querySelector(\"#content\")\r\n  }\r\n\r\n  get dialogHeader() {\r\n    return this.shadowRoot.querySelector(\".popup-header\");\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      dialogShape: { type: String },\r\n      zoomLabel: { type: String },\r\n      expandLabel: { type: String },\r\n      hideMin: { type: Boolean, reflect: true },\r\n      hideZoom: { type: Boolean, reflect: true },\r\n      hideXtoClose: { type: Boolean, reflect: true },\r\n      zIndex: { type: Number }\r\n    };\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.dialogShape = \"5px\"\r\n    this.zoomLabel = \"zoom_out_map\"\r\n    this.expandLabel = \"expand_more\"\r\n    this.hideMin = false;\r\n    this.hideZoom = false;\r\n    this.hideXtoClose = false;\r\n    this.top = \"0px\";\r\n    this.left = \"0px\";\r\n    this.width = \"0px\";\r\n    this.height = \"0px\";\r\n    this.zIndex = 7;\r\n  }\r\n\r\n  firstUpdated() {\r\n    super.firstUpdated()\r\n    this.shadowRoot.querySelector(\".mdc-dialog__surface\").style.padding = \"20px\"\r\n    this.myinitialize();\r\n  }\r\n\r\n  myinitialize() {\r\n    this.initResizeElement();\r\n    this.initDragElement();\r\n  }\r\n\r\n  cornerButton() {\r\n    //alert('hideXtoClose '+this.hideXtoClose)\r\n    return html`\r\n      <div class=\"popup-header\" style=\"position: absolute; top: 0px; left: 0px; width: 100%; height: 30px;\">\r\n        <div style=\"position: absolute; top: 10px; left: 10px;\">\r\n          <slot name=\"topLeft\"></slot>\r\n        </div>\r\n        <div style=\"position: absolute; top: 10px; right: 10px;\">\r\n          <slot name=\"icon1\" style=\"margin-right: 5px;\"></slot>\r\n          <mwc-icon ?hidden=${this.hideMin} class=\"corner\" @click=${this.minimize}>${this.expandLabel}</mwc-icon>\r\n          <mwc-icon ?hidden=${this.hideZoom} class=\"corner\" @click=${this.zoomOut}>${this.zoomLabel}</mwc-icon>\r\n          <mwc-icon ?hidden=${this.hideXtoClose} class=\"corner\" dialogAction=\"decline\">close</mwc-icon>\r\n        </div>\r\n      </div>\r\n    `\r\n  }\r\n\r\n  show() {\r\n    if (this.dialogContent!==undefined&&this.dialogContent!==null){\r\n      this.dialogContent.style.overflow = \"auto\";\r\n    }\r\n    if (this.dialogSurface!==undefined&&this.dialogSurface!==null){\r\n      this.dialogSurface.style.overflow = \"auto\";\r\n      this.dialogSurface.style.top = \"0\";\r\n      this.dialogSurface.style.height = \"auto\";\r\n    }\r\n      this.expandLabel = \"expand_more\";\r\n    super.show()\r\n  }\r\n\r\n  initResizeElement() {\r\n    let parentPopup = null;\r\n    let resizer = null;\r\n\r\n    let startX, startY, startWidth, startHeight;\r\n\r\n    let right = document.createElement(\"div\");\r\n    right.className = \"resizer-right\";\r\n    this.dialogSurface.appendChild(right);\r\n    right.addEventListener(\"mousedown\", initDrag, false);\r\n    right.parentPopup = this.dialogSurface;\r\n\r\n    let bottom = document.createElement(\"div\");\r\n    bottom.className = \"resizer-bottom\";\r\n    this.dialogSurface.appendChild(bottom);\r\n    bottom.addEventListener(\"mousedown\", initDrag, false);\r\n    bottom.parentPopup = this.dialogSurface;\r\n\r\n    let both = document.createElement(\"div\");\r\n    both.className = \"resizer-both\";\r\n    this.dialogSurface.appendChild(both);\r\n    both.addEventListener(\"mousedown\", initDrag, false);\r\n    both.parentPopup = this.dialogSurface;\r\n\r\n    function initDrag(e) {\r\n      parentPopup = this.parentPopup;\r\n      resizer = this;\r\n\r\n      startX = e.clientX;\r\n      startY = e.clientY;\r\n      startWidth = parseInt(\r\n        document.defaultView.getComputedStyle(parentPopup).width,\r\n        10\r\n      );\r\n      startHeight = parseInt(\r\n        document.defaultView.getComputedStyle(parentPopup).height,\r\n        10\r\n      );\r\n      document.documentElement.addEventListener(\"mousemove\", doDrag, false);\r\n      document.documentElement.addEventListener(\"mouseup\", stopDrag, false);\r\n    }\r\n\r\n    function doDrag(e) {\r\n      if(resizer.classList.contains('resizer-right') || resizer.classList.contains('resizer-both')) \r\n        parentPopup.style.width = startWidth + (e.clientX - startX) * 2 + \"px\";\r\n      if(resizer.classList.contains('resizer-bottom') || resizer.classList.contains('resizer-both')) \r\n        parentPopup.style.height = startHeight + (e.clientY - startY) * 2 + \"px\";\r\n    }\r\n\r\n    function stopDrag() {\r\n      document.documentElement.removeEventListener(\"mousemove\", doDrag, false);\r\n      document.documentElement.removeEventListener(\"mouseup\", stopDrag, false);\r\n    }\r\n  }\r\n\r\n  initDragElement() {\r\n    let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\r\n    let element = null;\r\n    let currentZIndex = 100; //TODO reset z index when a threshold is passed\r\n    \r\n    this.dialogSurface.onmousedown = function() {\r\n      this.style.zIndex = \"\" + ++currentZIndex;\r\n    };\r\n\r\n    if (this.dialogHeader) {\r\n      this.dialogHeader.parentPopup = this.dialogSurface;\r\n      this.dialogHeader.onmousedown = dragMouseDown;\r\n    }\r\n  \r\n    function dragMouseDown(e) {\r\n      element = this.parentPopup;\r\n      element.style.zIndex = \"\" + ++currentZIndex;\r\n  \r\n      e = e || window.event;\r\n      // get the mouse cursor position at startup:\r\n      pos3 = e.clientX;\r\n      pos4 = e.clientY;\r\n      document.onmouseup = closeDragElement;\r\n      // call a function whenever the cursor moves:\r\n      document.onmousemove = elementDrag;\r\n    }\r\n  \r\n    function elementDrag(e) {\r\n      if (!element) {\r\n        return;\r\n      }\r\n  \r\n      e = e || window.event;\r\n      // calculate the new cursor position:\r\n      pos1 = pos3 - e.clientX;\r\n      pos2 = pos4 - e.clientY;\r\n      pos3 = e.clientX;\r\n      pos4 = e.clientY;\r\n      // set the element's new position:\r\n      element.style.top = parseInt(element.style.top, 10) - pos2 + \"px\";\r\n      element.style.left = parseInt(element.style.left, 10) - pos1 + \"px\";\r\n    }\r\n  \r\n    function closeDragElement() {\r\n      /* stop moving when mouse button is released:*/\r\n      document.onmouseup = null;\r\n      document.onmousemove = null;\r\n    }\r\n  }\r\n\r\n  minimize() {\r\n    this.dialogSurface.style.minWidth = \"auto\";\r\n    this.mdcDialog.style.minWidth = \"auto\";\r\n    this.dialogShape = \"5px\";\r\n    this.dialogSurface.style.height = \"auto\";\r\n    this.mdcDialog.style.height = \"100%\";\r\n    this.mdcScrim.style.height = \"100%\";\r\n    this.zoomLabel = \"zoom_out_map\"\r\n\r\n    if (this.expandLabel == \"expand_more\") {\r\n      this.dialogContent.style.overflow = \"hidden\";\r\n      this.dialogSurface.style.overflow = \"hidden\";\r\n      this.dialogSurface.style.top = \"45vh\";\r\n      this.dialogSurface.style.height = \"0\";\r\n      this.expandLabel = \"expand_less\";\r\n    } else {\r\n      this.dialogContent.style.overflow = \"auto\";\r\n      this.dialogSurface.style.overflow = \"auto\";\r\n      this.dialogSurface.style.top = \"0\";\r\n      this.dialogSurface.style.height = \"auto\";\r\n      this.expandLabel = \"expand_more\";\r\n    }\r\n  }\r\n\r\n  zoomOut() {\r\n    if (this.zoomLabel == \"zoom_out_map\") {\r\n      this.top = this.dialogSurface.style.top;\r\n      this.left = this.dialogSurface.style.left;\r\n      this.width = this.dialogSurface.style.width;\r\n      this.height = this.dialogSurface.style.height;\r\n      this.dispatchEvent(new CustomEvent(\"zoom-out\"))\r\n      this.dialogShape = \"0px\";\r\n      this.dialogSurface.style.height = \"100vh\";\r\n      this.dialogSurface.style.top = \"0px\";\r\n      this.dialogSurface.style.left = \"0px\";\r\n      this.mdcDialog.style.height = \"auto\";\r\n      this.dialogSurface.style.minWidth = \"100vw\";\r\n      this.mdcDialog.style.minWidth = \"100vw\";\r\n      this.mdcScrim.style.height = \"auto\";\r\n      this.zoomLabel = \"zoom_in_map\"\r\n      this.expandLabel = \"expand_more\";\r\n    } else {\r\n      this.dispatchEvent(new CustomEvent(\"zoom-in\"))\r\n      this.dialogSurface.style.minWidth = \"auto\";\r\n      this.mdcDialog.style.minWidth = \"auto\";\r\n      this.dialogShape = \"5px\";\r\n      this.dialogSurface.style.height = \"auto\";\r\n      this.mdcDialog.style.height = \"100%\";\r\n      this.mdcScrim.style.height = \"100%\";\r\n      this.zoomLabel = \"zoom_out_map\"\r\n      this.dialogSurface.style.top = this.top;\r\n      this.dialogSurface.style.left = this.left;\r\n      this.dialogSurface.style.width = this.width;\r\n      this.dialogSurface.style.height = this.height;\r\n    }\r\n  }\r\n}\r\n","import { LitElement, html, css, nothing } from 'lit';\r\nimport { Layouts } from '@collaborne/lit-flexbox-literals';\r\n//import { CredDialog } from '@trazit/cred-dialog';\r\nimport '@material/mwc-icon';\r\nimport '@spectrum-web-components/tooltip/sp-tooltip.js';\r\nimport '@trazit/tr-dialog/tr-dialog';\r\nimport {ButtonsFunctions} from '../Buttons/ButtonsFunctions';\r\nimport { ProceduresModel } from '../../ProceduresModel';\r\nimport {TrazitCredentialsDialogs} from '../GenericDialogs/TrazitCredentialsDialogs';\r\nimport { ActionsFunctions } from '../Actions/ActionsFunctions';\r\nimport '../../components/Audit/audit-dialog';\r\nconst langConfig = {\r\n  \"actionName\": {    \"label_en\": \"Action Name\",    \"label_es\": \"Acción\"  },\r\n  \"performedOn\": {    \"label_en\": \"Performed on\",    \"label_es\": \"Realizado el\"  },\r\n  \"reviewedOn\": {    \"label_en\": \"Reviewed on\",    \"label_es\": \"Revisado el\"  },\r\n  \"auditId\": {    \"label_en\": \"Audit Id\",    \"label_es\": \"Id Auditoría\"  },\r\n  \"fieldsUpdate\": {    \"label_en\": \"Fields updated\",    \"label_es\": \"Campos modificados\"  },\r\n  \"by\": {    \"label_en\": \"By\",    \"label_es\": \"Por\"  },\r\n  \"sign\": {    \"label_en\": \"Sign\",    \"label_es\": \"Firmar\"  }\r\n}\r\nimport {DialogsFunctions} from '../GenericDialogs/DialogsFunctions';\r\nexport class AuditDialog extends ActionsFunctions(TrazitCredentialsDialogs(ButtonsFunctions(DialogsFunctions(LitElement)))) {\r\n  static get styles() {\r\n    return [\r\n      Layouts,\r\n      css`\r\n        :host {\r\n          font-family:Montserrat;\r\n        }      \r\n        tr-dialog {\r\n          --mdc-dialog-max-width: 90vw;\r\n          position: relative;\r\n          transition: opacity 0.2s ease-in-out;\r\n        }\r\n        tr-dialog[open] {\r\n          opacity: 1;\r\n        }\r\n        tr-dialog {\r\n          animation: bounce 0.5s ease-in-out;\r\n        }\r\n        @keyframes bounce {\r\n          0% { transform: translateY(-20px); }\r\n          50% { transform: translateY(10px); }\r\n          100% { transform: translateY(0); }\r\n        }\r\n        sp-tooltip[hidden] {\r\n          display: none;\r\n        }\r\n        sp-tooltip {\r\n          max-width: 100%;\r\n          width: 100%;\r\n          --spectrum-tooltip-info-background-color: rgba(36, 192, 235, 0.08);\r\n          color: #3f51b5;\r\n        }\r\n        sp-tooltip.sub {\r\n          --spectrum-tooltip-info-background-color: rgba(36, 192, 235, 0.09);\r\n        }\r\n        mwc-icon.sign {\r\n          cursor: pointer;\r\n        }\r\n        mwc-icon[hidden] {\r\n          display: none;\r\n        }\r\n        div[hidden] {\r\n          display: none;\r\n        }\r\n        .ball {\r\n          margin-left: -13px;\r\n          cursor: pointer;\r\n          background: transparent;\r\n        }\r\n        .column-list {\r\n          -webkit-columns: 3; /* Number of columns */\r\n          -moz-columns: 3;\r\n          columns: 3;\r\n          -webkit-column-gap: 10px; /* Spacing between columns */\r\n          -moz-column-gap: 10px;\r\n          column-gap: 10px;\r\n          list-style-type: none;\r\n          padding: 10px 0px 0px;\r\n          margin: 0px;\r\n        }\r\n\r\n        @media screen and (max-width: 890px) {\r\n          .column-list {\r\n            -webkit-columns: 2; /* Number of columns */\r\n            -moz-columns: 2;\r\n            columns: 2;\r\n          }\r\n        }\r\n\r\n        @media screen and (max-width: 530px) {\r\n          .column-list {\r\n            -webkit-columns: 1; /* Number of columns */\r\n            -moz-columns: 1;\r\n            columns: 1;\r\n          }\r\n        }\r\n        \r\n        .column-list li {\r\n          display: inline-block;\r\n          width: 100%;\r\n          margin-bottom: 10px;\r\n          margin-left:30px;\r\n          hyphens: auto;\r\n          word-break: break-all;          \r\n        }\r\n\r\n        .d-flex {\r\n          display:flex !important;\r\n        }\r\n\r\n        .highlighed{\r\n          color:rgb(76, 175, 80);\r\n          font-size:1.21em;\r\n        }\r\n        span.relevantlabel{\r\n          font-weight: bold;\r\n          font-size: 16px;\r\n        }          \r\n        div.label{\r\n          font-weight: bold;         \r\n          width:124px;\r\n          text-align:right;\r\n          margin-right: 8px;\r\n        }\r\n        p{\r\n            font-weight: bold;\r\n            font-size: 15px;\r\n            margin-top:5px;\r\n            margin-left:4px;\r\n            margin-bottom:5px;\r\n        }   \r\n        .text-group {\r\n          display: flex;\r\n          align-items: center;\r\n          margin-top: 2px;\r\n          margin-bottom: 4px;\r\n          font-size:1em;\r\n        }        \r\n        .tglabelaction {\r\n          font-size: 1.2em;\r\n          width: 124px;\r\n          text-align: right;\r\n          margin-right: 8px;\r\n          flex-shrink:0;\r\n        }\r\n        .tglabel {\r\n          font-size: 1.2em;\r\n          width: 124px; \r\n          text-align: right;\r\n          margin-right: 8px;\r\n          flex-shrink:0;\r\n        }\r\n        .tgvalue {\r\n          font-size: 1.0em;\r\n        }\r\n        div.feldsupdatedregion{\r\n          border-color : rgba(153, 153, 153, 1);\r\n          border-left : 1px solid;\r\n          border-radius : 10px;\r\n        }\r\n        mwc-textfield {\r\n          border-style : Solid;\r\n          border-color : #999999;\r\n          border-color : rgba(153, 153, 153, 1);\r\n          border-width : 1px;\r\n          border-radius : 7px;\r\n          -moz-border-radius : 7px;\r\n          -webkit-border-radius : 7px;   \r\n          font-family : Montserrat;\r\n          font-weight : bold;\r\n          font-size : 19px;\r\n          background-color :  #FFFFFF;\r\n          background-color : rgb(255, 255, 255);  \r\n          --mdc-text-field-idle-line-color:#148CFA;\r\n          --mdc-text-field-outlined-idle-border-color: #148CFA;\r\n          --mdc-text-field-label-ink-color:  #148CFA;\r\n          --mdc-text-field-focused-label-color: #148CFA;\r\n          --mdc-theme-primary: #0465FB;\r\n        }\r\n        mwc-select {        \r\n          --mdc-theme-primary : rgba(36, 192, 235, 1);\r\n          --mdc-theme-text-primary-on-background : rgba(49, 130, 189, 1);\r\n          --mdc-select-ink-color: rgb(47, 47, 47);\r\n          --mdc-select-dropdown-icon-color:rgba(36, 192, 235, 1);\r\n          --mdc-select-hover-line-color:rgba(36, 192, 235, 1);\r\n          --mdc-notched-outline-border-color: rgba(186, 235, 248, 0.4);\r\n          --mdc-select-disabled-dropdown-icon-color:rgba(36, 192, 235, 1);\r\n  \r\n          font-family : Montserrat;\r\n          font-weight : bold;\r\n          font-size : 19px;\r\n        }\r\n        mwc-select.outlined {        \r\n          --mdc-theme-primary : rgba(36, 192, 235, 1);\r\n          --mdc-theme-text-primary-on-background : rgba(49, 130, 189, 1);\r\n          --mdc-select-ink-color: rgba(36, 192, 235, 1);\r\n          font-family : Montserrat;\r\n          font-weight : bold;\r\n          font-size : 19px;\r\n          background-color: 4fcad029;\r\n        }            \r\n      `\r\n    ];\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      lang: { type: String },\r\n      audits: { type: Array },\r\n      objectAuditParentRevisionMode: { type: Boolean },\r\n      objectAuditChildRevisionRequired: { type: Boolean },\r\n      selectedItems:{type: Array},\r\n      actionBeingPerformedModel:{type: Object},\r\n      auditAction:{type: Object},\r\n      procInstanceName: { type: String },\r\n      filterName: { type: String },\r\n      viewName: { type: String },\r\n      windowOpenable: { type: Boolean },\r\n      sopsPassed: { type: Boolean },\r\n      config:{type: Object},\r\n      localProceduresModels: { type: Object},\r\n      viewModelFromProcModel: { type: Object},\r\n      objectId: {type: String},\r\n      ObjectType: {type: String},\r\n      highlightFields: {type: Array}\r\n    };\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.lang = \"en\";\r\n    this.audits = [];\r\n    this.objectAuditParentRevisionMode = true;\r\n    this.objectAuditChildRevisionRequired = true;\r\n    this.selectedItems=[]\r\n    this.actionBeingPerformedModel={}\r\n    this.auditAction={}\r\n    this.config={}\r\n    this.localProceduresModels=ProceduresModel\r\n    this.viewModelFromProcModel={}\r\n    this.highlightFields=[]\r\n  }\r\n\r\n  updated(updates) {\r\n    if (updates.has('audits') && this.audits.length) {\r\n      this.setPrintContent()\r\n    }\r\n  }\r\n\r\n  setPrintContent() {\r\n    this.printObj = {\r\n      header: `${this.objectType} Audit for ${this.objectId}`,\r\n      content: this.setContent()\r\n    }\r\n  }\r\n\r\n  setContent() {\r\n    let session = JSON.parse(sessionStorage.getItem(\"userSession\"))\r\n    let sessionDate = session.appSessionStartDate\r\n    let sessionUser = session.header_info.first_name +\" \"+ session.header_info.last_name +\" (\"+ session.userRole +\")\"\r\n    let strContent = ``\r\n    this.audits.forEach(a => {\r\n      strContent += `<div><span class=\"relevantlabel\">${langConfig.actionName[\"label_\"+this.lang]}:</span> ${a.action_pretty_en ? a['action_pretty_'+ this.lang] : a.action_name}</div>`\r\n      strContent += `<span class=\"relevantlabel\">Performed On:</span> ${a.date} by ${a.person}`\r\n      strContent += `<br><span class=\"relevantlabel\">Reviewed On:</span> ${a.reviewed ? a.reviewed_on : ''}`\r\n      \r\n      strContent += `<li>audit_id: ${a.audit_id}</li>`\r\n      let fu = a.fields_updated ? Object.entries(a.fields_updated).map(([key, value]) => { return {k: key, v: value}}) : null\r\n      let strFu = ''\r\n      if (fu) {\r\n        strFu += `<ul>`\r\n        fu.forEach(d => {\r\n          strFu += `<li>${d.k}: ${d.v}</li>`\r\n        })\r\n        strFu += `</ul>`\r\n      } else {\r\n        strFu += `<br/>`\r\n      }      \r\n      strContent += `<p>fields_updated: </p> ${strFu}`\r\n      if (a.sublevel.length&&a.sublevel[0].date) {\r\n        strContent += `<div style=\"margin-left: 20px;\">`\r\n        a.sublevel.forEach(s=> {\r\n          strContent += `<p><div><span class=\"relevantlabel\">Action Name: </span>${s.action_pretty_en ? s['action_pretty_'+ this.lang] : s.action_name}</div>`\r\n          strContent += `<span class=\"relevantlabel\">Performed On: </span>${s.date} by ${s.person}`\r\n          strContent += `<br><span class=\"relevantlabel\">Reviewed On: </span>${s.reviewed ? s.reviewed_on : ''}`\r\n          fu = s.fields_updated ? Object.entries(s.fields_updated).map(([key, value]) => { return {k: key, v: value}}) : null\r\n          strFu = ''\r\n          if (fu) {\r\n            strFu += `<ul>`\r\n            fu.forEach(d => {\r\n              strFu += `<li>${d.k}: ${d.v}</li>`\r\n            })\r\n            strFu += `</ul>`\r\n          } else {\r\n            strFu += `<br/>`\r\n          }\r\n          strContent += `<br><p>fields_updated: </p> ${strFu}`\r\n        })\r\n        strContent += `</div>`\r\n      }\r\n      strContent += `<hr>`\r\n    })\r\n\r\n    let str = `\r\n      <style type=\"text/css\">\r\n      .page-header, .page-header-space {\r\n        height: 75px;\r\n        padding-top: 50px;\r\n      }\r\n      .page-header {\r\n        position: fixed;\r\n        top: 0mm;\r\n        width: 100%;\r\n        border-bottom: 1px solid black; /* for demo */\r\n      }\r\n      .page-footer, .page-footer-space {\r\n        height: 30px;\r\n        padding-top: 10px;\r\n      }\r\n      .page-footer {\r\n        position: fixed;\r\n        bottom: 0;\r\n        width: 100%;\r\n        border-top: 1px solid black; /* for demo */\r\n      }\r\n      .page {\r\n        page-break-after: always;\r\n      }\r\n      @page {\r\n        margin: 0mm 10mm 10mm;\r\n      }\r\n      @media print {\r\n        thead {display: table-header-group;} \r\n        tfoot {display: table-footer-group;}\r\n      }\r\n      .column-list {\r\n        -webkit-columns: 3; /* Number of columns */\r\n        -moz-columns: 3;\r\n        columns: 3;\r\n        -webkit-column-gap: 10px; /* Spacing between columns */\r\n        -moz-column-gap: 10px;\r\n        column-gap: 10px;\r\n        list-style-type: none;\r\n        padding: 0;\r\n        margin: 0;\r\n      }\r\n      \r\n      .column-list li {\r\n        display: inline-block;\r\n        width: 100%;\r\n        margin-bottom: 10px;\r\n      }\r\n      </style>\r\n\r\n      <div class=\"page-header\" style=\"text-align: center; font-weight: bold;\">\r\n        ${this.objectType} Audit for ${this.objectId} on ${sessionDate}\r\n      </div>\r\n\r\n      <div class=\"page-footer\">\r\n        ${sessionUser} on ${sessionDate} \r\n      </div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <td>\r\n              <!--place holder for the fixed-position header-->\r\n              <div class=\"page-header-space\"></div>\r\n            </td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              <!--*** CONTENT GOES HERE ***-->\r\n              <div class=\"page\">${strContent}</div>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n        <tfoot>\r\n          <tr>\r\n            <td>\r\n              <!--place holder for the fixed-position footer-->\r\n              <div class=\"page-footer-space\"></div>\r\n            </td>\r\n          </tr>\r\n        </tfoot>\r\n      </table>\r\n    `\r\n    return str\r\n  }\r\n\r\n  auditPrint() {\r\n    let printWindow = window.open('', '', 'fullscreen=yes');\r\n    printWindow.document.write(this.printObj.content);\r\n    printWindow.document.title = this.printObj.header;\r\n    printWindow.document.close();\r\n    setTimeout(function () {\r\n      printWindow.print();\r\n      printWindow.close();\r\n    }, 500);\r\n  }\r\n\r\n  firstUpdated() {\r\n    this.updateComplete.then(() => {\r\n      // manually backgrounding the dialog box\r\n      // password dialog\r\n      this.dialogSurface.style.padding = \"20px\";\r\n      this.dialogSurface.style.width = \"100vw\";\r\n    })\r\n  }\r\n\r\n  signButtonsMode(){        \r\n    let procList = JSON.parse(sessionStorage.getItem(\"userSession\")).procedures_list.procedures\r\n\r\n    if (this.procInstanceName===undefined||procList===undefined){return}\r\n    \r\n    let whichProc = procList.filter(p => p.procInstanceName == this.procInstanceName)            \r\n    if (whichProc===undefined||whichProc[0]===undefined){\r\n      this.objectAuditParentRevisionMode=true\r\n      this.objectAuditChildRevisionRequired=true\r\n      return\r\n    }\r\n    console.log('signButtonsMode', 'whichProc[0].audit_sign_mode', whichProc[0].audit_sign_mode)\r\n    this.objectAuditParentRevisionMode=true\r\n    this.objectAuditChildRevisionRequired =true\r\n    if (this.actionBeingPerformedModel!==undefined&&this.actionBeingPerformedModel.parentAuditBusinessRuleName!==undefined){\r\n      this.objectAuditParentRevisionMode = whichProc[0].audit_sign_mode[this.actionBeingPerformedModel.parentAuditBusinessRuleName] == \"DISABLED\" ? false : true\r\n    }\r\n    if (this.actionBeingPerformedModel!==undefined&&this.actionBeingPerformedModel.childAuditBusinessRuleName!==undefined){\r\n      this.objectAuditChildRevisionRequired = whichProc[0].audit_sign_mode[this.actionBeingPerformedModel.childAuditBusinessRuleName] == \"NO\" ? false : true\r\n    }\r\n//    alert('signButtonsMode '+this.procInstanceName+' objectAuditParentRevisionMode: '+this.objectAuditParentRevisionMode+' objectAuditChildRevisionRequired: '+this.objectAuditChildRevisionRequired )\r\n  }  \r\n  render() {\r\n    this.signButtonsMode()\r\n    return html`\r\n    ${this.credentialsDialog()}\r\n    <tr-dialog id=\"auditDialog\" ?open=${this.audits.length}  @closed=${()=>this.audits=[]} class=\"layout vertical\"\r\n      heading=\"\"\r\n      hideActions=\"\"\r\n      scrimClickAction=\"\">\r\n      ${this.countInfo()}\r\n      <mwc-icon slot=\"icon1\" @click=${this.auditPrint}>print</mwc-icon>\r\n      ${this.audits.map((a,i)=>\r\n        html`\r\n        <div id=\"wrap-${a.audit_id}\" class=\"layout horizontal flex center\" style=\"padding:2px 0 2px 0;border-left:3px solid #ccc\">\r\n          <mwc-icon class=\"ball\"\r\n            @click=${()=>this.showItem(a,i)}\r\n            style=\"color:${a.ballState==\"open\"?'#3f51b5':a.ballState==\"hide\"?'#eee':'#aaa'}\">radio_button_checked</mwc-icon>\r\n          <sp-tooltip open placement=\"right\" variant=\"info\" id=\"tooltip-${a.audit_id}\">            \r\n            <div class=\"layout horizontal flex\">\r\n              ${a.reviewed?\r\n                html`\r\n                  ${this.objectAuditParentRevisionMode==true?html`\r\n                    <div class=\"text-group\"><mwc-icon title=\"${langConfig.reviewedOn[\"label_\"+this.lang]}: ${a.reviewed_on}\">grading</mwc-icon></div>\r\n                  `:nothing}  \r\n                `:\r\n                html`\r\n                  ${this.objectAuditParentRevisionMode==true?html`\r\n                    <mwc-icon class=\"sign\" title=\"${langConfig.sign[\"label_\"+this.lang]}\"  @click=${()=>this.signAudit(a.audit_id)}>edit_note</mwc-icon>\r\n                  `:nothing}  \r\n                `\r\n              }\r\n              <div>\r\n                <div class=\"text-group\"><div class=\"tglabelaction\">${langConfig.actionName[\"label_\"+this.lang]}: </div><b>${a.action_pretty_en ? a['action_pretty_'+ this.lang] : a.action_name}</b></div>\r\n                <div class=\"text-group\">\r\n                  <div class=\"tglabel\">${langConfig.performedOn[\"label_\"+this.lang]}: </div>${a.date} ${langConfig.by[\"label_\"+this.lang]} ${a.person}\r\n                </div>\r\n\r\n                <div id=\"audit-${a.audit_id}\">\r\n                  <div class=\"text-group\">${a.reviewed?html`<br><div class=\"tglabel\">${langConfig.reviewedOn[\"label_\"+this.lang]}: ${a.reviewed_on}: </div>${a.reviewed_on}`:null}</div>\r\n                  <div class=\"text-group\"><div class=\"tglabel\">${langConfig.auditId[\"label_\"+this.lang]}: </div>${a.audit_id}</div>\r\n                  <div class=\"feldsupdatedregion\">\r\n                    <p>${langConfig.fieldsUpdate[\"label_\"+this.lang]}: </p> <ul class=\"column-list\"> ${a.fields_updated ? Object.entries(a.fields_updated).map(([key, value], i) => html`<li class=\"d-flex ${this.fieldToBeHighlighted(a, key)}\"><div class=\"label\">${key}:</div> <div>${value}</div></li>`) : ''}</ul>\r\n                  </div>\r\n                  ${a.sublevel.length&&a.sublevel[0].date?\r\n                  html`${a.sublevel.map((s,si)=>\r\n                    html`\r\n                      <div id=\"wrap-${s.audit_id}\" class=\"layout horizontal flex center\" style=\"margin:5px\">\r\n                        <mwc-icon class=\"ball\"\r\n                          @click=${()=>this.showSubItem(s,i,si)}\r\n                          style=\"color:${s.ballState==\"hide\"?'#eee':s.ballState==\"close\"?'#aaa':'#3f51b5'}\">radio_button_checked</mwc-icon>\r\n                        <sp-tooltip class=\"sub\" open placement=\"right\" variant=\"info\" id=\"tooltip-${s.audit_id}\">\r\n                          <div class=\"layout horizontal flex\">\r\n                            ${s.reviewed?\r\n                              html`\r\n                                ${this.objectAuditParentRevisionMode==true?html`\r\n                                  <mwc-icon title=\"reviewed_on: ${s.reviewed_on}\">grading</mwc-icon>\r\n                                `:nothing}\r\n                              `:\r\n                              html`\r\n                                ${this.objectAuditParentRevisionMode==true?html`\r\n                                  <mwc-icon class=\"sign\" title=\"${langConfig.sign[\"label_\"+this.lang]}\" \r\n                                    @click=${()=>this.signAudit(s.audit_id)}>edit_note</mwc-icon>\r\n                                `:nothing}\r\n                              `\r\n                            }\r\n                            <div>\r\n                              <div class=\"text-group\"><div class=\"tglabelaction\">${langConfig.actionName[\"label_\"+this.lang]}: </div>${s.action_pretty_en ? s['action_pretty_'+ this.lang] : s.action_name}</div>\r\n                              <div class=\"text-group\"><div class=\"tglabel\">${langConfig.performedOn[\"label_\"+this.lang]}: </div>${s.date} ${langConfig.by[\"label_\"+this.lang]} ${s.person}</div>\r\n                              <div id=\"audit-${s.audit_id}\">\r\n                                ${s.reviewed?html`<span class=\"relevantlabel\">Reviewed On: </span>${s.reviewed_on}<br>`:null}\r\n                                <div class=\"text-group\"><div class=\"tglabel\">${langConfig.auditId[\"label_\"+this.lang]}: </div>${s.audit_id}</div>\r\n                                <div class=\"feldsupdatedregion\">\r\n                                  <p>${langConfig.fieldsUpdate[\"label_\"+this.lang]}: </p> <ul class=\"column-list\">${s.fields_updated ? Object.entries(s.fields_updated).map(([key, value], i) => html`<li class=\"d-flex ${this.fieldToBeHighlighted(s, key)}\"><div class=\"label\">${key}:</div> <div>${value} </div></li>`) : ''}</ul>\r\n                                </div>\r\n                              </div>\r\n                            </div>  \r\n                          </div>\r\n                        </sp-tooltip>\r\n                      </div>`\r\n                  )}\r\n                  `: null}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </sp-tooltip>\r\n        \r\n        </div>\r\n        `\r\n      )}\r\n    </tr-dialog>\r\n    `;\r\n  }\r\n  fieldToBeHighlighted(auditRow, rowFldName){\r\n    //console.log('fieldToBeHighlighted', auditRow, rowFldName)\r\n    if (this.highlightFields==null){return \"\";}\r\n    if (this.highlightFields.length==0){return \"\";}\r\n    if (auditRow.table_name===undefined){return \"\";}\r\n    if (auditRow.action_name===undefined){return \"\";}\r\n    // Busca un registro en highlightFields que coincida con los criterios\r\n    for (let record of this.highlightFields) {\r\n      if ((record.table_name === auditRow.table_name && record.field_name === rowFldName &&\r\n          (record.action_name === auditRow.action_name || record.action_name === 'ALL'))) {\r\n          return \"highlighed\";\r\n      }\r\n    }\r\n    // Si no se encuentra ninguna coincidencia, retorna una cadena vacía\r\n    return \"\";    \r\n  }\r\n\r\n  signAudit(id) {\r\n    this.targetValue = {\r\n      auditId: id\r\n    }    \r\n    this.trazitNoDialogRequired(this.actionBeingPerformedModel.dialogInfo.action[0], this.selectedItems[0], this.targetValue, false, this.selectedItems[0], undefined, undefined, undefined)\r\n    return\r\n\r\n    console.log('signAudit', 'actionBeingPerformedModel', this.actionBeingPerformedModel)\r\n    this.auditAction=this.actionBeingPerformedModel.dialogInfo.action[0]\r\n    //this.selectedDialogAction = this.selectedAction.dialogInfo.viewQuery\r\n  //this.performActionRequestHavingDialogOrNot(this.actionBeingPerformedModel.dialogInfo.action[0], this.selectedItems[0], this.targetValue)\r\n    this.actionWhenRequiresNoDialog(this.actionBeingPerformedModel.dialogInfo.action[0], this.selectedItems[0], this.targetValue)\r\n    //this.actionMethod(this.actionBeingPerformedModel.dialogInfo.action[0], false)\r\n    //this.actionMethod(this.actionBeingPerformedModel, false)\r\n  }\r\n\r\n  get dialog() {\r\n    return this.shadowRoot.querySelector('tr-dialog')\r\n  }\r\n\r\n  get dialogSurface() {\r\n    return this.dialog.shadowRoot.querySelector(\".mdc-dialog__surface\")\r\n  }\r\n\r\n  showItem(item, i) {\r\n    if (this.audits[i].ballState == \"open\") {\r\n      this.audits[i].ballState = \"hide\"\r\n      this.shadowRoot.querySelector(\"#tooltip-\"+item.audit_id).hidden = true\r\n      this.shadowRoot.querySelector(\"#wrap-\"+item.audit_id).style.marginTop = \"-11px\"\r\n      this.shadowRoot.querySelector(\"#wrap-\"+item.audit_id).style.marginBottom = \"-11px\"\r\n    } else if (this.audits[i].ballState == \"hide\") {\r\n      this.audits[i].ballState = \"close\"\r\n      this.shadowRoot.querySelector(\"#tooltip-\"+item.audit_id).hidden = false\r\n      this.shadowRoot.querySelector(\"#audit-\"+item.audit_id).hidden = true\r\n      this.shadowRoot.querySelector(\"#wrap-\"+item.audit_id).style.marginTop = \"\"\r\n      this.shadowRoot.querySelector(\"#wrap-\"+item.audit_id).style.marginBottom = \"\"\r\n    } else {\r\n      this.audits[i].ballState = \"open\"\r\n      this.shadowRoot.querySelector(\"#audit-\"+item.audit_id).hidden = false\r\n    }\r\n    this.requestUpdate()\r\n  }\r\n\r\n  showSubItem(item, i, si) {\r\n    if (this.audits[i].sublevel[si].ballState == \"hide\") {\r\n      this.audits[i].sublevel[si].ballState = \"close\"\r\n      this.shadowRoot.querySelector(\"#tooltip-\"+item.audit_id).hidden = false\r\n      this.shadowRoot.querySelector(\"#audit-\"+item.audit_id).hidden = true\r\n      this.shadowRoot.querySelector(\"#wrap-\"+item.audit_id).style.margin = \"5px\"\r\n    } else if (this.audits[i].sublevel[si].ballState == \"close\") {\r\n      this.audits[i].sublevel[si].ballState = \"open\"\r\n      this.shadowRoot.querySelector(\"#audit-\"+item.audit_id).hidden = false\r\n    } else {\r\n      this.audits[i].sublevel[si].ballState = \"hide\"\r\n      this.shadowRoot.querySelector(\"#tooltip-\"+item.audit_id).hidden = true\r\n      if (si == this.audits[i].sublevel.length - 1) { // the last item\r\n        this.shadowRoot.querySelector(\"#wrap-\"+item.audit_id).style.marginBottom = \"-5px\"\r\n      } else {\r\n        this.shadowRoot.querySelector(\"#wrap-\"+item.audit_id).style.marginBottom = \"-11px\"\r\n      }\r\n    }\r\n    this.requestUpdate()\r\n  }\r\n\r\n  countInfo() {\r\n    let unSigned = this.audits.filter(a => !a.reviewed)\r\n    let str = ''\r\n    if (unSigned.length) {\r\n      str = html`<label slot=\"topLeft\" style=\"font-size:12px;color: red\">${unSigned.length}/${this.audits.length}</label>`\r\n    } else {\r\n      str = html`<label slot=\"topLeft\" style=\"font-size:12px;color: green\">${this.audits.length}/${this.audits.length}</label>`\r\n    }\r\n    return str\r\n  }\r\n\r\n\r\n\r\n}\r\nwindow.customElements.define('audit-dialog', AuditDialog);","import { html } from 'lit-element';\r\nimport '@material/mwc-icon';\r\nimport '../MultiSelect';\r\nimport '../grid_with_buttons/gridCellTooltip'\r\nimport '../grid_with_buttons/tableRowDetail';\r\nimport '@material/mwc-button';\r\nimport print from './dragdropboxprint';\r\nexport const template = (tmpLogic, selectedBox, viewModel, lang, componentRef) => {\r\n    console.log('tmpLogic', tmpLogic, 'selectedBox', selectedBox, 'viewModel', viewModel)\r\n    if (viewModel.boxPosicsViews===undefined){\r\n        alert(\"Not found the property boxPosicsViews, it should be of at least one entry\")\r\n        return html``\r\n        \r\n    }\r\n    let boxAllowMoveObject=false\r\n    let boxContentStructured=true    \r\n    let totalStr=\"\"\r\n    if (selectedBox!==undefined){\r\n        boxContentStructured=selectedBox.content_structured\r\n        if (selectedBox.allow_move_objects!==undefined){\r\n            boxAllowMoveObject=selectedBox.allow_move_objects\r\n        }\r\n        let occupied=selectedBox.datas.length\r\n        if (boxContentStructured===true){\r\n            let total=selectedBox.cols*selectedBox.rows\r\n            totalStr=String(occupied)+(lang===\"en\"?' of ':' de ')+ String(total)                \r\n        }else{\r\n            totalStr=\"Total: \"+String(occupied)\r\n        }\r\n    }\r\n    return html` \r\n    <div style=\"display:flex; flex-direction:column; gap:12px;\">    \r\n    <div style=\"display:flex; flex-direction:row; gap:12px;\">    \r\n        <div style=\"width: 100%; gap: 4px; display: flex; flex-direction: column;\">        \r\n            <div style=\"display:flex; justify-content: space-between; align-items: center;\"> \r\n                <div style=\"display:flex; flex-direction:row; gap: 4px; align-items: center;\"> \r\n                <mwc-icon-button icon=\"print\" @click=${() => { print(selectedBox!==undefined, componentRef) }}></mwc-icon-button>\r\n                ${selectedBox===undefined ? html``: html `\r\n                    <mwc-icon @click=${() => tmpLogic.setBoxView()} style=\"color:#54CCEF; cursor:pointer;\"> home </mwc-icon>\r\n                    <div class=\"view-btn ${viewModel.viewMode == 1 ? \"active\" : \"\"}\" @click=${() => tmpLogic.setViewMode(1)}> Box View </div>\r\n                    <div class=\"view-btn ${viewModel.viewMode == 2 ? \"active\" : \"\"}\" @click=${() => tmpLogic.setViewMode(2)}> List View </div>\r\n                    \r\n                `}\r\n                </div>\r\n                <div style=\"color:#24C0EB; font-weight: bold; font-size: 16px;\">${totalStr}</div>\r\n                <div style=\"display:flex; flex-direction:row; gap: 4px; align-items: center;\">\r\n                    ${viewModel.objectsToDragColumns===undefined?html``:html`<div class=\"accept-btn\" @click=${() => tmpLogic.setViewTable()}> ${tmpLogic.setViewTableButtonLabel()} </div>`}\r\n                </div>\r\n            \r\n            </div>\r\n\r\n        ${boxContentStructured===true?\r\n            html`${boxStructured(tmpLogic, selectedBox, viewModel, lang, componentRef, boxAllowMoveObject)}`\r\n        :\r\n            html`${boxNotStructured(tmpLogic, selectedBox, viewModel, lang, componentRef, boxAllowMoveObject)}`\r\n        }\r\n        </div>  \r\n        ${viewModel.boxPosicsViews===undefined||viewModel.boxPosicsViews.length==1? html``:html`\r\n        <div >\r\n            <mwc-icon style=\"color:#54CCEF; cursor:pointer;\" @click=${() => tmpLogic.setShowBoxViewModeList()}> view_agenda </mwc-icon>\r\n            ${tmpLogic.listBoxViewMode ? html `\r\n                ${viewModel.boxPosicsViews.map((view, i) => html `\r\n                <div style=\"display:flex;\">\r\n                    <input style=\"transform: translateY(3px);\" type=\"radio\" id=\"${view[1]}\" name=\"fav_language\" value=\"${view[1]}\"  @click=${() => tmpLogic.setBoxPosicsViewFilter(i)}>                            \r\n                    <label for=\"${view[1]}\" @click=${() => tmpLogic.setBoxPosicsViewFilter(i)}> \r\n                        <multi-select id=\"${view[1]}\" @click=${() => tmpLogic.setBoxPosicsViewFilter(i)} .label=\"\" .props=${{\"readOnly\":true, \"displayLabel\":false}} .activeOptions=${view} .options=${{}}> </multi-select>                            \r\n                    </label><br>                            \r\n                </div>                        \r\n                `)}\r\n            `: \r\n            html ``}\r\n        </div>\r\n        `}\r\n\r\n        ${viewModel.objectsToDragColumns===undefined? html``:html`${dragObjectsTable(tmpLogic, viewModel.objectsToDragColumns, tmpLogic.data, componentRef)}`}\r\n    </div>    \r\n    </div>        \r\n    `;\r\n};\r\nfunction boxNotStructured(tmpLogic, selectedBox, viewModel, lang, componentRef, boxAllowMoveObject){\r\n    let boxPosicsViews=[]\r\n    if (selectedBox!==undefined&&selectedBox.boxPosicsViews!==undefined){\r\n        boxPosicsViews=selectedBox.boxPosicsViews\r\n    }else if (viewModel.boxPosicsViews){\r\n        boxPosicsViews=viewModel.boxPosicsViews\r\n    }\r\n    return  html`\r\n            <div class=\"box-content_allowmove_${boxAllowMoveObject}\" id='mainBox'>\r\n                ${viewModel.viewMode == 1 ? html `\r\n                <div draggable=\"true\" class=\"draggable-box\" @dragover=${(e) => tmpLogic.allowDrop(e)} @drop=${(e) => tmpLogic.dropBox(e, 0, 0)}>\r\n                ${selectedBox.datas.length > 0 ?\r\n                html `\r\n                    ${selectedBox.datas.map((selItem ,j) => html `\r\n                    ${printItemByViewFilter(selItem, tmpLogic, boxPosicsViews, false)}\r\n                    `)}         \r\n                `:html``}\r\n                </div>\r\n                `:\r\n                selectedBox.datas.length > 0 ?\r\n                html `\r\n                    <div style=\"width: min-width: 556px;\">\r\n                    ${boxContentTable(tmpLogic,viewModel.boxesContentColumns, selectedBox)}\r\n                    </div>\r\n                ` : \r\n                null}\r\n\r\n            </div>\r\n    `\r\n}\r\nfunction boxStructured(tmpLogic, selectedBox, viewModel, lang, componentRef, boxAllowMoveObject){\r\n    let axisCols = [], axisRows = [];        \r\n    if (selectedBox!==undefined){\r\n    \r\n        for(let i = 0; i < selectedBox.cols; i++) {\r\n            if (selectedBox.axisLabels===undefined||selectedBox.axisLabels.posicX===undefined||selectedBox.axisLabels.posicX.length<=i){\r\n                axisCols.push(i);\r\n            }else{\r\n                axisCols.push(selectedBox.axisLabels.posicX[i])\r\n            }\r\n        }\r\n        let letter = \"A\";\r\n        for(let i = 0; i < selectedBox.rows; i++) {\r\n            if (selectedBox.axisLabels===undefined||selectedBox.axisLabels.posicY===undefined||selectedBox.axisLabels.posicY.length<=i){\r\n                axisRows.push(String.fromCharCode(letter.charCodeAt(0) + (i)));\r\n            }else{\r\n                axisRows.push(selectedBox.axisLabels.posicY[i])\r\n            }\r\n        }\r\n    }\r\n    let boxPosicsViews=[]\r\n    if (selectedBox!==undefined&&selectedBox.boxPosicsViews!==undefined){\r\n        boxPosicsViews=selectedBox.boxPosicsViews\r\n    }else if (viewModel.boxPosicsViews){\r\n        boxPosicsViews=viewModel.boxPosicsViews\r\n    }\r\n    return html`\r\n        ${selectedBox!==undefined ? html `\r\n        <div class=\"box-content_allowmove_${boxAllowMoveObject}\" id='mainBox'>\r\n            ${viewModel.viewMode == 1 ? html `\r\n            <div> \r\n                <div class=\"row-content\"> \r\n                    <div class=\"first-item\"> </div>\r\n                    ${axisCols.map((colN, i) => html `\r\n                    <div class=\"col-num\"> ${colN + 1} </div>\r\n                    `)}\r\n                </div>\r\n                ${axisRows.map((rowN ,i) => html `\r\n                <div class=\"row-content\"> \r\n                    <div class=\"row-num\"> ${rowN} </div>\r\n                    ${boxAllowMoveObject ? \r\n                    axisCols.map((item1 ,j) => html `\r\n                    <div class=\"box ${tmpLogic.selectedIndex1 == rowN + (j + 1) ? \"active\" : \"\"}\" style=${selectedBox.datas.find((item, index) => item.posX + ((item.posY - 1) * selectedBox.cols) == i * axisCols.length + (j + 1)) ? `background-color:rgb(80, 220, 247);` : ``}  @click=${() => tmpLogic.setSelectBoxIndex(rowN + (j + 1), i * axisCols.length + (j + 1))} @dragover=${(e) => tmpLogic.allowDrop(e)} @drop=${(e) => tmpLogic.dropBox(e, j + 1, i + 1)}> \r\n                        <div draggable=\"true\"  @dragstart=${(e) => tmpLogic.dragBox(e, j + 1, i + 1)} class=\"draggable-box\">                        \r\n                        ${printObjectData(tmpLogic, selectedBox, axisCols, boxPosicsViews, i, j)}\r\n                            <div class=\"position\">\r\n                                <span> ${rowN + (j + 1)} </span>\r\n                                <span> ${ i * axisCols.length + (j + 1) } </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    `) : \r\n                    axisCols.map((item1 ,j) => html `\r\n                    <div class=\"box ${tmpLogic.selectedIndex1 == rowN + (j + 1) ? \"active\" : \"\"}\" style=${selectedBox.datas.find((item, index) => item.posX + ((item.posY - 1) * selectedBox.cols) == i * axisCols.length + (j + 1)) ? `background-color:rgb(80, 220, 247);` : ``} @click=${() => tmpLogic.setSelectBoxIndex(rowN + (j + 1), i * axisCols.length + (j + 1))}> \r\n                        <div class=\"draggable-box\">\r\n                            ${printObjectData(tmpLogic, selectedBox, axisCols, boxPosicsViews, i, j)}\r\n                            <div class=\"position\">\r\n                                <span> ${rowN + (j + 1)} </span>\r\n                                <span> ${ i * axisCols.length + (j + 1) } </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    `)}\r\n                </div>\r\n                `)}\r\n                <div style=\"display:flex; justify-content: center;\">\r\n                    ${tmpLogic.selectedIndex1 ? html `<div class=\"selected-cell-content\"> ${lang==='en'?html`Selected cell`:html`Celda seleccionada`}: ${tmpLogic.selectedIndex1} </div>` : null} \r\n                </div>\r\n                ${tmpLogic.selectedIndex2 ? html `<div style=\"text-align: center; color: white;\"> ${lang==='en'?html`Object`:html`Objeto`}: ${selectedBox.name} </div>` : null} \r\n            </div>\r\n            ` : \r\n\r\n            selectedBox.datas.length > 0 ?\r\n            html `\r\n            <div style=\"width: min-width: 556px;\">\r\n                ${boxContentTable(tmpLogic,viewModel.boxesContentColumns, selectedBox)}\r\n            </div>\r\n            ` : \r\n            null}\r\n        </div>\r\n        ` :\r\n        tmpLogic && tmpLogic.data && tmpLogic.data.boxContents && tmpLogic.data.boxContents.length > 0 ?\r\n        html `\r\n        ${viewModel.boxesTableColumns===undefined? html``:html`${boxesTable(tmpLogic, viewModel.boxesTableColumns, tmpLogic.data, lang)}`}                                    \r\n        `: null}\r\n    </div>\r\n    `\r\n}\r\nfunction printObjectData(tmpLogic, selectedBox, axisCols, boxPosicsViews, i, j){\r\n    let selItem=selectedBox.datas.find((item, index) => item.posX + ((item.posY - 1) * selectedBox.cols) == i * axisCols.length + (j + 1))    \r\n    if (selItem===undefined){\r\n        return html``\r\n    }\r\n    return html`\r\n        ${printItemByViewFilter(selItem, tmpLogic, boxPosicsViews, true)}\r\n    `\r\n}\r\n\r\nfunction printItemByViewFilter(selItem, tmpLogic, boxPosicsViews, contentStructured){\r\n    //alert(curFld)\r\n    return html`\r\n    <div class=\"data-view\" style=\"${contentStructured===true?'':'background-color: #50dcf7; border: 2px solid #1473e6; margin-bottom: 5px;'}\"}>\r\n    ${boxPosicsViews[tmpLogic.viewContentIndex].map((curFld, i) => html`\r\n        <div>${curFld}: ${selItem[curFld]}</div>\r\n    `)}\r\n    </div>\r\n    `\r\n}\r\n\r\nfunction dragObjectsTable(tmpLogic, elem, data, componentRef){\r\n    let dataArr = getDataFromRoot(elem, data)\r\n    return html`\r\n    ${tmpLogic.viewTable ? html`\r\n    <div style=\"margin-top:42px\">\r\n        <table class=\"dragdropable TRAZiT-DefinitionArea\"> \r\n            <thead>\r\n                ${elem.columns.map((column) => html`<th>${column.label_en}</th>`)}\r\n            </thead>\r\n            <tbody>\r\n                ${dataArr === undefined || !Array.isArray(dataArr) ? html`No Data` : \r\n                html`  \r\n                    ${dataArr.map((p, idx) => html`\r\n                    <tr class=\"dragdropabletr\" draggable=\"true\" @dragstart=${(e) => tmpLogic.dragTableTr(e, elem, p)}>\r\n                        ${elem.columns.map((fld, index) => fld.is_icon !== undefined && fld.is_icon == true ? \r\n                            fld.icon_class ?\r\n                                html`<div class=\"left-area\">\r\n                                    ${this.iconRenderer(p, fld.name, idx, fld)}\r\n                                    <mwc-icon-button class=\"icon ${p[fld.icon_class]}\" icon=\"${p[fld.icon_name]}\" alt=\"${fld.name}\"></mwc-icon-button>\r\n                                </div>` :\r\n                                html`${this.iconRenderer(p, fld.name, idx, fld)}\r\n                                    <img src=\"${tmpLogic.iconRendererSrc(p, fld.name, idx, fld)}\" style=\"width:20px\">` \r\n                            :     \r\n                            html`<td @click=\"${() => componentRef.shadowRoot.querySelector('#detail' + idx).toggle()}\">${p[fld.name]}</td>`                    \r\n                        )}\r\n                        ${elem.row_buttons === undefined ? html`` : html`<td><div class=\"layout horizontal center flex wrap\">${this.getButtonForRows(elem.row_buttons, p, false, parentData)}</div></td>`}\r\n                    </tr>\r\n                    <table-row-detail id=\"detail${idx}\">\r\n                      <div slot=\"details\">\r\n                      dd\r\n                        <!-- Aquí puedes poner el contenido detallado para esta fila -->\r\n                      </div>\r\n                    </table-row-detail>`)}\r\n                `}\r\n            </tbody>\r\n        </table>\r\n    </div> \r\n    ` : null}\r\n    `\r\n  }\r\n  \r\nfunction boxContentTable(tmpLogic,elem, selectedBox){\r\n    return html`\r\n    <table class=\"TRAZiT-DefinitionArea dragdropable\">\r\n    <thead>\r\n        <th>Posic</th>\r\n        ${elem.columns.map((column, i) => html`<th>${column.label_en}</th>`)}\r\n    </thead>\r\n    <tbody>\r\n        ${selectedBox.datas === undefined || !Array.isArray(selectedBox.datas) ? html `No Data` : \r\n        html`  \r\n            ${selectedBox.datas.map((p, i) => { return html `\r\n            <tr @click=${() => tmpLogic.showBoxContent(p, i)}> \r\n            \r\n                <td>${ String.fromCharCode(p.posY + 64) + p.posX}</td>\r\n            \r\n                ${elem.columns.map((fld, index) =>         \r\n                    fld.is_icon !== undefined && fld.is_icon == true ? \r\n                        fld.icon_class ?\r\n                            html`\r\n                            <div class=\"left-area\">\r\n                                <mwc-icon-button class=\"icon ${p[fld.icon_class]}\" icon=\"${p[fld.icon_name]}\" alt=\"${fld.name}\"></mwc-icon-button>\r\n                            </div>\r\n                            ` :\r\n                            html `\r\n                            <img src=\"${tmpLogic.iconRendererSrc(p, fld.name, i, fld)}\" style=\"width:20px\">\r\n                            ` \r\n                    :     \r\n                        html`<td>${p[fld.name]}</td>`                    \r\n                )} \r\n                ${elem.row_buttons === undefined? html`` : html`\r\n                    <td><div class=\"layout horizontal center flex wrap\"> ${this.getButtonForRows(elem.row_buttons, p, false, parentData)}</div></td>\r\n                `}\r\n            </tr>\r\n            `})}\r\n        `}    \r\n    </tbody>\r\n    </table>\r\n    `\r\n}\r\n\r\nfunction boxesTable(tmpLogic, elem, data, lang){\r\n    let dataArr=getDataFromRoot(elem, data)\r\n    return html`\r\n    <table class=\"dragdropable TRAZiT-DefinitionArea\">\r\n    <thead> \r\n        ${elem.columns.map((column, i) => html`<th>${column.label_en}</th>`)}\r\n    </thead>\r\n    <tbody>\r\n        ${dataArr === undefined || !Array.isArray(dataArr) ? html `No Data` : \r\n        html`  \r\n            ${dataArr.map((p, i) => { return html `\r\n            <tr @click=${() => tmpLogic.showBoxContent(p, i)}> \r\n            \r\n                ${elem.columns.map((fld, index) =>      \r\n                \r\n                    fld.is_icon !== undefined && fld.is_icon == true ? \r\n                        fld.icon_class ?\r\n                            html`\r\n                                ${fld.tooltip !== undefined ? html`\r\n                                    <grid-cell-tooltip lang=\"${lang}\" .element=\"${fld}\" .data=\"${p}\">\r\n                                    <div class=\"left-area\">\r\n                                        <mwc-icon-button class=\"icon ${p[fld.icon_class]}\" icon=\"${p[fld.icon_name]}\" alt=\"${fld.name}\"></mwc-icon-button>\r\n                                    </div>\r\n                                    </grid-cell-tooltip>\r\n                                `:html`\r\n                                    <mwc-icon-button class=\"icon ${p[fld.icon_class]}\" icon=\"${p[fld.icon_name]}\" alt=\"${fld.name}\"></mwc-icon-button>\r\n                                `}\r\n                            ` :\r\n                            html `     \r\n                            <td>                           \r\n                                ${fld.tooltip !== undefined ? html`\r\n                                    <grid-cell-tooltip lang=\"${lang}\" .element=\"${fld}\" .data=\"${p}\">\r\n                                        <img src=\"${tmpLogic.iconRendererSrc(p, fld.name, i, fld)}\" style=\"width:20px\">\r\n                                    </grid-cell-tooltip>\r\n                                `:html`\r\n                                <img src=\"${tmpLogic.iconRendererSrc(p, fld.name, i, fld)}\" style=\"width:20px\">\r\n                                `}\r\n\r\n                            </td>\r\n                            ` \r\n                    :     \r\n                        html`                        \r\n                            <td>\r\n                                ${fld.tooltip !== undefined ? html`\r\n                                    <grid-cell-tooltip lang=\"${lang}\" .element=\"${fld}\" .data=\"${p}\">\r\n                                        ${p[fld.name]}\r\n                                    </grid-cell-tooltip>\r\n                                `:html`\r\n                                ${p[fld.name]}\r\n                                `}\r\n\r\n                            </td>\r\n                        `\r\n                )} \r\n                ${elem.row_buttons === undefined? html`` : html`\r\n                    <td><div class=\"layout horizontal center flex wrap\"> ${this.getButtonForRows(elem.row_buttons, p, false, parentData)}</div></td>\r\n                `}\r\n            </tr>\r\n            `})}\r\n        `}\r\n    </tbody>\r\n    </table>    \r\n    `    \r\n}\r\n\r\nfunction getDataFromRoot(elem, curDataForThisCard, filterValues) {\r\n    if (elem !== undefined && elem.contextVariableName !== undefined) {\r\n      if (this[elem.contextVariableName] !== undefined) {\r\n        curDataForThisCard = this[elem.contextVariableName];\r\n      }\r\n    }\r\n    if (curDataForThisCard === null || curDataForThisCard === undefined) {\r\n      return undefined;\r\n    }\r\n    if (elem.endPointPropertyArray !== undefined) {\r\n      if (elem.endPointPropertyArray.length === 0) {\r\n        return curDataForThisCard;\r\n      }\r\n      if (\r\n        elem.endPointPropertyArray.length === 1 &&\r\n        elem.endPointPropertyArray[0].toUpperCase() === \"ROOT\"\r\n      ) {\r\n        //curDataForThisCard=applyFilterToTheData(curDataForThisCard, filterValues)\r\n        return curDataForThisCard;\r\n      }\r\n      //const numObjectsToSkip = elem.endPointPropertyArray.length - 1;\r\n      //const propertyName = elem.endPointPropertyArray[numObjectsToSkip];\r\n      let i = 0;\r\n      let subJSON = {};\r\n      //curDataForThisCard = curDataForThisCard[elem.endPointPropertyArray[0]][0]\r\n      for (i = 0; i < elem.endPointPropertyArray.length; i++) {\r\n        if (curDataForThisCard === null) {\r\n          return undefined;\r\n        }\r\n        let propertyName = elem.endPointPropertyArray[i];\r\n        if (Array.isArray(curDataForThisCard[propertyName])) {\r\n          if (i < elem.endPointPropertyArray.length - 1) {\r\n            subJSON = curDataForThisCard[propertyName][0];\r\n          } else {\r\n            subJSON = curDataForThisCard[propertyName];\r\n            //return applyFilterToTheData(curDataForThisCard[propertyName], filterValues);\r\n          }\r\n        } else {\r\n          subJSON = curDataForThisCard[propertyName];\r\n        }\r\n        //if (typeof subJSON === \"undefined\") {\r\n        //  return applyFilterToTheData(curDataForThisCard, filterValues);\r\n        //} else {\r\n          curDataForThisCard = subJSON;\r\n        //}\r\n      }\r\n      return curDataForThisCard\r\n      //return applyFilterToTheData(curDataForThisCard, filterValues);\r\n      if (typeof subJSON === \"undefined\") {\r\n        return undefined;\r\n      } else if (elem.endPointPropertyArray.length % 2 === 0) {\r\n        // If the input array has an even number of elements, skip one more object level before recursing\r\n        return getValueFromNestedJSON(\r\n          subJSON,\r\n          elem.endPointPropertyArray.slice(0, numObjectsToSkip)\r\n        );\r\n      } else {\r\n        // Otherwise, recurse on the sub-JSON with the remaining elem.endPointPropertyArray elements\r\n        return getValueFromNestedJSON(\r\n          subJSON,\r\n          elem.endPointPropertyArray.slice(0, numObjectsToSkip)\r\n        );\r\n      }\r\n    } else {\r\n      if (\r\n        elem.endPointResponseObject !== undefined &&\r\n        elem.endPointResponseObject2 !== undefined\r\n      ) {\r\n        let curDataForThisCardToRet = [];\r\n        curDataForThisCardToRet = curDataForThisCard[elem.endPointResponseObject];\r\n        if (curDataForThisCardToRet !== undefined) {\r\n            \r\n          return applyFilterToTheData(curDataForThisCardToRet[elem.endPointResponseObject2],  filterValues);\r\n        } else {\r\n          return [];\r\n        }\r\n      } else {\r\n        if (String(elem.endPointResponseObject).toUpperCase() === \"ROOT\") {\r\n          if (!Array.isArray(curDataForThisCard)) {\r\n            let curDataForThisCardArr = [];\r\n            curDataForThisCardArr.push(curDataForThisCard);\r\n            return applyFilterToTheData(curDataForThisCardArr,  filterValues);\r\n          }\r\n          return applyFilterToTheData(curDataForThisCard,  filterValues);\r\n        } else {\r\n          return applyFilterToTheData(curDataForThisCard[elem.endPointResponseObject],  filterValues);\r\n        }\r\n      }\r\n    }\r\n    function applyFilterToTheData(curDataForThisCard, filterValues) {\r\n   \r\n        const uniqueItemsSet = new Set();\r\n        for (const key in filterValues) {\r\n                const filterValue = filterValues[key];\r\n                if (Array.isArray(curDataForThisCard)) {\r\n                    const filteredItems = curDataForThisCard.filter(item => {\r\n                        if (item[key] && filterValue) {\r\n                          return item[key] == filterValue;\r\n                        }\r\n                        return false\r\n                    });  \r\n                    console.log(filteredItems)                         \r\n                    filteredItems.forEach(item => uniqueItemsSet.add(item));            \r\n            }\r\n        }\r\n        return Array.from(uniqueItemsSet);\r\n    \r\n    }\r\n  }\r\n\r\n\r\n","import { html, css, nothing } from 'lit';\r\nimport {  commonLangConfig } from '@trazit/common-core';\r\nimport { Layouts } from '@collaborne/lit-flexbox-literals';\r\n\r\nimport '@material/mwc-list/mwc-list-item';\r\nimport '@material/mwc-select';\r\nimport '@material/mwc-checkbox';\r\nimport '@material/mwc-formfield';\r\nimport {DialogsFunctions} from './DialogsFunctions';\r\n\r\nconst langConfig = {\r\n    \"pwdWindowTitle\": {\r\n      \"label_en\": \"Please confirm your credentials (user & password)\",\r\n      \"label_es\": \"Por favor confirma tu identidad (usuario y contraseña)\"\r\n    },\r\n    \"esignWindowTitle\": {\r\n      \"label_en\": \"Please enter your eSign\",\r\n      \"label_es\": \"Por favor entra tu frase de Firma Electrónica\"\r\n    },\r\n    \"justificationWindowTitle\": {\r\n      \"label_en\": \"Please enter the justification phrase\",\r\n      \"label_es\": \"Por favor entra tu frase de justificación\"\r\n    },\r\n    \"action\": {\r\n      \"label_en\": \"Action name\", \r\n      \"label_es\": \"Nombre de la acción\"\r\n    },\r\n    \"userToCheck\": {\r\n      \"label_en\": \"User\", \r\n      \"label_es\": \"Usuario\"\r\n    },\r\n    \"pwToCheck\": {\r\n      \"label_en\": \"Password\", \r\n      \"label_es\": \"Contraseña\"\r\n    },\r\n    \"esgToCheck\": {\r\n      \"label_en\": \"Esign\", \r\n      \"label_es\": \"Esign\"\r\n    },\r\n    \"jstToCheck\": {\r\n      \"label_en\": \"Justification Phrase\", \r\n      \"label_es\": \"Frase de Justificación\"\r\n    },\r\n    \"notCorrectMessage\": {\r\n      \"now\": {\r\n        \"message_en\": \"Validation not completed, action aborted\",\r\n        \"message_es\": \"Validación no completada, acción abortada\"\r\n      },\r\n      \"dialog_cancelled\": {\r\n        \"message_en\": \"dialog canceled, action aborted\",\r\n        \"message_es\": \"Diálogo cancelado, acción abortada\"\r\n      },\r\n      \"attempts_consumed\": {\r\n        \"message_en\": \"All attempts consumed, action aborted\",\r\n        \"message_es\": \"Todos los intentos consumidos, acción abortada\"\r\n      }\r\n    }\r\n  }\r\n\r\nexport function TrazitCredentialsDialogs(base) {\r\n  return class extends DialogsFunctions(base) {\r\n  static get styles() {\r\n    return [\r\n      Layouts, \r\n      css`\r\n      :host {\r\n        display: block;\r\n      }\r\n      :host([hidden]) {\r\n        display: none;\r\n      }\r\n      tr-dialog {\r\n        --mdc-dialog-heading-ink-color: blue;\r\n        --mdc-typography-headline6-font-size: 35px;\r\n        position: relative;\r\n        z-index:999;\r\n      }\r\n      .content {\r\n        opacity: 0.9;\r\n      }\r\n      .content * {\r\n        margin: 5px 0;\r\n      }\r\n      p.attemptsphraseblue {\r\n        color: #464dbb;\r\n      }\r\n      p.attemptsphrasered {\r\n        color: #f3371680;\r\n        animation-duration: 2s;\r\n        animation-name: slidein;\r\n      }\r\n      @keyframes slidein {\r\n        from {\r\n          margin-left: 30%;\r\n        }\r\n        to {\r\n          margin-left: 0%;\r\n        }\r\n      }           \r\n      @media (max-width: 460px) {\r\n      }\r\n      mwc-textfield {\r\n        border-style : Solid;\r\n        border-color : #999999;\r\n        border-color : rgba(153, 153, 153, 1);\r\n        border-width : 1px;\r\n        border-radius : 7px;\r\n        -moz-border-radius : 7px;\r\n        -webkit-border-radius : 7px;   \r\n        font-family : Montserrat;\r\n        font-weight : bold;\r\n        font-size : 19px;\r\n        background-color :  #FFFFFF;\r\n        background-color : rgb(255, 255, 255);  \r\n        --mdc-text-field-idle-line-color:#148CFA;\r\n        --mdc-text-field-outlined-idle-border-color: #148CFA;\r\n        --mdc-text-field-label-ink-color:  #148CFA;\r\n        --mdc-text-field-focused-label-color: #148CFA;\r\n        --mdc-theme-primary: #0465FB;\r\n      }      \r\n      mwc-select {        \r\n        --mdc-theme-primary : rgba(36, 192, 235, 1);\r\n        --mdc-theme-text-primary-on-background : rgba(49, 130, 189, 1);\r\n        --mdc-select-ink-color: rgb(47, 47, 47);\r\n        --mdc-select-dropdown-icon-color:rgba(36, 192, 235, 1);\r\n        --mdc-select-hover-line-color:rgba(36, 192, 235, 1);\r\n        --mdc-notched-outline-border-color: rgba(186, 235, 248, 0.4);\r\n        --mdc-select-disabled-dropdown-icon-color:rgba(36, 192, 235, 1);\r\n\r\n        font-family : Montserrat;\r\n        font-weight : bold;\r\n        font-size : 19px;\r\n      }\r\n      mwc-select.outlined {        \r\n        --mdc-theme-primary : rgba(36, 192, 235, 1);\r\n        --mdc-theme-text-primary-on-background : rgba(49, 130, 189, 1);\r\n        --mdc-select-ink-color: rgba(36, 192, 235, 1);\r\n        font-family : Montserrat;\r\n        font-weight : bold;\r\n        font-size : 19px;\r\n        background-color: 4fcad029;\r\n      }\r\n      tr-dialog#confirmDialog {\r\n        --mdc-dialog-z-index: 9;\r\n      }\r\n      `\r\n    ];\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      type: { type: String }, // user, esign, justification (default user)\r\n      header: { type: String },\r\n      // for changing purpose we will adjust the placeholder of text label\r\n      // for example in user-profile\r\n      changing: { type: Boolean },\r\n      attempt: { type: Number },\r\n      maxFails: { type: Number },\r\n      actionName: { type: String },\r\n      actionObj: { type: Object },\r\n      objectId: { type: String },\r\n      justificationType: { type: String },\r\n      nonProc: { type: Boolean },\r\n      escapeKey: { type: Boolean },\r\n      reqParams: { type: Object }\r\n      \r\n    };\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.escapeKey = true;\r\n    this.reqParams = {};    \r\n    this.reset();\r\n  }\r\n\r\n  reset() {\r\n    this.type = \"\";\r\n    this.changing = false;\r\n    this.attempt = 0;\r\n    this.maxFails = 3;\r\n    this.justificationType = \"\";\r\n    this.nonProc = false;\r\n    this.actionObj = {};\r\n  }\r\n\r\n  firstUpdated() {\r\n    super.firstUpdated()\r\n    this.updateComplete.then(() => {\r\n      // manually backgrounding the dialog box\r\n      // password dialog\r\n      if (this.dialogSurface!==null){\r\n        this.dialogSurface.style.backgroundImage = \"url(/images/abstract.jpg)\";\r\n        this.dialogSurface.style.backgroundSize = \"cover\";\r\n        this.dialogSurface.style.backgroundRepeat = \"no-repeat\";\r\n        this.dialogSurface.style.textAlign = \"center\";\r\n      }\r\n      if (this.credDialog!==null){\r\n        this.credDialog.shadowRoot.querySelector(\"h2#title\").style.fontSize = \"20px\";\r\n        this.credDialog.shadowRoot.querySelector(\"#content\").style.paddingBottom = \"0\";\r\n      }\r\n    })\r\n  }\r\n\r\n  headerLabel() {\r\n    if (this.type == \"user\") {\r\n      return `${langConfig.pwdWindowTitle[\"label_\"+this.lang]}`\r\n    } else if (this.type == \"esign\") {\r\n      return `${langConfig.esignWindowTitle[\"label_\"+this.lang]}`\r\n    } else {\r\n      return `${langConfig.justificationWindowTitle[\"label_\"+this.lang]}`\r\n    }\r\n  }\r\n    \r\n    openThisDialog(actionModel = this.actionBeingPerformedModel){\r\n\r\n       if (!actionModel||!actionModel.dialogInfo||!actionModel.dialogInfo.fields){\r\n        //alert(false)\r\n        return false\r\n       }      \r\n       // alert(true)\r\n       return true \r\n    }\r\n        \r\n      credentialsDialog(){\r\n        return html`\r\n          <tr-dialog id=\"credDialog\" \r\n          style=\"position: relative; z-index:999;\"\r\n            @closed=${this.closed}\r\n            .heading=\"${this.headerLabel()}\"\r\n            hideActions=\"\"\r\n            scrimClickAction=\"\"            \r\n            .escapeKeyAction=\"${this.escapeKey?'close':''}\">\r\n            ${this.changing||this.nonProc ?\r\n              nothing :\r\n              html`<div style=\"position:absolute;left:15px;top:8px;font-size:12px;\">\r\n                ${this.actionObj.button ? this.actionObj.button.title[\"label_\"+ this.lang] : this.actionName} (id: ${this.objectId})\r\n              </div>`\r\n            }\r\n            <div class=\"content layout vertical flex center-justified\">\r\n              ${this.inputField()}\r\n              ${this.changing||this.nonProc ?\r\n                null :\r\n                html`${this.auditField()}`\r\n              }\r\n              <div style=\"margin-top:30px\">\r\n                ${this.nonProc ?\r\n                  // closing dialog for non procedures i.e relogin on lock inactivity\r\n                  html`<sp-button size=\"xl\" variant=\"secondary\" @click=${this.failedAttempt}>${commonLangConfig.cancelDialogButton[\"label_\"+this.lang]}</sp-button>` :\r\n                  // for procedures\r\n                  html`<sp-button size=\"xl\" variant=\"secondary\" dialogAction=\"close\">${commonLangConfig.cancelDialogButton[\"label_\"+this.lang]}</sp-button>`\r\n                }\r\n                <sp-button size=\"xl\" @click=${this.checking}>${commonLangConfig.confirmDialogButton[\"label_\"+this.lang]}</sp-button>\r\n              </div>\r\n              ${this.setAttempts()}\r\n            </div>\r\n          </tr-dialog>\r\n          <tr-dialog id=\"confirmDialog\" \r\n            ?hideXtoClose=${true}\r\n            heading=\"\"\r\n            hideActions=\"\"\r\n            scrimClickAction=\"\"\r\n            .zIndex=${9}\r\n          >\r\n            <div class=\"layout vertical flex center-justified\">\r\n              <div>${commonLangConfig.confirmActionPhrase[\"label_\" + this.lang]} ${this.actionObj.button ? this.actionObj.button.title[\"label_\"+ this.lang] : this.actionName}?</div>\r\n              <div style=\"margin-top:30px;text-align:center\">\r\n                <sp-button size=\"xl\" variant=\"secondary\" slot=\"secondaryAction\" dialogAction=\"decline\">\r\n                  ${commonLangConfig.cancelDialogButton[\"label_\" + this.lang]}</sp-button>\r\n                <sp-button size=\"xl\" slot=\"primaryAction\" dialogAction=\"accept\" @click=${this.addJustificationPhrase}>\r\n                  ${commonLangConfig.confirmDialogButton[\"label_\" + this.lang]}</sp-button>\r\n              </div>\r\n            </div>\r\n          </tr-dialog>\r\n        `;        \r\n    }\r\n\r\n    get confirmDialog() {return this.shadowRoot.querySelector(\"tr-dialog#confirmDialog\")}\r\n    \r\n    closed() {\r\n    this.reset()\r\n    if (this.pwd) this.pwd.value = \"\"\r\n    if (this.esg) this.esg.value = \"\"\r\n    if (this.jst) this.jst.value = \"\"\r\n    \r\n    }\r\n  /**\r\n   * Composition template for the input fields\r\n   * filter out by creds type\r\n   */\r\n   inputField() {\r\n    if (this.type == \"user\") {\r\n      // adjust the placeholder label for changing purpose\r\n      return html`\r\n        <mwc-textfield id=\"userTxtFld\" label=\"${langConfig.userToCheck[\"label_\"+this.lang]}\" type=\"text\"\r\n        dialogInitialFocus ></mwc-textfield>\r\n        <mwc-textfield id=\"pwd\" label=\"${this.adjustLbl(`${langConfig.pwToCheck[\"label_\"+this.lang]}`)}\" type=\"password\" iconTrailing=\"visibility\" \r\n          \r\n          @click=${this.showPwd}\r\n          @keypress=${e=>this.keyPress(e, 'checkingUser')}></mwc-textfield>\r\n      `\r\n    } else if (this.type == \"esign\") {\r\n      // adjust the placeholder label for changing purpose\r\n      return html`\r\n        <mwc-textfield id=\"esg\" label=\"${this.adjustLbl(`${langConfig.esgToCheck[\"label_\"+this.lang]}`)}\" type=\"password\" iconTrailing=\"visibility\" \r\n          dialogInitialFocus\r\n          @click=${this.showPwd}\r\n          @keypress=${e=>this.keyPress(e, 'checkingEsignPhrase')}></mwc-textfield>\r\n      `\r\n    }\r\n  }\r\n\r\n  /**\r\n   * TEXT: free text auditPhrase\r\n   * LIST: list of auditPhrase\r\n   * TEXTLIST: combination of TEXT & LIST\r\n   */\r\n  auditField() {\r\n    //console.log(this.justificationType)\r\n    // adjust the placeholder label for changing purpose\r\n    if (this.justificationType===null || this.justificationType===undefined || this.justificationType == \"TEXT\" || this.justificationType == \"LABPLANET_FALSE\") {\r\n      return html`\r\n        <mwc-textfield id=\"jst\" label=\"${this.adjustLbl(`${langConfig.jstToCheck[\"label_\"+this.lang]}`)}\" type=\"text\" \r\n          ?dialogInitialFocus=${this.justificationType?true:false} \r\n          @keypress=${this.keyPress}></mwc-textfield>\r\n      `\r\n    } else {\r\n      return html`\r\n      <vaadin-combo-box id=\"jst\"\r\n          item-label-path=\"name\"\r\n          item-value-path=\"id\"\r\n          .placeholder=\"${langConfig.jstToCheck[\"label_\"+this.lang]}\"\r\n          .label=\"${langConfig.jstToCheck[\"label_\"+this.lang]}\"\r\n          .value=${this.justificationType==\"LIST\"?this.justificationList[0]:null}\r\n          ?dialogInitialFocus=${this.justificationType?true:false}\r\n          @keypress=${this.keyPress}\r\n          @change=${this.keyPress}\r\n          .items=\"${this.justificationList}\"></vaadin-combo-box>\r\n      `\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adjusting the placeholder label based the actived language\r\n   * @param {*} label \r\n   */\r\n  adjustLbl(label) {\r\n    if (this.changing) {\r\n      if (this.lang == \"en\") {\r\n        return \"Current \"+label\r\n      } else {\r\n        return label+\" Actual\"\r\n      }\r\n    } else {\r\n      return label\r\n    }\r\n  }\r\n\r\n  get credDialog() {return this.shadowRoot.querySelector(\"tr-dialog#credDialog\")}\r\n\r\n  get userTxtFld() {return this.shadowRoot.querySelector(\"mwc-textfield#userTxtFld\")}\r\n  get pwd() {return this.shadowRoot.querySelector(\"mwc-textfield#pwd\")}\r\n\r\n  get esg() {return this.shadowRoot.querySelector(\"mwc-textfield#esg\")}\r\n\r\n  get jst() {return this.shadowRoot.querySelector(\"#jst\")}\r\n  \r\n   \r\n  get dialogSurface() {\r\n    if (this.credDialog===null){return null}\r\n    return this.credDialog.shadowRoot.querySelector(\".mdc-dialog__surface\")}\r\n\r\n  keyPress(e, method) {\r\n    if (e.keyCode==13) {\r\n      if (method) { // keypress password / esign field\r\n        // if found justification field, focus to audit field\r\n        if (this.justificationType) {\r\n          this.jst.focus()\r\n        } else {\r\n          this.checking()\r\n        }\r\n      } else { // keypress justification field\r\n        this.checking()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * which creds request should be requested\r\n   */\r\n  checking() {\r\n    if (this.type == \"user\") {\r\n      this.checkingUser()\r\n    } else if (this.type == \"esign\") {\r\n      this.checkingEsignPhrase()\r\n    } else if (this.type == \"justification\") {\r\n      this.addJustificationPhrase()\r\n    }\r\n  }\r\n\r\n  checkAttempt() {\r\n    if (this.attempt > 1) {\r\n      this.failedAttempt()\r\n    } else {\r\n      this.attempt++\r\n    }\r\n  }\r\n\r\n  failedAttempt() {\r\n    this.credDialog.close()\r\n  }\r\n\r\n \r\n  buildCreadArgumentsObj(){\r\n    let credArguments = {}\r\n    if (this.userName) {credArguments.userToCheck=this.userName}\r\n    if (this.userTxtFld&&this.userTxtFld.value!==null&&String(this.userTxtFld.value).length>0) {credArguments.userToCheck=this.userTxtFld.value}\r\n    if (this.pwd&&this.pwd.value!==null&&String(this.pwd.value).length>0) {credArguments.passwordToCheck=this.pwd.value}\r\n    if (this.esg&&this.esg.value!==null&&String(this.esg.value).length>0) {credArguments.esignPhraseToCheck=this.esg.value}\r\n    if (this.jst&&this.jst.value!==null&&String(this.jst.value).length>0) {credArguments.auditReasonPhrase=this.jst.value}\r\n    return credArguments\r\n  }\r\n  checkingUser() {\r\n    let params = this.config.backendUrl + this.config.appAuthenticateApiUrl + '?' + new URLSearchParams({\r\n      actionName: \"TOKEN_VALIDATE_USER_CREDENTIALS\",\r\n      finalToken: JSON.parse(sessionStorage.getItem(\"userSession\")).finalToken,\r\n      userToCheck: this.userTxtFld.value,\r\n      passwordToCheck: this.pwd.value\r\n    })\r\n    this.fetchApi(params).then(j => {\r\n      if (j.is_error) {\r\n        this.checkAttempt()\r\n      } else {\r\n        let actionInfoToAPIcall=JSON.parse(sessionStorage.getItem('actionInfoToAPIcall'));\r\n        this.trazitNextRequest(actionInfoToAPIcall.action, actionInfoToAPIcall.actionParams, \r\n            this.buildCreadArgumentsObj(), actionInfoToAPIcall.gridSelectedItem, actionInfoToAPIcall.parentData)\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  addJustificationPhrase(){\r\n        // const stack = new Error().stack;\r\n        // const stackLines = stack.split('\\n');\r\n        // if (stackLines!==null&&stackLines[1]!==null){\r\n        //   const callerName = stackLines[1].match(/at (\\w+)/)[0]; // Adjust the index as needed    \r\n        //   console.log(\"Called from: \" + callerName);\r\n        // }       \r\n    let actionInfoToAPIcall=JSON.parse(sessionStorage.getItem('actionInfoToAPIcall'));\r\n    this.trazitNextRequest(actionInfoToAPIcall.action, actionInfoToAPIcall.actionParams, \r\n        this.buildCreadArgumentsObj(), actionInfoToAPIcall.gridSelectedItem, actionInfoToAPIcall.parentData)\r\n  }\r\n\r\n\r\n  checkingEsignPhrase() {\r\n    let params = this.config.backendUrl + this.config.appAuthenticateApiUrl + '?' + new URLSearchParams({\r\n      actionName: \"TOKEN_VALIDATE_ESIGN_PHRASE\",\r\n      finalToken: JSON.parse(sessionStorage.getItem(\"userSession\")).finalToken,\r\n      esignPhraseToCheck: this.esg.value\r\n    })\r\n    this.fetchApi(params).then(j => {\r\n      if (j.is_error) {\r\n        this.checkAttempt()\r\n      } else {\r\n        let actionInfoToAPIcall=JSON.parse(sessionStorage.getItem('actionInfoToAPIcall'));\r\n        this.trazitNextRequest(actionInfoToAPIcall.action, actionInfoToAPIcall.actionParams, \r\n            this.buildCreadArgumentsObj(), actionInfoToAPIcall.gridSelectedItem, actionInfoToAPIcall.parentData)\r\n      }\r\n    })\r\n  }\r\n\r\n  setAttempts() {\r\n    if (this.type == \"justification\") {\r\n      return\r\n    }\r\n    let txt = this.lang == \"en\" ? \r\n      `*** Attempts: ${this.attempt} of 3` : \r\n      `*** Intentos: ${this.attempt} de ${this.maxFails}`\r\n    return html`<p class=${this.attempt==0?'attemptsphraseblue':'attemptsphrasered'}>${txt}</p>`\r\n  }\r\n\r\n  nextRequestCommons(action) {\r\n    console.log('nextRequestCommons')\r\n    this.reqParams = {\r\n      ...this.reqParams,\r\n      procInstanceName: this.procInstanceName,      \r\n      finalToken: JSON.parse(sessionStorage.getItem(\"userSession\")).finalToken,\r\n      dbName: this.config.dbName,\r\n      actionName: action.actionName,\r\n      //sampleId: this.objectId,\r\n      userToCheck: this.userName,\r\n      passwordToCheck: this.pwd ? this.pwd.value : \"\",\r\n      esignPhraseToCheck: this.esg ? this.esg.value : \"\",\r\n      auditReasonPhrase: this.jst ? this.jst.value: \"\"\r\n    }\r\n    let params = this.config.backendUrl + action.endPoint\r\n    + '?' + new URLSearchParams(this.reqParams) \r\n    // if (extraParams!==undefined){\r\n    //   params=params + '&' + new URLSearchParams(extraParams)\r\n    // }\r\n    this.fetchApi(params).then(() => {\r\n//      this.reload()\r\n    })\r\n    let cleanParams = {}\r\n    Object.entries(this.reqParams).map(([key, value]) => {\r\n      if (value != null || value != undefined) {\r\n        cleanParams[key] = value\r\n      }\r\n    })\r\n    this.reqParams = cleanParams\r\n    if (this.credDialog) {\r\n      this.credDialog.close()\r\n    }\r\n  }\r\n\r\n    \r\n  }\r\n}","import { html } from \"lit-element\";\r\nimport '@vaadin/vaadin-context-menu';\r\n\r\nexport const template = (props) => {\r\n  const { name, label,this:thisComponent , handleUpload } = props;\r\n  const getFile = (event) => {\r\n    thisComponent.selectedFile = event.target.files[0];\r\n    thisComponent.requestUpdate()\r\n  };\r\n\r\n  const removeFile = () => {\r\n    if (thisComponent.selectedFile) {\r\n      thisComponent.selectedFile = null;\r\n    }\r\n    const uploadBtn = thisComponent.shadowRoot.querySelector(`#${name}`);\r\n    uploadBtn.value = ''\r\n    thisComponent.requestUpdate()\r\n  }\r\n\r\n\r\n\r\n  const renderTemplate = () => {\r\n    return html`\r\n    <div class=\"container\">\r\n      <div class=\"button-wrap\">\r\n      ${thisComponent.selectedFile ? html`\r\n      <label class=\"button\" @click=${handleUpload} >Upload</label>\r\n      ` : html`\r\n      <label class=\"button\" for=\"${name}\">${label}</label>\r\n      `}\r\n        \r\n        \r\n        <input @change=\"${getFile}\" id=\"${name}\" type=\"file\">\r\n        ${thisComponent.selectedFile ? html`<p>${thisComponent.selectedFile.name}</p> <span @click=${removeFile}>&#x2716</span>` : ''}\r\n      </div>\r\n    </div>\r\n    <vaadin-context-menu .items=${[{ text: 'View' }, { text: 'Edit' }, { text: 'Delete' }]}>\r\n      <template>\r\n        <vaadin-list-box>\r\n          <vaadin-item>First menu item</vaadin-item>\r\n          <vaadin-item>Second menu item</vaadin-item>\r\n        </vaadin-list-box>\r\n      </template>\r\n    </vaadin-context-menu>\r\n    <vaadin-context-menu .items=${[{ text: 'View' }, { text: 'Edit' }, { text: 'Delete' }]}>\r\n    </vaadin-context-menu>\r\n  `\r\n  };\r\n  return html`<div id=\"file-container\">${renderTemplate()}</div>`;\r\n}","import { html, css, nothing } from 'lit';\r\nimport { Layouts, Alignment } from '@collaborne/lit-flexbox-literals';\r\nimport { columnBodyRenderer, gridRowDetailsRenderer } from 'lit-vaadin-helpers';\r\nimport { commonLangConfig } from '@trazit/common-core';\r\nimport '@material/mwc-list/mwc-list-item';\r\nimport '@material/mwc-select';\r\nimport '@material/mwc-checkbox';\r\nimport '@material/mwc-formfield';\r\nimport '../uploadButton/index';\r\nimport { ActionsFunctions } from '../Actions/ActionsFunctions';\r\n\r\nexport function TrazitEnterResultWithSpec(LitElement) {\r\nreturn class extends ActionsFunctions(LitElement) {\r\n\r\n  static get styles() {\r\n    return [\r\n      Layouts, Alignment,\r\n      super.styles,\r\n      css`\r\n        mwc-button {\r\n          --mdc-typography-button-text-transform: none;\r\n          margin: 0 2px;\r\n        }\r\n        tr-dialog * {\r\n          margin-bottom: 5px;\r\n        }\r\n        mwc-textfield[hidden] {\r\n          display: none;\r\n        }\r\n        div#microGrid {\r\n          height: 35vh;\r\n          overflow: auto;\r\n        }\r\n        mwc-button[hidden] {\r\n          display: none;\r\n        }\r\n        mwc-button.tabBtn {\r\n          --mdc-theme-primary: #03a9f4;\r\n          --mdc-theme-on-primary: white;\r\n          --mdc-typography-button-font-size: 10px;\r\n        }\r\n        mwc-icon-button.reverse {\r\n          -webkit-transform:rotateY(180deg);\r\n          -moz-transform:rotateY(180deg);\r\n          -o-transform:rotateY(180deg);\r\n          -ms-transform:rotateY(180deg);\r\n        }\r\n        mwc-icon-button[disabled] {\r\n          opacity: 0.5;\r\n        }\r\n        img.iconBtn {\r\n          width: 20px;\r\n        }\r\n        div.input * {\r\n          margin: 10px 0 5px;\r\n        }\r\n        mwc-icon-button[hidden] {\r\n          display: none;\r\n        }\r\n        #resultDialog {\r\n          --mdc-dialog-min-width: 80vw;\r\n        }\r\n        vaadin-grid {\r\n          font-size: 12px;\r\n        }\r\n        sp-button[hidden] {\r\n          display: none;\r\n        }\r\n        .enterResultVal {\r\n          width: 75%;\r\n        }\r\n        @media (max-width: 460px) {\r\n          vaadin-grid {\r\n            font-size: 10px;\r\n          }\r\n          vaadin-grid-cell-content {\r\n            padding: 5px;\r\n          }\r\n          #resultDialog {\r\n            --mdc-dialog-min-width: 100vw;\r\n          }\r\n        }\r\n<style>\r\n            input {\r\n              border-style: solid;\r\n              border-color: #999999;\r\n              border-width: 1px;\r\n              border-radius: 7px;\r\n              font-family: Montserrat;\r\n              font-weight: bold;\r\n              /* font-size: 19px; */\r\n              background-color: #FFFFFF;\r\n              padding: 8px;\r\n              flex: 1;\r\n            }\r\n            .input-container {\r\n              display: flex;\r\n              align-items: center;\r\n            }\r\n            .input-container span {\r\n              font-family: Montserrat;\r\n              font-weight: bold;\r\n              /* font-size: 19px; */\r\n              margin: 0 4px;\r\n            }          \r\n          </style>          \r\n      `\r\n    ];\r\n  }  \r\n    static get properties() {\r\n        return {\r\n          enterResults: { type: Array },\r\n          selectedItems: { type: Array },\r\n          actionBeingPerformedModel: {type: Object},\r\n          procInstanceName: { type:String}\r\n        }\r\n    }\r\n    constructor() {\r\n        super()\r\n        this.enterResults=[]\r\n        this.selectedItems=[]\r\n        this.actionBeingPerformedModel={}\r\n    }\r\n    get erGrid() {return this.shadowRoot.querySelector(\"vaadin-grid#erGrid\")}\r\n    get resultDialog() {return this.shadowRoot.querySelector(\"tr-dialog#resultDialog\")}\r\n    get rItem() {return this.shadowRoot.querySelector(\"input[name=rItem]\")}\r\n    get rowTooltipEnterResults() {return this.shadowRoot.querySelector(\"#rowTooltipenterresults\")}\r\n    get uomDialog() {return this.shadowRoot.querySelector(\"tr-dialog#uomConvertionDialog\")}\r\n\r\n    resultTemplate(procInstanceName) {\r\n      //alert(procInstanceName)\r\n      this.procInstanceName=procInstanceName\r\n      // console.log('resultTemplate', 'this.actionBeingPerformedModel', this.actionBeingPerformedModel)\r\n      // if(this.actionBeingPerformedModel===undefined||this.actionBeingPerformedModel.dialogInfo===undefined||this.actionBeingPerformedModel.dialogInfo.name===undefined){return nothing}\r\n      // if (this.actionBeingPerformedModel.dialogInfo.name !== \"resultDialog\"&&\r\n      // this.actionBeingPerformedModel.dialogInfo.name !== \"uomConvertionDialog\") {return nothing}\r\n      // console.log('resultTemplate', 'actionBeingPerformedModel', this.actionBeingPerformedModel)\r\n      return html`\r\n\r\n      <style>\r\n      #resultDialog {\r\n        --mdc-dialog-min-width: 80vw;\r\n      }\r\n      vaadin-grid {\r\n        font-size: 12px;\r\n      }\r\n      sp-button[hidden] {\r\n        display: none;\r\n      }\r\n      .enterResultVal {\r\n        width: 75%;\r\n      }\r\n      @media (max-width: 460px) {\r\n        vaadin-grid {\r\n          font-size: 10px;\r\n        }\r\n        vaadin-grid-cell-content {\r\n          padding: 5px;\r\n        }\r\n        #resultDialog {\r\n          --mdc-dialog-min-width: 100vw;\r\n        }\r\n      }\r\n      #topLeft{\r\n        color: rgb(94, 145, 186);\r\n        font-family: Montserrat;\r\n        font-weight: bold;\r\n        font-size: calc(12px + 1.5vw);\r\n        text-align: center;        \r\n      }\r\n      </style>\r\n\r\n\r\n      <tr-dialog id=\"resultDialog\" ?open=${this.enterResults.length}\r\n        @opened=${() => this.setCellListenerEnterResults()}\r\n        @closing=${() => this.removeEvents()}\r\n        heading=\"\"\r\n        hideActions=\"\"\r\n        scrimClickAction=\"\">\r\n        ${this.actionBeingPerformedModel.dialogInfo===undefined||this.actionBeingPerformedModel===undefined ? nothing:\r\n        html`\r\n          ${this.selectedItems.length&&this.actionBeingPerformedModel.dialogInfo.resultHeaderObjectLabelTopLeft!==undefined ?\r\n            html`<label id=\"topLeft\" slot=\"topLeft\" style=\"font-size:12px\">${this.actionBeingPerformedModel.dialogInfo.resultHeaderObjectLabelTopLeft[\"label_\" + this.lang]} ${this.selectedItems[0].sample_id || this.selectedItems[0].id}</label>` : nothing\r\n          }\r\n          <vaadin-grid id=\"erGrid\" theme=\"row-dividers\" column-reordering-allowed multi-sort\r\n            .items=${this.enterResults}\r\n            @selected-items-changed=${e => {\r\n            // if (this.actionBeingPerformedModel.actionName == \"INSTRUMENT_EVENT_VARIABLES\"||\r\n            //     this.actionBeingPerformedModel.actionName == \"QUALIFIFICATION_EVENT_VARIABLES\"||\r\n            //     this.actionBeingPerformedModel.actionName == \"STUDY_OBJECT_SET_VARIABLE_VALUE\"\r\n            //     ) {\r\n              if (this.actionBeingPerformedModel.dialogInfo!==undefined&&\r\n                  this.actionBeingPerformedModel.dialogInfo.name!==undefined&&\r\n                  this.actionBeingPerformedModel.dialogInfo.name===\"resultDialog\"){      \r\n              this.selectedResults = []\r\n            } else {\r\n              this.selectedResults = e.detail.value\r\n            }\r\n          }}\r\n            .detailsOpenedItems=${this.selectedResults}\r\n            ${gridRowDetailsRenderer(this.detailRendererEnterResults)}>\r\n            ${this.desktop ?\r\n            html`<vaadin-grid-selection-column header=\"\" flex-grow=\"1\"></vaadin-grid-selection-column>` :\r\n            html`<vaadin-grid-selection-column header=\"\" width=\"65px\" resizable ></vaadin-grid-selection-column>`\r\n          }\r\n\r\n          ${this.actionBeingPerformedModel.dialogInfo!==undefined&&\r\n                this.actionBeingPerformedModel.dialogInfo.name!==undefined&&\r\n                this.actionBeingPerformedModel.dialogInfo.name===\"resultDialog\"&&\r\n                this.actionBeingPerformedModel.dialogInfo.subQueryName !==undefined&&\r\n                this.actionBeingPerformedModel.dialogInfo.subQueryName==='getParams' ?  \r\n            html`${this.instrumentEventList()}` \r\n            :html`${this.enterResultList()}`\r\n          }\r\n          </vaadin-grid>\r\n          <div id=\"rowTooltipenterresults\">&nbsp;</div>\r\n        `}\r\n      </tr-dialog>\r\n      <tr-dialog id=\"uomConvertionDialog\" ?open=${this.dataForDialog}\r\n        heading=\"UOM Convertion List\"\r\n        hideActions=\"\"\r\n        scrimClickAction=\"\">\r\n        <div class=\"layout vertical flex center-justified\">\r\n          <select @change=${e => this.setUOM(this.dataForDialog.result_id, e.target.value)}>\r\n            ${this.dataForDialog && this.dataForDialog.ucm.map(u =>\r\n          html`<option value=${u} ?selected=${u == this.dataForDialog.uom}>${u}</option>`\r\n        )}\r\n          </select>\r\n          <div style=\"margin-top:30px;text-align:center\">\r\n            <sp-button size=\"xl\" variant=\"secondary\" slot=\"secondaryAction\" dialogAction=\"decline\">\r\n              ${commonLangConfig.cancelDialogButton[\"label_\" + this.lang]}</sp-button>\r\n          </div>\r\n        </div>\r\n      </tr-dialog>\r\n      `\r\n    }\r\n\r\n\r\n    detailRendererEnterResults(result) {\r\n\r\n      //console.log('detailRendererEnterResults', result.sample_id, 'result', result)\r\n      let labels = {\r\n        \"warning_reason_label_en\": \"Warning Reason\", \"warning_reason_label_es\": \"Razón Aviso\",\r\n        \"locking_reason_label_en\": \"Locking Reason\", \"locking_reason_label_es\": \"Razón Bloqueo\"\r\n      }\r\n      let specAreaLabels = {\r\n        \"method_title\":{\"label_en\":\"Method\", \"label_es\":\"Método\"},\r\n        \"rule_title\":{\"label_en\":\"Range\", \"label_es\":\"Rango\"},\r\n        \"no_rule\":{\"label_en\":\"Has no limited range\", \"label_es\":\"No tiene rango asignado\"},\r\n        \"range_evaluation\":{\"label_en\":\"Evaluation\", \"label_es\":\"Evaluación\"}        \r\n      }\r\n      return html`\r\n        <div style=\"text-align:center;font-size:12px\">\r\n          <p>${result.spec_eval ?\r\n          html`${result.spec_eval == 'IN' || (result.spec_eval!==undefined&&result.spec_eval.toUpperCase().includes(\"NO_SPEC_LIMIT\")) ?\r\n            html`<mwc-icon style=\"color:green\">radio_button_checked</mwc-icon>` :\r\n            html`${result.spec_eval.toUpperCase().includes(\"OUT\") && result.spec_eval.toUpperCase().includes(\"SPEC\") ?\r\n              html`<mwc-icon style=\"color:red\">radio_button_checked</mwc-icon>` :\r\n              html`<mwc-icon style=\"color:orange\">radio_button_checked</mwc-icon>`\r\n              }`\r\n            }` :\r\n          html`<img style=\"height:24px; width: 24px;\" src=\"https://upload.wikimedia.org/wikipedia/commons/9/96/Button_Icon_White.svg\">`\r\n        }</p>\r\n          <p>>${specAreaLabels.method_title[\"label_\"+this.lang]}: ${result.method_name} (v${result.method_version})</p>\r\n          <p>${specAreaLabels.rule_title[\"label_\"+this.lang]}: ${result.spec_rule_info===undefined||result.spec_rule_info[0]===undefined||result.spec_rule_info[0].ruleRepresentation===undefined? specAreaLabels.no_rule[\"label_\"+this.lang]:result.spec_rule_info[0].ruleRepresentation}</p>\r\n          <p>${specAreaLabels.range_evaluation[\"label_\"+this.lang]}:           \r\n            ${result.spec_eval.toUpperCase().includes(\"NO_SPEC_LIMIT\") ? \r\n               html`specAreaLabels.no_rule[\"label_\"+this.lang]` :  html`${result.spec_eval} (${result.spec_eval_detail})`\r\n            }\r\n          </p >\r\n          ${result.is_locked ?\r\n          html`<p style=\"color:rgb(255 8 8)\">${labels['locking_reason_label_' + this.lang]}: ${result.locking_reason[\"message_\" + this.lang]}</p>` : nothing\r\n        }\r\n          ${result.warning_reason ?\r\n          html`<p style=\"color:#0085ff\">${labels['warning_reason_label_' + this.lang]}: ${result.warning_reason[\"message_\" + this.lang]}</p>` : nothing\r\n        }\r\n        </div>\r\n      `\r\n    }    \r\n    setCellListenerEnterResults() {\r\n      console.log('setCellListenerEnterResults EnterResults')\r\n      // if (this.actionBeingPerformedModel.actionName == \"INSTRUMENT_EVENT_VARIABLES\"||\r\n      //     this.actionBeingPerformedModel.actionName == \"QUALIFIFICATION_EVENT_VARIABLES\"||\r\n      //     this.actionBeingPerformedModel.actionName == \"STUDY_OBJECT_SET_VARIABLE_VALUE\") {\r\n      if (this.actionBeingPerformedModel.dialogInfo!==undefined&&\r\n          this.actionBeingPerformedModel.dialogInfo.name!==undefined&&\r\n          this.actionBeingPerformedModel.dialogInfo.name===\"resultDialog\"){\r\n      } else {\r\n        if (this.erGrid===undefined||this.erGrid===null){return}\r\n        this.rowTooltipEnterResults.style.display = \"block\"\r\n        this.rowTooltipEnterResults.style.visibility = \"hidden\"\r\n        this.rowTooltipEnterResults.style.fontSize = \"12px\"\r\n        this.rowTooltipEnterResults.style.color = \"white\"\r\n        let rows = this.erGrid.shadowRoot.querySelectorAll(\"tr[part=row]\")\r\n        rows.forEach((r, i) => {\r\n          if (i > 0 && this.enterResults[i - 1]) {\r\n            r.removeEventListener('mouseenter', () => this.showLockReasonEnterResults(i))\r\n            r.removeEventListener('mouseleave', this.hideLockReasonEnterResults.bind(this))\r\n          }\r\n          if (i > 0 && this.enterResults[i - 1] && (this.enterResults[i - 1].is_locked || this.enterResults[i - 1].warning_reason)) {\r\n            r.addEventListener('mouseenter', () => this.showLockReasonEnterResults(i))\r\n            r.addEventListener('mouseleave', this.hideLockReasonEnterResults.bind(this))\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    showLockReasonEnterResults(i) {\r\n\r\n      let labels = {\r\n        \"warning_reason_label_en\": \"Warning Reason\", \"warning_reason_label_es\": \"Razón Aviso\",\r\n        \"locking_reason_label_en\": \"Locking Reason\", \"locking_reason_label_es\": \"Razón Bloqueo\"\r\n      }\r\n      if (this.enterResults[i - 1].is_locked) {\r\n        this.rowTooltipEnterResults.style.backgroundColor = \"rgb(255 8 8)\"\r\n        this.rowTooltipEnterResults.style.visibility = \"visible\"\r\n        this.rowTooltipEnterResults.textContent = labels['locking_reason_label_' + this.lang] + \": \" + (this.enterResults[i - 1].locking_reason[\"message_\" + this.lang])\r\n      } else if (this.enterResults[i - 1].warning_reason) {\r\n        this.rowTooltipEnterResults.style.backgroundColor = \"#0085ff\"\r\n        this.rowTooltipEnterResults.style.visibility = \"visible\"\r\n        this.rowTooltipEnterResults.textContent = labels['warning_reason_label_' + this.lang] + \": \" + this.enterResults[i - 1].warning_reason[\"message_\" + this.lang]\r\n      }\r\n      console.log(this.rowTooltipEnterResults.textContent)\r\n    }\r\n    hideLockReasonEnterResults() {\r\n      this.rowTooltipEnterResults.style.visibility = \"hidden\"\r\n    }\r\n\r\n\r\n    enterResultList() {\r\n      //alert(this.actionBeingPerformedModel.actionName)\r\n      //console.log('enterResultList', 'gridDef', this.actionBeingPerformedModel.dialogInfo.resultHeader)\r\n      if (this.actionBeingPerformedModel===undefined||this.actionBeingPerformedModel.dialogInfo===undefined||this.actionBeingPerformedModel.dialogInfo.resultHeader===undefined)\r\n      {return html``}\r\n      \r\n      return Object.entries(this.actionBeingPerformedModel.dialogInfo.resultHeader).map(([key, value], i) =>\r\n        html`\r\n          ${this.desktop ?\r\n            html`\r\n              ${i == 0 ?\r\n                html`<vaadin-grid-column \r\n                  ${columnBodyRenderer(this.specRenderer)}\r\n                  text-align=\"center\" \r\n                  flex-grow=\"0\"\r\n                  path=\"${key}\" \r\n                  header=\"${value['label_' + this.lang]}\"></vaadin-grid-column>` :\r\n                  html`${key == \"raw_value\" ?\r\n                    html`<vaadin-grid-column \r\n                      ${columnBodyRenderer(this.valRenderer)}\r\n                      text-align=\"center\" \r\n                      resizable \r\n                      width=\"130px\"\r\n                      path=\"${key}\" \r\n                      header=\"${value['label_' + this.lang]}\"></vaadin-grid-column>` \r\n                    :\r\n                    html`${key == \"sar2_raw_value\" ?\r\n                      html`<vaadin-grid-column \r\n                        ${columnBodyRenderer(this.valRenderer)}\r\n                        text-align=\"center\" \r\n                        resizable \r\n                        width=\"130px\"\r\n                        path=\"${key}\" \r\n                        header=\"${value['label_' + this.lang]}\"></vaadin-grid-column>` \r\n                      :\r\n                      html`${key == \"uom\" ?\r\n                        html`<vaadin-grid-column ${columnBodyRenderer(this.uomRenderer)} resizable flex-grow=1 text-align='center' path=\"${key}\" header=\"${value['label_' + this.lang]}\"></vaadin-grid-column>` \r\n                      :\r\n                        html`<vaadin-grid-column resizable flex-grow=1 path=\"${key}\" header=\"${value['label_' + this.lang]}\"></vaadin-grid-column>`\r\n                      }`\r\n                    }`\r\n                  }`\r\n              }\r\n            ` :\r\n            html`\r\n              ${i == 0 ?\r\n                html`<vaadin-grid-column \r\n                  ${columnBodyRenderer(this.specRenderer)}\r\n                  width=\"65px\" resizable \r\n                  path=\"${key}\" \r\n                  header=\"${value['label_' + this.lang]}\"></vaadin-grid-column>` :\r\n                html`${key == \"raw_value\" ?\r\n                  html`<vaadin-grid-column \r\n                    ${columnBodyRenderer(this.valRenderer)}\r\n                    width=\"130px\" resizable \r\n                    path=\"${key}\" \r\n                    header=\"${value['label_' + this.lang]}\"></vaadin-grid-column>` \r\n                  :\r\n                  html`${key == \"sar2_raw_value\" ?\r\n                    html`<vaadin-grid-column \r\n                      ${columnBodyRenderer(this.valRenderer)}\r\n                      text-align=\"center\" \r\n                      resizable \r\n                      width=\"130px\"\r\n                      path=\"${key}\" \r\n                      header=\"${value['label_' + this.lang]}\"></vaadin-grid-column>` \r\n                  :                  \r\n                  html`${key == \"uom\" ?\r\n                    html`<vaadin-grid-column ${columnBodyRenderer(this.uomRenderer)} resizable width=\"65px\" path=\"${key}\" header=\"${value['label_' + this.lang]}\"></vaadin-grid-column>` \r\n                  :\r\n                    html`<vaadin-grid-column resizable width=\"65px\" path=\"${key}\" header=\"${value['label_' + this.lang]}\"></vaadin-grid-column>`\r\n                    }`\r\n                  }`\r\n                }`\r\n              }\r\n            `\r\n          }\r\n        `\r\n      )\r\n    }\r\n\r\n    instrumentEventList() {\r\n      return Object.entries(this.actionBeingPerformedModel.resultHeader).map(([key, value], i) =>\r\n        html`\r\n          ${this.desktop ?\r\n            html`\r\n              ${key == \"value\" ?\r\n                html`<vaadin-grid-column \r\n                  ${columnBodyRenderer(this.valRendererInstrument)}\r\n                  text-align=\"center\" \r\n                  width=\"130px\"\r\n                  path=\"${key}\" \r\n                  header=\"${value['label_' + this.lang]}\"></vaadin-grid-column>` :\r\n                html`<vaadin-grid-column resizable flex-grow=1 path=\"${key}\" header=\"${value['label_' + this.lang]}\"></vaadin-grid-column>`\r\n              }\r\n            ` :\r\n            html`\r\n              ${key == \"value\" ?\r\n                html`<vaadin-grid-column \r\n                  ${columnBodyRenderer(this.valRendererInstrument)}\r\n                  width=\"130px\" resizable\r\n                  path=\"${key}\" \r\n                  header=\"${value['label_' + this.lang]}\"></vaadin-grid-column>` :\r\n                html`<vaadin-grid-column resizable width=\"65px\" path=\"${key}\" header=\"${value['label_' + this.lang]}\"></vaadin-grid-column>`\r\n              }\r\n            `\r\n          }\r\n        `\r\n      )\r\n    }\r\n    changeUOM() {\r\n      let serviceAPIurl=this.getServiceAPIUrl(this.actionBeingPerformedModel)\r\n      let params = serviceAPIurl + (this.actionBeingPerformedModel.endPoint ? this.actionBeingPerformedModel.endPoint : this.config.SampleAPIactionsUrl)\r\n        + '?' + new URLSearchParams(this.reqParams)\r\n      this.execResult(params)\r\n    }\r\n    enterResult() { \r\n      let serviceAPIurl=this.getServiceAPIUrl(this.actionBeingPerformedModel)     \r\n      let params = serviceAPIurl + (this.actionBeingPerformedModel.endPoint ? this.actionBeingPerformedModel.endPoint : this.config.SampleAPIactionsUrl)\r\n        + '?' + new URLSearchParams(this.reqParams)\r\n   //console.log('enterResult', params)\r\n      this.execResult(params)\r\n    }\r\n\r\n    execResult(params) {\r\n      this.fetchApi(params).then(j => {\r\n        this.reloadDialog()\r\n        this.dataForDialog = null\r\n      })\r\n    }\r\n    removeEvents() {\r\n      // if (this.actionBeingPerformedModel.actionName == \"INSTRUMENT_EVENT_VARIABLES\"||\r\n      //     this.actionBeingPerformedModel.actionName == \"QUALIFIFICATION_EVENT_VARIABLES\"||\r\n      //     this.actionBeingPerformedModel.actionName == \"STUDY_OBJECT_SET_VARIABLE_VALUE\") {\r\n      if (this.actionBeingPerformedModel.dialogInfo!==undefined&&\r\n          this.actionBeingPerformedModel.dialogInfo.name!==undefined&&\r\n          this.actionBeingPerformedModel.dialogInfo.name===\"resultDialog\"){\r\n      } else {\r\n        if (this.rowTooltipEnterResults===undefined||this.rowTooltipEnterResults===null){return}\r\n        this.rowTooltipEnterResults.textContent = \"\"\r\n        this.rowTooltipEnterResults.style.visibility = \"hidden\"\r\n        let rows = this.erGrid.shadowRoot.querySelectorAll(\"tr[part=row]\")\r\n        rows.forEach((r, i) => {\r\n          if (i > 0 && this.enterResults[i - 1] && this.enterResults[i - 1].is_locked) {\r\n            r.removeEventListener('mouseenter', this.showLockReasonEnterResults.bind(this))\r\n            r.removeEventListener('mouseleave', this.hideLockReasonEnterResults.bind(this))\r\n          }\r\n        })\r\n      }\r\n      this.curResultRef = undefined\r\n      this.enterResults = []\r\n    }\r\n\r\n    valRenderer(result) {\r\n      let rawValue=''\r\n      if (this.actionBeingPerformedModel.actionName.toUpperCase().includes('SECOND')){\r\n        rawValue = result.sar2_raw_value\r\n      }else{\r\n        rawValue = result.raw_value\r\n      }\r\n\r\n      if (result.is_locked) {\r\n        return html`\r\n          <div style=\"width: 100%;height: 55px;position: relative; background-color: rgb(255 8 8 / 20%)\">\r\n            <div style=\"width: 100%;text-align:center; margin: 0;position: absolute;top: 50%;-ms-transform: translateY(-50%);transform: translateY(-50%);\">${result.raw_value}</div>\r\n          </div>\r\n        `\r\n      } else {\r\n        if (result.param_type.toUpperCase() == \"CALC\") {\r\n          return html`<input class=\"enterResultVal\" type=\"text\" .value=${rawValue} \r\n            disabled>\r\n          `\r\n        } else if (result.param_type.toUpperCase() == \"FILE\") {\r\n          return html` \r\n          <upload-button procInstanceName=\"${this.procInstanceName}\" .config=\"${this.config}\" .action=\"${this.actionBeingPerformedModel}\" .selectedItem=\"${result}\" \r\n            name=\"upload\"  label=\"File\"></upload-button>\r\n<!--          <mwc-icon-button icon=\"print\" @click=${this.printCoa}></mwc-icon-button>   \r\n          <mwc-icon-button icon=\"print\" @click=${() => {this.openFile(result)}}></mwc-icon-button>   \r\n          -->\r\n          `\r\n        } else if (result.param_type.toUpperCase() == \"TEXT\" || result.param_type.toUpperCase() == \"QUALITATIVE\") {\r\n          return html`<input class=\"enterResultVal\" type=\"text\" .value=${rawValue} \r\n            ?disabled=${this.actionBeingPerformedModel.dialogInfo.readOnly}\r\n            @keydown=${e => e.keyCode == 13 && this.setResult(result, e.target)}>`\r\n        } else if (result.param_type.toUpperCase().indexOf(\"LIST\") > -1) {\r\n//console.log('valRenderer', 'result', result)\r\n          let lEntry = ('|'+result.list_entry).split(\"|\")\r\n          if (result.value===undefined||result.value.length==0){\r\n            let blankArr=[\"\"]\r\n            lEntry=[blankArr].concat(lEntry)\r\n          }\r\n          return html`\r\n            ${result.param_type.toUpperCase() == \"TEXTLIST\" ?\r\n              html`\r\n                <input class=\"enterResultVal\" list=\"listEntry${result.result_id}\" \r\n                  .value=${rawValue}\r\n                  @keydown=${e => e.keyCode == 13 && this.setResult(result, e.target)}>\r\n                <datalist id=\"listEntry${result.result_id}\">\r\n                  ${lEntry.map(l =>\r\n                    html`<option value=\"${l}\">${l}`\r\n                  )}\r\n                </datalist>\r\n              ` :\r\n              html`\r\n                <select class=\"enterResultVal\" @change=${e => this.setResult(result, e.target)}>\r\n                  ${lEntry.map(l =>\r\n                    html`<option value=\"${l}\" ?selected=${l==rawValue}>${l}`\r\n                  )}\r\n                </select>\r\n              `\r\n            }\r\n          `\r\n        } else if (result.param_type.toUpperCase() == \"REAL\") {\r\n          let step = result.max_dp ? 1 / Math.pow(10, result.max_dp) : 0.01\r\n          let min = result.min_allowed ? result.min_allowed : 0\r\n          let max = result.max_allowed && result.max_allowed\r\n          return html`\r\n            ${this[`${result.param_type+''+result.result_id}`]}\r\n            <input class=\"enterResultVal\" id=\"${result.param_type+''+result.result_id}\" \r\n              ?disabled=${this.actionBeingPerformedModel.dialogInfo.readOnly} type=\"number\" \r\n              .step=${step} \r\n              .min=${min}\r\n              .max=${max}\r\n              .value=${this.adjustValUndetermined(result)} \r\n              @input=${e=>this.setValidVal(e, result)}\r\n              @keydown=${e => e.keyCode == 13 && this.setResult(result, e.target)}>\r\n          `\r\n        } else {\r\n          let min = result.min_allowed!==undefined && result.min_allowed.length>0 ? result.min_allowed : null\r\n          let max = result.max_allowed!==undefined && result.max_allowed.length>0 ? result.max_allowed : null\r\n          return html`\r\n            ${this[`${result.param_type+''+result.result_id}`]}\r\n            <input class=\"enterResultVal\" id=\"${result.param_type+''+result.result_id}\" \r\n              ?disabled=${this.actionBeingPerformedModel.dialogInfo.readOnly} type=\"number\" \r\n              .min=${min}\r\n              .max=${max}\r\n              .value=${this.adjustValUndetermined(result)} \r\n              @input=${e=>this.setValidVal(e, result)}\r\n              @keydown=${e => e.keyCode == 13 && this.setResult(result, e.target)}>\r\n          `\r\n        }\r\n      }\r\n    }\r\n\r\n    valRendererInstrument(result) {\r\n      //alert(result.param_type)\r\n      //console.log('valRendererInstrument', 'result', result)\r\n      if (result.is_locked) {\r\n        return html`\r\n          <div style=\"width: 100%;height: 55px;position: relative; background-color: rgb(255 8 8 / 20%)\">\r\n            <div style=\"width: 100%;text-align:center; margin: 0;position: absolute;top: 50%;-ms-transform: translateY(-50%);transform: translateY(-50%);\">${result.raw_value}</div>\r\n          </div>\r\n        `\r\n      } else {\r\n        if (result.param_type.toUpperCase() == \"CALC\") {\r\n          return html`<input class=\"enterResultVal\" type=\"text\" .value=${rawValue} \r\n            disabled>\r\n          `\r\n        } else if (result.param_type.toUpperCase() == \"FILE\") {\r\n          return html` \r\n          <upload-button procInstanceName=\"${this.procInstanceName}\" .config=\"${this.config}\" .action=\"${this.actionBeingPerformedModel}\" .selectedItem=\"${result}\" \r\n            name=\"upload\"  label=\"File\"></upload-button>\r\n<!--          <mwc-icon-button icon=\"print\" @click=${this.printCoa}></mwc-icon-button>   \r\n          <mwc-icon-button icon=\"print\" @click=${() => {this.openFile(result)}}></mwc-icon-button>   \r\n          -->\r\n          `\r\n        }else if (result.param_type.toUpperCase() == \"TEXT\" || result.param_type == \"qualitative\") {\r\n          return html`<input class=\"enterResultVal\" type=\"text\" .value=${result.value} \r\n            ?disabled=${this.actionBeingPerformedModel.dialogInfo.readOnly}\r\n            @keydown=${e => e.keyCode == 13 && this.setResultInstrument(result, e)}>`\r\n        } else if (result.param_type.toUpperCase().indexOf(\"LIST\") > -1) {\r\n          let lEntry = result.allowed_values.split(\"|\")\r\n          if (result.value.length==0){\r\n            let blankArr=[\"\"]\r\n            lEntry=[blankArr].concat(lEntry)\r\n          }\r\n          return html`\r\n            ${result.param_type.toUpperCase() == \"TEXTLIST\" ?\r\n              html`\r\n                <input class=\"enterResultVal\" list=\"listEntry${result.result_id}\" \r\n                  .value=${result.value}\r\n                  @keydown=${e => e.keyCode == 13 && this.setResultInstrument(result, e)}>\r\n                <datalist id=\"listEntry${result.result_id}\">\r\n                  ${lEntry.map(l =>\r\n                    html`<option value=\"${l}\">${l}`\r\n                  )}\r\n                </datalist>\r\n              ` :\r\n              html`\r\n                <select class=\"enterResultVal\" @change=${e => this.setResultInstrument(result, e)}>\r\n                  ${lEntry.map(l =>\r\n                    html`<option value=\"${l}\" ?selected=${l==result.value}>${l}`\r\n                  )}\r\n                </select>\r\n              `\r\n            }\r\n          `\r\n        } else if (result.param_type.toUpperCase() == \"REAL\") {\r\n          let step = result.max_dp ? 1 / Math.pow(10, result.max_dp) : 0.01\r\n          let min = result.min_allowed ? result.min_allowed : 0\r\n          let max = result.max_allowed && result.max_allowed\r\n          return html`\r\n            ${this[`${result.param_type+''+result.result_id}`]}\r\n            <input class=\"enterResultVal\" id=\"${result.param_type+''+result.result_id}\" \r\n              ?disabled=${this.actionBeingPerformedModel.dialogInfo.readOnly} type=\"number\" \r\n              .step=${step} \r\n              .min=${min}\r\n              .max=${max}\r\n              .value=${result.value} \r\n              @input=${e=>this.setValidVal(e, result)}\r\n              @keydown=${e => e.keyCode == 13 && this.setResultInstrument(result, e)}>\r\n          `\r\n        } else {\r\n          let min = result.min_allowed ? result.min_allowed : 0\r\n          let max = result.max_allowed && result.max_allowed\r\n          return html`\r\n            ${this[`${result.param_type+''+result.result_id}`]}\r\n            <input class=\"enterResultVal\" id=\"${result.param_type+''+result.result_id}\" \r\n              ?disabled=${this.actionBeingPerformedModel.dialogInfo.readOnly} type=\"number\" \r\n              .min=${min}\r\n              .max=${max}\r\n              .value=${result.value}\r\n              @input=${e=>this.setValidVal(e, result)}\r\n              @keydown=${e => e.keyCode == 13 && this.setResultInstrument(result, e)}>\r\n          `\r\n        }\r\n      }\r\n    }\r\n\r\n    setValidVal(e, result) {\r\n      if (typeof result.min_allowed == 'number' && e.target.value < result.min_allowed) {\r\n        e.target.value = result.min_allowed\r\n        return\r\n      }\r\n      if (typeof result.max_allowed == 'number' && e.target.value > result.max_allowed) {\r\n        e.target.value = result.max_allowed\r\n        return\r\n      }\r\n      // make sure the decimal length <= max_dp when manual input\r\n      if (result.max_dp) {\r\n        let v = e.target.value.split(\".\")\r\n        if (v.length > 1 && v[1].length > result.max_dp) {\r\n          v[1] = v[1].substring(0, result.max_dp)\r\n          e.target.value = Number(v.join(\".\"))\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * if min/max_undetermined defined, do this method\r\n     * for example max_undetermined = 10, set the value to be 10 when users input the field > 10\r\n     * add operator \">\" or \"<\" to describe it\r\n     * @param {*} result the active result\r\n     * @param {*} elmSet which element field, optional for update the field value after action api\r\n     */\r\n    adjustValUndetermined(result, elmSet) {\r\n      console.log('adjustValUndetermined', 'result', result, 'elmSet', elmSet)\r\n      let lbl = \"\", raw = \"\"      \r\n      if (result.raw_value != \"\") {\r\n        if (this.actionBeingPerformedModel.actionName.toUpperCase().includes('SECOND')){\r\n          raw = result.sar2_raw_value\r\n          if (raw===undefined||String(raw).length==0){\r\n            raw = result.raw_value  \r\n          }\r\n        }else{\r\n          raw = result.raw_value\r\n        }\r\n        //alert('adjustValUndetermined '+this.actionBeingPerformedModel.actionName+' 1)'+result.raw_value+' 2)'+result.sar2_raw_value)\r\n        //raw = result.raw_value\r\n        if (typeof result.min_undetermined == \"number\") {\r\n          if (Number(result.raw_value) < result.min_undetermined) {\r\n            lbl = \"<\"\r\n            raw = result.min_undetermined\r\n          } else if (typeof result.max_undetermined == \"number\") {\r\n            if (Number(result.raw_value) > result.max_undetermined) {\r\n              lbl = \">\"\r\n              raw = result.max_undetermined\r\n            }\r\n          }\r\n        } else if (typeof result.max_undetermined == \"number\") {\r\n          if (Number(result.raw_value) > result.max_undetermined) {\r\n            lbl = \">\"\r\n            raw = result.max_undetermined\r\n          }\r\n        }\r\n      }\r\n      this[result.param_type+''+result.result_id] = lbl\r\n      if (elmSet) {\r\n        elmSet.value = raw\r\n      } else {\r\n        return raw\r\n      }\r\n    }\r\n\r\n    uomRenderer(result) {\r\n      if (result.uom) {\r\n        if (result.uom_conversion_mode) {\r\n          let ucm = result.uom_conversion_mode.split(\"|\")\r\n          return html`<mwc-button \r\n            @click=${() => this.dataForDialog = { ucm, uom: result.uom, result_id: result.result_id }}\r\n            ?disabled=${!result.raw_value} label=\"${result.uom}\" icon=\"edit\"></mwc-button>`\r\n        }\r\n        return result.uom\r\n      }\r\n    }\r\n\r\n    setUOM(resultId, newResultUom) {\r\n      this.targetValue = { resultId, newResultUom }\r\n      let actionIdx = this.actionBeingPerformedModel.dialogInfo.action.findIndex(a => a.clientMethod == \"changeUOM\")\r\n      this.selectedDialogAction = this.actionBeingPerformedModel.dialogInfo.action[actionIdx]\r\n      this.actionMethod(this.selectedDialogAction, false)\r\n    }\r\n    specRenderer(result) {\r\n      if (result===undefined||result.spec_eval===undefined){\r\n        return html``\r\n      }\r\n      if (result.spec_eval) {\r\n        if (result.spec_eval == 'IN') {\r\n          return html`<mwc-icon style=\"color:green\">radio_button_checked</mwc-icon>`\r\n        } else {\r\n          if (result.spec_eval.toUpperCase().includes(\"OUT\") && result.spec_eval.toUpperCase().includes(\"SPEC\")) {\r\n            return html`<mwc-icon style=\"color:red\">radio_button_checked</mwc-icon>`\r\n          }else if (result.spec_eval.toUpperCase().includes(\"NO_SPEC_LIMIT\") ) {\r\n            return html`<mwc-icon style=\"color:green\">radio_button_checked</mwc-icon>`\r\n          } else {\r\n            return html`<mwc-icon style=\"color:orange\">radio_button_checked</mwc-icon>`\r\n          }\r\n        }\r\n      } else {\r\n        return html`<img style=\"height:24px; width: 24px;\" src=\"https://upload.wikimedia.org/wikipedia/commons/9/96/Button_Icon_White.svg\">`\r\n      }\r\n    }\r\n    openFile(res){\r\n      const jsonString = res.attachment_jsonstring //attachment //attachment_text\r\n      const jsonData = JSON.parse(jsonString);\r\n      const byteData = jsonData.data;\r\n  \r\n      const blob = new Blob([byteData], { type: 'application/octet-stream' });\r\n      const url = URL.createObjectURL(blob);\r\n  \r\n      window.open(url, '_blank');      \r\n    }\r\n\r\n    downloadFile(res) {\r\n      const jsonString = res.attachment\r\n  \r\n      const jsonData = JSON.parse(jsonString);\r\n      const byteData = jsonData.data;\r\n  \r\n      const blob = new Blob([byteData], { type: 'application/octet-stream' });\r\n      const url = URL.createObjectURL(blob);\r\n  \r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = 'file.txt'; // Specify the desired file name\r\n      link.click();\r\n    }    \r\n\r\n\r\n    getResult() {\r\n      console.log('getResult', 'SampleAPIqueriesUrl', 'this.selectedItems[0]', this.selectedItems[0], 'action', this.actionBeingPerformedModel)\r\n\r\n      let queryDefinition=this.actionBeingPerformedModel.dialogInfo.viewQuery\r\n      this.deactivatedObjects = []\r\n      let APIParams=this.getAPICommonParams(queryDefinition)\r\n      let viewParams=this.jsonParam(queryDefinition, this.selectedItems[0])\r\n      let endPointUrl=this.getQueryAPIUrl(queryDefinition)\r\n      if (String(endPointUrl).toUpperCase().includes(\"ERROR\")){\r\n          alert(endPointUrl)\r\n          return\r\n      }\r\n      let serviceAPIurl=this.getServiceAPIUrl(this.actionBeingPerformedModel)  \r\n      let params = serviceAPIurl + endPointUrl\r\n      + '?' + new URLSearchParams(APIParams) + '&'+ new URLSearchParams(viewParams)\r\n\r\n\r\n//      let params = this.config.backendUrl + (this.actionBeingPerformedModel.endPoint ? this.actionBeingPerformedModel.endPoint : this.config.SampleAPIqueriesUrl)\r\n//        + '?' + new URLSearchParams(this.reqParams)\r\n      this.fetchApi(params).then(j => {\r\n        if (j && !j.is_error) {\r\n          if (j.length==0){            \r\n            //alert('Found no results')\r\n\r\n            this.dispatchEvent(new CustomEvent(\"error\", {\r\n              detail: {\r\n                is_error: true,\r\n                message_en: 'Found no results',\r\n                message_es: 'No se encontraron resultados'\r\n              },\r\n              bubbles: true,\r\n              composed: true\r\n            }))            \r\n          }\r\n          if (this.curResultRef) {\r\n            if (j.message!==undefined&&j.message.includes('unexpected')){\r\n              return\r\n            }\r\n            let r = j.filter(d => d.result_id == this.curResultRef.resId)\r\n            \r\n            if (r.length) {\r\n              if (this.curResultRef.elm.type == \"number\") {\r\n                this.adjustValUndetermined(r[0], this.curResultRef.elm)\r\n              } else {\r\n                this.curResultRef.elm.value = r[0].raw_value\r\n              }\r\n            }\r\n          }\r\n          this.curResultRef = undefined\r\n          this.selectedResults = []\r\n          this.enterResults = j\r\n          this.requestUpdate()\r\n        } else {\r\n          this.dispatchEvent(new CustomEvent(\"error\", {\r\n            detail: {\r\n              is_error: true,\r\n              message_en: this.actionBeingPerformedModel.alertMsg.empty[\"label_en\"],\r\n              message_es: this.actionBeingPerformedModel.alertMsg.empty[\"label_es\"]\r\n            },\r\n            bubbles: true,\r\n            composed: true\r\n          }))\r\n          console.log(this.actionBeingPerformedModel.alertMsg.empty[\"label_en\"])\r\n        }\r\n      })\r\n    }\r\n\r\n    getParams() {\r\n      console.log('getResult', 'SampleAPIqueriesUrl', 'this.selectedItems[0]', this.selectedItems[0], 'action', this.actionBeingPerformedModel)\r\n\r\n      let queryDefinition=this.actionBeingPerformedModel.dialogInfo.viewQuery\r\n      this.deactivatedObjects = []\r\n      let APIParams=this.getAPICommonParams(queryDefinition)\r\n      let viewParams=this.jsonParam(queryDefinition, this.selectedItems[0])\r\n      let endPointUrl=this.getQueryAPIUrl(queryDefinition)\r\n      if (String(endPointUrl).toUpperCase().includes(\"ERROR\")){\r\n          alert(endPointUrl)\r\n          return\r\n      }\r\n      let serviceAPIurl=this.getServiceAPIUrl(this.actionBeingPerformedModel)  \r\n      let params = serviceAPIurl + endPointUrl\r\n      + '?' + new URLSearchParams(APIParams) + '&'+ new URLSearchParams(viewParams)\r\n\r\n\r\n//      let params = this.config.backendUrl + (this.actionBeingPerformedModel.endPoint ? this.actionBeingPerformedModel.endPoint : this.config.SampleAPIqueriesUrl)\r\n//        + '?' + new URLSearchParams(this.reqParams)\r\n      this.fetchApi(params).then(j => {\r\n        if (j && !j.is_error) {\r\n          if (j.length==0){            \r\n            //alert('Found no results')\r\n\r\n            this.dispatchEvent(new CustomEvent(\"error\", {\r\n              detail: {\r\n                is_error: true,\r\n                message_en: 'Found no results',\r\n                message_es: 'No se encontraron resultados'\r\n              },\r\n              bubbles: true,\r\n              composed: true\r\n            }))            \r\n          }\r\n          if (this.curResultRef) {\r\n            if (j.message!==undefined&&j.message.includes('unexpected')){\r\n              return\r\n            }\r\n            let r = j.filter(d => d.result_id == this.curResultRef.resId)\r\n            \r\n            if (r.length) {\r\n              if (this.curResultRef.elm.type == \"number\") {\r\n                this.adjustValUndetermined(r[0], this.curResultRef.elm)\r\n              } else {\r\n                this.curResultRef.elm.value = r[0].raw_value\r\n              }\r\n            }\r\n          }\r\n          this.curResultRef = undefined\r\n          this.selectedResults = []\r\n          this.enterResults = j\r\n          this.requestUpdate()\r\n        } else {\r\n          this.dispatchEvent(new CustomEvent(\"error\", {\r\n            detail: {\r\n              is_error: true,\r\n              message_en: this.actionBeingPerformedModel.alertMsg.empty[\"label_en\"],\r\n              message_es: this.actionBeingPerformedModel.alertMsg.empty[\"label_es\"]\r\n            },\r\n            bubbles: true,\r\n            composed: true\r\n          }))\r\n          console.log(this.actionBeingPerformedModel.alertMsg.empty[\"label_en\"])\r\n        }\r\n      })\r\n    }\r\n\r\n    getInstEventResult() {\r\n      let params = this.config.backendUrl + this.config.ApiInstrumentsAPIqueriesUrl\r\n        + '?' + new URLSearchParams(this.reqParams)\r\n      this.fetchApi(params).then(j => {\r\n        if (j && !j.is_error) {\r\n          if (this.curResultRef) {\r\n            let r = j.filter(d => d.event_id == this.curResultRef.evtId)\r\n            if (r.length) {\r\n              this.curResultRef.elm.value = r[0].value\r\n            }\r\n          }\r\n          this.selectedResults = []\r\n          this.enterResults = j\r\n          this.erGrid.items = j\r\n          this.requestUpdate()\r\n        } else {\r\n          this.dispatchEvent(new CustomEvent(\"error\", {\r\n            detail: {\r\n              is_error: true,\r\n              message_en: this.selectedAction.alertMsg.empty[\"label_en\"],\r\n              message_es: this.selectedAction.alertMsg.empty[\"label_es\"]\r\n            },\r\n            bubbles: true,\r\n            composed: true\r\n          }))\r\n          console.log(this.selectedAction.alertMsg.empty[\"label_en\"])\r\n        }\r\n      })\r\n    }    \r\n     \r\n    setResult(result, target) {\r\n      //alert('TrazitEnterResultWithSpec line 798-setResult')\r\n      let resId=''\r\n      if (this.actionBeingPerformedModel.actionName.toUpperCase().includes('SECOND')){\r\n\r\n        if (result.sar2_result_id===undefined||result.sar2_result_id.length==0){\r\n        this.dispatchEvent(new CustomEvent(\"error\", {\r\n          detail: {\r\n            is_error: true,\r\n            message_en: 'This result has no second entry feature enabled',\r\n            message_es: 'Funcionalidad Segunda Entrada no habilitada para este resultado'\r\n          },\r\n          bubbles: true,\r\n          composed: true\r\n        }))   \r\n        return\r\n        }\r\n        resId = result.sar2_result_id\r\n      }else{\r\n        resId = result.result_id\r\n      }      \r\n      let newValue = target.value\r\n      this.targetValue = {\r\n        rawValueResult: newValue,\r\n        resultId: resId,\r\n        eventId: result.event_id,\r\n        instrumentName: result.instrument,\r\n        variableName: result.param_name\r\n      }\r\n      //console.log('setResult', 'targetValue', this.targetValue)\r\n      // vaadin grid field rebinding doesn't work, so let's do manually\r\n      // ClientMethod::getResult\r\n      this.curResultRef = { elm: target, resId: result.result_id, evtId: result.event_id }\r\n      let act = JSON.stringify(this.actionBeingPerformedModel.dialogInfo.action[0])\r\n      this.selectedDialogAction = JSON.parse(act)\r\n      let rawValue=''\r\n      if (this.actionBeingPerformedModel.actionName.toUpperCase().includes('SECOND')){\r\n        rawValue = result.sar2_raw_value\r\n      }else{\r\n        rawValue = result.raw_value\r\n      }\r\n      //console.log('setResult Before', 'resId', resId, 'selectedDialogAction', this.selectedDialogAction, 'this.selectedItems', this.selectedItems)\r\n      if (rawValue) {\r\n        this.selectedDialogAction.actionName = \"RE\" + this.selectedDialogAction.actionName\r\n        this.actionMethodResults(this.selectedDialogAction, this.selectedItems, result.sample_number, this.selectedItems, this.targetValue)\r\n      } else {\r\n        this.selectedItems[0]=result;\r\n        this.actionMethodResults(this.selectedDialogAction, this.selectedItems, result.sample_number, this.selectedItems, this.targetValue)\r\n      }\r\n      console.log('setResult After', 'resId', resId, 'selectedDialogAction', this.selectedDialogAction, 'this.selectedItems', this.selectedItems)\r\n    }\r\n\r\n    actionMethodResults(action, selObject, sampleId, resultRow, targetValue) {\r\n      //this.loadDialogs()  \r\n      //console.log('actionMethodResults', 'action', action, 'sampleId', sampleId, 'resultRow', resultRow)\r\n          if(action===undefined){\r\n              alert('action not passed as argument')\r\n              return\r\n          }          \r\n//console.log('I assigned action to ationBeingPErformedModel', 'this.actionBeingPerformedModel', this.actionBeingPerformedModel, 'action', action)\r\n          //this.actionBeingPerformedModel=action        \r\n          if(action.requiresDialog===undefined){\r\n              alert('The action '+action.actionName+' has no requiresDialog property which is mandatory')\r\n              return\r\n          }\r\n          if(action.requiresDialog===false){\r\n            //trazitNoDialogRequired(action, selectedItem, targetValue, isProcManagement, gridSelectedRow, parentData, dragEntry, dropEntry) {\r\n            this.trazitNoDialogRequired(action, \r\n              selObject[0], targetValue, false, selObject[0], null, null, null)\r\n            //this.performActionRequestHavingDialogOrNot(this.actionBeingPerformedModel, \r\n            //  this.selectedItems[0], targetValue)            \r\n            //  this.actionWhenRequiresNoDialog(action, selObject[0], undefined, undefined, resultRow, undefined)\r\n              return\r\n          }  \r\n          if ( action.requiresGridItemSelected!==undefined&&action.requiresGridItemSelected===true&&\r\n            (this[selectedItemPropertyName]===undefined||this[selectedItemPropertyName][0]===undefined) ){\r\n            alert('Please select one item in the table prior')\r\n            return\r\n          }\r\n          this.GetQueriesForDialog(action)        \r\n          //this.loadDialogs()\r\n          if (action.dialogInfo.name===\"auditDialog\"){\r\n            this[action.clientMethod]()\r\n            return}\r\n          if (this[action.dialogInfo.name]){\r\n              if (action.dialogInfo.subQueryName){\r\n                  this[action.dialogInfo.subQueryName]()\r\n              }else{        \r\n                this[action.dialogInfo.name].show()\r\n                  \r\n              }\r\n          }else{\r\n              alert('the dialog '+action.dialogInfo.name+' does not exist')\r\n          }          \r\n        return\r\n      }      \r\n\r\n    setResultInstrument(resultRow, e) {      \r\n      //alert('setResultInstrument , line 890')\r\n      let newValue = e.target.value\r\n      this.targetValue = {\r\n        newValue: newValue,\r\n        eventId: resultRow.event_id,\r\n        instrumentName: resultRow.instrument,\r\n        variableName: resultRow.param_name\r\n      }\r\n      // vaadin grid field rebinding doesn't work, so let's do manually\r\n      // ClientMethod::getResult\r\n      this.curResultRef = { elm: e.target, resId: resultRow.result_id, evtId: resultRow.event_id }\r\n      let act = JSON.stringify(this.actionBeingPerformedModel.dialogInfo.action[0])\r\n      this.selectedDialogAction = JSON.parse(act)\r\n      if (resultRow.raw_value || resultRow.value) {\r\n        this.selectedDialogAction.actionName = \"RE\" + this.selectedDialogAction.actionName\r\n        this.actionMethodResults(this.selectedDialogAction, this.selectedItems, resultRow.event_id, resultRow, this.targetValue)\r\n      } else {\r\n        this.actionMethodResults(this.selectedDialogAction, this.selectedItems, resultRow.event_id, resultRow, this.targetValue)\r\n      }\r\n    }\r\n\r\n}}","import { LitElement, html, css } from 'lit';\r\nimport '@material/mwc-icon-button';\r\nimport '@material/mwc-list/mwc-list';\r\nimport '@material/mwc-list/mwc-list-item';\r\n\r\nclass TreeViewFran extends LitElement {\r\n  static get properties() {\r\n    return {\r\n      data: { type: Array },\r\n      specification: { type: Object },\r\n      selectedItems: { type: Object },\r\n      showChildren: { type: Object },\r\n      value: { type: String },\r\n      label: { type: String },\r\n      expanded:{type: Boolean}\r\n    };\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.data = [];\r\n    this.specification = {};\r\n    this.selectedItems = {};\r\n    this.showChildren = {};\r\n    this.expanded=false\r\n    this.value = '';\r\n    this.label = 'Select an item';\r\n  }\r\n\r\n  static get styles() {\r\n    return css`\r\n      :host {\r\n        display: block;\r\n        font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\r\n      }\r\n\r\n      .main {\r\n        position: relative;\r\n        display: inline-block;\r\n        width: 100%;\r\n        height: 56px;\r\n      }\r\n\r\n      .label {\r\n        position: absolute;\r\n        top: 0px;\r\n        left: 18px;\r\n        font-size: 12px;\r\n        color: #999;\r\n        transition: 0.2s ease all;\r\n        pointer-events: none;\r\n      }\r\n\r\n      .label.selected {\r\n        color: #24c0eb;\r\n      }\r\n\r\n      .value {\r\n        display: flex;\r\n        align-items: center;\r\n        padding: 6px;\r\n        border: 1px solid #999;\r\n        border-radius: 4px;\r\n        cursor: pointer;\r\n        background-color: #fff;\r\n        height: 56px;\r\n      }\r\n\r\n      .value.selected {\r\n        border-color: #24c0eb;\r\n      }\r\n\r\n      .dropdown {\r\n        display: none;\r\n        position: absolute;\r\n        width: 100%;\r\n        border: 1px solid #ccc;\r\n        border-radius: 4px;\r\n        max-height: 300px;\r\n        overflow-y: auto;\r\n        background-color: #fff;\r\n        z-index: 1;\r\n      }\r\n\r\n      .dropdown.show {\r\n        display: block;\r\n      }\r\n\r\n      mwc-list-item {\r\n        display: flex;\r\n        align-items: center;\r\n        padding: 4px 16px;\r\n        transition: height 0.3s;\r\n      }\r\n\r\n      .icon-left {\r\n        margin-right: 8px;\r\n        --mdc-icon-size: 16px;\r\n      }\r\n\r\n      .clear-icon {\r\n        margin-left: auto;\r\n        cursor: pointer;\r\n        --mdc-icon-size: 20px;\r\n      }\r\n\r\n      .accordion-details {\r\n        flex-wrap: wrap;\r\n        gap: 4px;\r\n        padding: 4px 0;\r\n      }\r\n\r\n      .expanded {\r\n        height: auto;\r\n      }\r\n\r\n      .collapsed {\r\n        height: 32px;\r\n      }\r\n\r\n      .accordion-details > mwc-list-item {\r\n        /*flex: 1 1 calc(33.333% - 8px); */ /* Ajustar el porcentaje para controlar el número de elementos por fila */\r\n      }\r\n\r\n      .selected-text {\r\n        color: #24c0eb;\r\n      }\r\n    `;\r\n  }\r\n\r\n  handleToggleDropdown(e) {\r\n    e.stopPropagation();\r\n    this.showChildren = !this.showChildren;\r\n    this.expanded=true\r\n    this.requestUpdate();\r\n  }\r\n\r\n  handleSelectItem(item, specification, e) {\r\n    console.log('value', item[specification.key], 'item', item, specification)\r\n    this.value = item[specification.key];\r\n    e.stopPropagation();\r\n    this.label = item[specification.key];\r\n    this.showChildren = false;\r\n\r\n    this.requestUpdate();\r\n  }\r\n\r\n  handleToggleChildren(key, event) {\r\n    event.stopPropagation();\r\n    this.showChildren = { ...this.showChildren, [key]: !this.showChildren[key] };\r\n    this.requestUpdate();\r\n  }\r\n\r\n  handleClearSelection(event) {\r\n    event.stopPropagation();\r\n    this.value = '';\r\n    this.selectedItems = {};\r\n    this.requestUpdate();\r\n  }\r\n\r\n  renderItem(data, specification, level = 0) {\r\n    const childrenKey = specification.children;\r\n    const children = data[childrenKey];\r\n    const key = data[specification.key];\r\n    const label = data[specification.label] || data[specification.key];\r\n    const hasChildren = children && children.length > 0;\r\n    const isSelected = this.value === key;\r\n    const isExpanded = this.showChildren[key];\r\n\r\n    return html`\r\n      <mwc-list-item\r\n        class=\"${isExpanded ? 'expanded' : 'collapsed'}\"\r\n        graphic=\"icon\"\r\n        .twoline=${hasChildren}\r\n        .hasMeta=${hasChildren}\r\n      >\r\n        ${hasChildren\r\n          ? html`\r\n              <mwc-icon-button\r\n                class=\"icon-left\"\r\n                slot=\"graphic\"\r\n                icon=\"chevron_right\"\r\n                @click=${(e) => this.handleToggleChildren(key, e)}\r\n              ></mwc-icon-button>\r\n            `\r\n          : ''}\r\n        <span\r\n          class=\"list-item-label ${isSelected ? 'selected-text' : ''}\"\r\n          @click=${(e) => this.handleSelectItem(data, specification, e)}\r\n        >\r\n          ${label}\r\n        </span>\r\n        ${isExpanded && hasChildren\r\n          ? html`\r\n              <div class=\"accordion-details\">\r\n                ${children.map((child) => this.renderItem(child, specification.children_definition, level + 1))}\r\n              </div>\r\n            `\r\n          : ''}\r\n      </mwc-list-item>\r\n    `;\r\n  }\r\n\r\n  render() {\r\n    const hasValue = !!this.value;\r\n    const selectedItem = this.findSelectedItem(this.data, this.specification, this.value);\r\n    const selectedLabel = selectedItem ? selectedItem[this.specification.label] || selectedItem[this.specification.key] : '';    \r\n    return html`\r\n      <div class=\"main\">\r\n        <div class=\"value ${hasValue ? 'selected' : ''}\" @click=${this.handleToggleDropdown}>\r\n          ${selectedLabel || this.label}\r\n          ${hasValue\r\n            ? html`\r\n                <mwc-icon-button\r\n                  class=\"clear-icon\"\r\n                  icon=\"clear\"\r\n                  @click=${this.handleClearSelection}\r\n                ></mwc-icon-button>\r\n              `\r\n            : ''}\r\n        </div>\r\n        <div class=\"label ${hasValue ? 'selected' : ''}\">${this.label}</div>\r\n        ${this.expanded?html`\r\n          <div class=\"dropdown ${this.showChildren ? 'show' : ''}\">\r\n            <mwc-list>\r\n              ${this.data.map((item) => this.renderItem(item, this.specification))}\r\n            </mwc-list>\r\n          </div>\r\n        `:html``}\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  findSelectedItem(data, specification, value) {\r\n    for (const item of data) {\r\n      if (item[specification.key] === value) {\r\n        return item;\r\n      }\r\n      const childrenKey = specification.children;\r\n      const children = item[childrenKey];\r\n      if (children && children.length > 0) {\r\n        const childItem = this.findSelectedItem(children, specification.children_definition, value);\r\n        if (childItem) {\r\n          return childItem;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\ncustomElements.define('tree-viewfran', TreeViewFran);\r\n","import { LitElement } from 'lit-element';\r\nimport { template } from './speclimitquantitative.template';\r\nimport { styles } from './speclimitquantitative.css';\r\n\r\nexport class SpeclimitQuantitative extends LitElement {\r\n  static get styles() {\r\n    return styles;\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      rules: { type: Array },\r\n      selectedRule: { type: Number },\r\n      inputValue1: { type: String },\r\n      inputValue2: { type: String },\r\n      errorMessage: { type: String },\r\n      value: { type: String }\r\n    };\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.rules = [\r\n      { id: 1, description: 'Entre X y Y incluidos' },\r\n      { id: 2, description: 'Entre X y Y' },\r\n      { id: 3, description: 'Menor de X' },\r\n      { id: 4, description: 'Menor o igual a X' },\r\n      { id: 5, description: 'Mayor de X' },\r\n      { id: 6, description: 'Mayor o igual a X' }\r\n    ];\r\n    this.selectedRule = 1;\r\n    this.inputValue1 = '';\r\n    this.inputValue2 = '';\r\n    this.errorMessage = '';\r\n    this.value = '';\r\n  }\r\n\r\n  handleRuleChange(e) {\r\n    this.selectedRule = Number(e.target.value);\r\n    this.inputValue1 = '';\r\n    this.inputValue2 = '';\r\n    this.errorMessage = '';\r\n    this.updateOutputValue();\r\n  }\r\n\r\n  handleInputChange1(e) {\r\n    this.inputValue1 = e.target.value;\r\n    this.validateInput();\r\n  }\r\n\r\n  handleInputChange2(e) {\r\n    this.inputValue2 = e.target.value;\r\n    this.validateInput();\r\n  }\r\n\r\n  validateInput() {\r\n    let regex;\r\n    let fullInput;\r\n    switch (this.selectedRule) {\r\n      case 1:\r\n        regex = /^Entre \\d{1,6}(\\.\\d{1,2})? y \\d{1,6}(\\.\\d{1,2})? incluidos?$/i;\r\n        fullInput = `Entre ${this.inputValue1} y ${this.inputValue2} incluidos`;\r\n        break;\r\n      case 2:\r\n        regex = /^Entre \\d{1,6}(\\.\\d{1,2})? y \\d{1,6}(\\.\\d{1,2})?$/i;\r\n        fullInput = `Entre ${this.inputValue1} y ${this.inputValue2}`;\r\n        break;\r\n      case 3:\r\n        regex = /^Menor de \\d{1,6}(\\.\\d{1,2})?$/i;\r\n        fullInput = `Menor de ${this.inputValue1}`;\r\n        break;\r\n      case 4:\r\n        regex = /^Menor o igual a \\d{1,6}(\\.\\d{1,2})?$/i;\r\n        fullInput = `Menor o igual a ${this.inputValue1}`;\r\n        break;\r\n      case 5:\r\n        regex = /^Mayor de \\d{1,6}(\\.\\d{1,2})?$/i;\r\n        fullInput = `Mayor de ${this.inputValue1}`;\r\n        break;\r\n      case 6:\r\n        regex = /^Mayor o igual a \\d{1,6}(\\.\\d{1,2})?$/i;\r\n        fullInput = `Mayor o igual a ${this.inputValue1}`;\r\n        break;\r\n      default:\r\n        this.errorMessage = 'Regla no válida';\r\n        return;\r\n    }\r\n\r\n    if (!regex.test(fullInput)) {\r\n      this.errorMessage = 'Formato de entrada no válido para la regla seleccionada, usa punto (.) como separador decimal';\r\n    } else if ((this.selectedRule === 1 || this.selectedRule === 2) && parseFloat(this.inputValue1) >= parseFloat(this.inputValue2)) {\r\n      this.errorMessage = 'El primer valor debe ser menor que el segundo valor';\r\n    } else {\r\n      this.errorMessage = '';\r\n      this.updateOutputValue();\r\n    }\r\n  }\r\n\r\n  getPrefix() {\r\n    switch (this.selectedRule) {\r\n      case 1:\r\n        return 'Entre ';\r\n      case 2:\r\n        return 'Entre ';\r\n      case 3:\r\n        return 'Menor de ';\r\n      case 4:\r\n        return 'Menor o igual a ';\r\n      case 5:\r\n        return 'Mayor de ';\r\n      case 6:\r\n        return 'Mayor o igual a ';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  updateOutputValue() {\r\n    let output;\r\n    switch (this.selectedRule) {\r\n      case 1:\r\n        output = `Entre ${this.inputValue1} y ${this.inputValue2} incluidos`;\r\n        break;\r\n      case 2:\r\n        output = `Entre ${this.inputValue1} y ${this.inputValue2}`;\r\n        break;\r\n      case 3:\r\n        output = `Menor de ${this.inputValue1}`;\r\n        break;\r\n      case 4:\r\n        output = `Menor o igual a ${this.inputValue1}`;\r\n        break;\r\n      case 5:\r\n        output = `Mayor de ${this.inputValue1}`;\r\n        break;\r\n      case 6:\r\n        output = `Mayor o igual a ${this.inputValue1}`;\r\n        break;\r\n      default:\r\n        output = '';\r\n    }\r\n    this.value = output;\r\n    this.dispatchEvent(new CustomEvent('output-change', { detail: { value: this.value } }));\r\n  }\r\n\r\n  render() {\r\n    return template(\r\n      this.rules,\r\n      this.selectedRule,\r\n      this.inputValue1,\r\n      this.inputValue2,\r\n      this.errorMessage,\r\n      this.handleRuleChange.bind(this),\r\n      this.handleInputChange1.bind(this),\r\n      this.handleInputChange2.bind(this)\r\n    );\r\n  }\r\n}\r\n\r\nwindow.customElements.define('speclimit-quantitative', SpeclimitQuantitative);\r\n","import {html} from 'lit-element';\r\nimport '../speclimitquantitative';\r\nimport '@material/mwc-textfield';\r\n\r\n\r\nexport const template = (\r\n  rules,\r\n  selectedRule,\r\n  inputValue1,\r\n  inputValue2,\r\n  errorMessage,\r\n  handleRuleChange,\r\n  handleInputChange1,\r\n  handleInputChange2\r\n) => {\r\n  return html`\r\n    <div>\r\n      <label for=\"rules\">Selecciona una regla:</label>\r\n      <select id=\"rules\" @change=\"${handleRuleChange}\">\r\n        ${rules.map(\r\n          rule => html`<option value=\"${rule.id}\" ?selected=\"${rule.id === selectedRule}\">${rule.description}</option>`\r\n        )}\r\n      </select>\r\n    </div>\r\n    <div>\r\n      <label for=\"input\"></label><br>\r\n      <div class=\"input-container\">\r\n        <span>${getPrefix(selectedRule)}</span>\r\n        ${selectedRule === 1 || selectedRule === 2\r\n          ? html`\r\n              <input\r\n                type=\"text\"\r\n                .value=\"${inputValue1}\"\r\n                maxlength=\"6\"\r\n                @input=\"${handleInputChange1}\"\r\n                placeholder=\"X\"/>\r\n              <span> y </span>\r\n              <input\r\n                type=\"text\"\r\n                .value=\"${inputValue2}\"\r\n                maxlength=\"6\"\r\n                @input=\"${handleInputChange2}\"\r\n                placeholder=\"Y\"/>  ${selectedRule===1?` incluidos`:``}`\r\n          : html`\r\n              <input\r\n                type=\"text\"\r\n                .value=\"${inputValue1}\"\r\n                maxlength=\"6\"\r\n                @input=\"${handleInputChange1}\"\r\n                placeholder=\"\"/>`\r\n        }\r\n      </div>\r\n    </div>\r\n    ${errorMessage\r\n      ? html`<div class=\"error\">${errorMessage}</div>`\r\n      : ''}\r\n  `;\r\n};\r\n\r\nfunction getPrefix(selectedRule) {\r\n  switch (selectedRule) {\r\n    case 1:\r\n      return 'Entre ';\r\n    case 2:\r\n      return 'Entre ';\r\n    case 3:\r\n      return 'Menor de ';\r\n    case 4:\r\n      return 'Menor o igual a ';\r\n    case 5:\r\n      return 'Mayor de ';\r\n    case 6:\r\n      return 'Mayor o igual a ';\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n\r\n","import { html } from \"lit\";\r\nexport function ListsFunctions(base) {\r\n    return class extends (base) {\r\n        actionWhenListValueSelected(event, fld, dialogInfo){\r\n            if (fld===undefined){return}\r\n            if (fld.dependencyActionFields===undefined&&fld.dependencyFieldBehavior===undefined&&\r\n                fld.dependencyFieldBehaviorForAll===undefined){return}\r\n            const selectedItem = event.target.selected;\r\n            const index = selectedItem.getAttribute('data-index');\r\n            const itemData = JSON.parse(selectedItem.getAttribute('data-item')); \r\n            if (fld.dependencyActionFields!==undefined){\r\n                this.dependencyActionFields(fld, itemData.allRecord);\r\n            }\r\n            if (fld.dependencyFieldBehavior!==undefined){\r\n                this.dependencyFieldBehavior(fld.dependencyFieldBehavior, itemData.allRecord, true, itemData.keyName);\r\n            }\r\n            if (fld.dependencyFieldBehaviorForAll!==undefined){\r\n                this.dependencyFieldBehaviorForAll(fld.dependencyFieldBehaviorForAll, event.target.id, itemData.allRecord, dialogInfo, true, itemData.keyName);\r\n            }\r\n            return \r\n        }\r\n        actionWhenOtherThanListValueChanged(event, fld, dialogInfo, itemData){\r\n            if (fld===undefined){return}\r\n            if (fld.dependencyActionFields===undefined&&fld.dependencyFieldBehavior===undefined&&\r\n                fld.dependencyFieldBehaviorForAll===undefined){return}\r\n            if (fld.dependencyActionFields!==undefined){\r\n                this.dependencyActionFields(fld, itemData);\r\n            }\r\n            if (fld.dependencyFieldBehavior!==undefined){\r\n                this.dependencyFieldBehavior(fld.dependencyFieldBehavior, itemData, false, this[event.currentTarget.id].value);\r\n            }\r\n            if (fld.dependencyFieldBehaviorForAll!==undefined){\r\n                this.dependencyFieldBehaviorForAll(fld.dependencyFieldBehaviorForAll, event.target.id, itemData, dialogInfo, false, this[event.currentTarget.id].value);\r\n            }\r\n            return \r\n        }\r\n        dependencyFieldBehaviorForAll(dependencyFieldBehaviorForAll, fldName, itemData, dialogInfo, isList, itemKeyName){\r\n            \r\n            if (itemKeyName.length>0&&dependencyFieldBehaviorForAll.rule==='whenEmpty'&&dependencyFieldBehaviorForAll.resetValue===true){return}\r\n            const fields = dialogInfo.fields;\r\n            const exceptionFields = dependencyFieldBehaviorForAll.exceptionFields || []; // Default to an empty array if not present\r\n        \r\n            const filteredFields = fields\r\n                .map(field => {\r\n                    const fieldName = Object.keys(field)[0];\r\n                    if (fieldName !== fldName && !exceptionFields.includes(fieldName)) {\r\n                        // Only include fields not in exceptionFields and not equal to fldName\r\n                        return { \r\n                            field: fieldName, \r\n                            rule: dependencyFieldBehaviorForAll.rule, \r\n                            resetValue: dependencyFieldBehaviorForAll.resetValue, \r\n                            action: dependencyFieldBehaviorForAll.action,\r\n                            ...field[fieldName] \r\n                        };\r\n                    }\r\n                    return null;\r\n                })\r\n                .filter(item => item !== null); // Remove any null entries resulting from the exclusion\r\n            \r\n            this.dependencyFieldBehavior(filteredFields, itemData, isList, itemKeyName)\r\n        }        \r\n        dependencyFieldBehaviorForAllFran(dependencyFieldBehaviorForAll, fldName, itemData, dialogInfo, isList, itemKeyName){\r\n            const fields = dialogInfo.fields;\r\n            const filteredFields = fields\r\n                .map(field => {\r\n                    const fieldName = Object.keys(field)[0];\r\n                    if (fieldName !== fldName) {\r\n                        return { field: fieldName, rule: dependencyFieldBehaviorForAll.rule, resetValue:dependencyFieldBehaviorForAll.resetValue, action:dependencyFieldBehaviorForAll.action,\r\n                            ...field[fieldName] };\r\n                    }\r\n                    return null;\r\n                })\r\n                .filter(item => item !== null); // Remove any null entries resulting from the exclusion\r\n        \r\n            this.dependencyFieldBehavior(filteredFields, itemData, isList, itemKeyName)\r\n        }\r\n        dependencyActionFields(fld, itemData){\r\n            fld.dependencyActionFields.map((curFld, index)=>{\r\n                if (curFld.field!==undefined){\r\n                    if(curFld.staticValue!==undefined){\r\n                        this[curFld.field].value=curFld.staticValue\r\n                    }\r\n                    if(curFld.fieldValue!==undefined){\r\n                        this[curFld.field].value=itemData[curFld.fieldValue]\r\n                    }\r\n                    if (curFld.allRecordEntryWithList) { // Check if the action should update a list\r\n                        let data={}\r\n                        data[curFld.propertyNameInDestination]=itemData[curFld.allRecordEntryWithList]\r\n                        this.updateListEntries(curFld.field, curFld, data);\r\n                    }                    \r\n                }\r\n            })\r\n            return\r\n        }\r\n\r\n        dependencyFieldBehavior(fieldsList, itemData, isList, itemKeyName){\r\n            fieldsList.map((curFld, index) => {\r\n                if (curFld.field !== undefined && curFld.rule !== undefined && this[curFld.field] !== undefined) {\r\n                    const fieldElement = this[curFld.field];\r\n                    switch(curFld.rule) {\r\n                        case \"whenEmpty\":\r\n                            if (itemKeyName.length == 0) {\r\n                                if (curFld.resetValue !== undefined && curFld.resetValue === true) {\r\n                                    this[curFld.field].value = \"\";\r\n                                }\r\n                                switch(curFld.action) {\r\n                                    case \"disable\":\r\n                                        this[curFld.field].disabled = true;\r\n                                        break;\r\n                                    case \"hide\":\r\n                                        if (fieldElement !== undefined && fieldElement.style !== undefined) {\r\n                                            fieldElement.style.display = 'none';  // Hide the element\r\n                                        }\r\n                                        break;\r\n                                    case \"show\":\r\n                                        if (fieldElement !== undefined && fieldElement.style !== undefined) {\r\n                                            fieldElement.style.display = 'block';  // Show the element\r\n                                        }\r\n                                        break;\r\n                                    default:\r\n                                        this[curFld.field].disabled = true;\r\n                                        break;\r\n                                }\r\n                            } else {\r\n                                switch(curFld.action) {\r\n                                    case \"disable\":\r\n                                        this[curFld.field].disabled = false;\r\n                                        break;\r\n                                    case \"hide\":\r\n                                        if (fieldElement !== undefined && fieldElement.style !== undefined) {\r\n                                            fieldElement.style.display = '';  // Show the element\r\n                                        }\r\n                                        break;\r\n                                    case \"show\":\r\n                                        if (fieldElement !== undefined && fieldElement.style !== undefined) {\r\n                                            fieldElement.style.display = 'none';  // Hide the element\r\n                                        }\r\n                                        break;\r\n                                    default:\r\n                                        this[curFld.field].disabled = false;\r\n                                        break;\r\n                                }\r\n                            }\r\n                            break;\r\n                        case \"whenThisFieldValueIs\":\r\n                            if (curFld.checkValue !== undefined && itemKeyName === curFld.checkValue) {\r\n                                switch(curFld.action) {\r\n                                    case \"disable\":\r\n                                        this[curFld.field].disabled = true;\r\n                                        break;\r\n                                    case \"hide\":\r\n                                        if (fieldElement !== undefined && fieldElement.style !== undefined) {\r\n                                            fieldElement.style.display = 'none';  // Hide the element\r\n                                        }\r\n                                        break;\r\n                                    case \"show\":\r\n                                        if (fieldElement !== undefined && fieldElement.style !== undefined) {\r\n                                            fieldElement.style.display = 'block';  // Show the element\r\n                                        }\r\n                                        break;\r\n                                    default:\r\n                                        this[curFld.field].disabled = true;\r\n                                        break;\r\n                                }\r\n                            } else {\r\n                                switch(curFld.action) {\r\n                                    case \"disable\":\r\n                                        this[curFld.field].disabled = false;\r\n                                        break;\r\n                                    case \"hide\":\r\n                                        if (fieldElement !== undefined && fieldElement.style !== undefined) {\r\n                                            fieldElement.style.display = '';  // Show the element\r\n                                        }\r\n                                        break;\r\n                                    case \"show\":\r\n                                        if (fieldElement !== undefined && fieldElement.style !== undefined) {\r\n                                            fieldElement.style.display = 'none';  // Hide the element\r\n                                        }\r\n                                        break;\r\n                                    default:\r\n                                        this[curFld.field].disabled = false;\r\n                                        break;\r\n                                }\r\n                            }\r\n                            break;\r\n                        case \"whenThisFieldValueIsNot\":\r\n                            if (curFld.checkValue !== undefined && itemKeyName !== curFld.checkValue) {\r\n                                switch(curFld.action) {\r\n                                    case \"disable\":\r\n                                        this[curFld.field].disabled = false;\r\n                                        break;\r\n                                    case \"hide\":\r\n                                        if (fieldElement !== undefined && fieldElement.style !== undefined) {\r\n                                            fieldElement.style.display = 'none';  // Show the element\r\n                                        }\r\n                                        break;\r\n                                    case \"show\":\r\n                                        if (fieldElement !== undefined && fieldElement.style !== undefined) {\r\n                                            fieldElement.style.display = '';  // Show the element\r\n                                        }\r\n                                        break;\r\n                                    default:\r\n                                        this[curFld.field].disabled = false;\r\n                                        break;\r\n                                }\r\n                            } else {\r\n                                switch(curFld.action) {\r\n                                    case \"disable\":\r\n                                        this[curFld.field].disabled = true;\r\n                                        break;\r\n                                    case \"hide\":\r\n                                        if (fieldElement !== undefined && fieldElement.style !== undefined) {\r\n                                            fieldElement.style.display = 'none';  // Hide the element\r\n                                        }\r\n                                        break;\r\n                                    case \"show\":\r\n                                        if (fieldElement !== undefined && fieldElement.style !== undefined) {\r\n                                            fieldElement.style.display = 'none';  // Hide the element\r\n                                        }\r\n                                        break;    \r\n                                    default:\r\n                                        this[curFld.field].disabled = true;\r\n                                        break;\r\n                                }\r\n                            }\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        \r\n        \r\n        updateListEntries(listFieldName, fldMDDef, newData) {     \r\n            return       \r\n            let itemsToInject = this.buildFrontListFromData(this[listFieldName].definition.valuesFromMasterData, newData, true);\r\n            let htmlListEntries = this.convertListToHtmlListEntries(fldMDDef, itemsToInject);\r\n        \r\n            if (this[listFieldName]) {\r\n                // Manipula directamente el contenido HTML del elemento de lista\r\n                this[listFieldName].innerHTML = '';\r\n                this[listFieldName].appendChild(htmlListEntries);\r\n                this.requestUpdate(); // Fuerza la actualización del componente\r\n            }            \r\n        }\r\n        \r\n        convertListToHtmlListEntries(fld, newList) {\r\n            return\r\n            // Crea un contenedor temporal para las nuevas entradas HTML\r\n            let container = document.createElement('div');\r\n            container.innerHTML = newList.map((c, i) => `\r\n                <mwc-list-item \r\n                    value=\"${c.keyName}\" \r\n                    ?selected=\"${fld.selectedValue === c.keyName}\" \r\n                    data-index=\"${i}\"\r\n                    data-item=\"${JSON.stringify(c)}\">${c[\"keyValue_\" + this.lang]}\r\n                </mwc-list-item>`).join('');\r\n            return container;\r\n        }\r\n        \r\n\r\n        listEntries(fld, multilist = false) {\r\n            if (multilist === undefined) {\r\n                multilist = false;\r\n            }\r\n            let newList = this.entriesForTheList(fld, multilist);\r\n            if (!newList || newList.length === 0) {\r\n                return html``; // Gracefully handle undefined or empty lists\r\n            }\r\n            if (multilist&&Array.isArray(newList)) {\r\n                // For multi-list configurations, return a joined string of key names\r\n                return newList.filter(entry => entry.keyName.length > 0).map(entry => entry.keyName).join('|');\r\n            }\r\n            return newList\r\n            // For standard configurations, map newList to HTML elements\r\n            return html`\r\n            ${newList.map((c, i) =>\r\n                html`<mwc-list-item \r\n                        value=\"${c.keyName}\" \r\n                        ?selected=\"${fld.selectedValue === c.keyName}\" \r\n                        data-index=\"${i}\"\r\n                        data-item=\"${JSON.stringify(c)}\">${c[\"keyValue_\" + this.lang]}</mwc-list-item>`\r\n            )}`;\r\n        }\r\n        entriesForTheList(fld, multilist=false) {\r\n            //console.log('entriesForTheList', fld, multilist);\r\n            let blankEmpty = {keyName: \"\", keyValue_en: \"\", keyValue_es: \"\", allRecord: {}};\r\n            let newList = [];\r\n        \r\n            if (fld === undefined) {\r\n                return html`<mwc-list-item></mwc-list-item>`;\r\n            }\r\n        \r\n            // Add an empty entry at the top if specified\r\n            if (fld.addBlankValueOnTop) {\r\n                newList.push(blankEmpty);\r\n            }\r\n        \r\n            // Check if there is dynamic data provided (through actions based on another field's selection)\r\n            if (fld.items && fld.items.length > 0) {\r\n                if (fld.valuesFromMasterData){\r\n                    alert('This element has both, items and valuesFromMasterData, be careful and use only one. it will use the items...')\r\n                }\r\n                newList = [...newList, ...fld.items]; // merge static or dynamically set items\r\n            } else if (fld.valuesFromMasterData) {\r\n                // Handle values from a master data source\r\n                let MDentriesArr = this.listEntriesFromMasterData(fld.valuesFromMasterData);\r\n                if (MDentriesArr.length > 0) {\r\n                    newList = [...newList, ...MDentriesArr];\r\n                }\r\n            } else if (fld.valuesFromProperty) {\r\n                // Handle values from a master data source\r\n                fld.valuesFromProperty.propertyNameContainer=\"ROOT\"\r\n                let MDentriesArr = this.listEntriesFromProperty(fld.valuesFromProperty);\r\n                if (MDentriesArr.length > 0) {\r\n                    newList = [...newList, ...MDentriesArr];\r\n                }\r\n            } else if (fld.valuesFromSelectedItem) {\r\n                // Handle values based on another selected item's data\r\n                let MDentriesArr = this.listEntriesFromSelectedItem(fld.valuesFromSelectedItem);\r\n                if (MDentriesArr.length > 0) {\r\n                    newList = [...newList, ...MDentriesArr];\r\n                }\r\n            }\r\n        \r\n            // Add an empty entry at the bottom if specified\r\n            if (fld.addBlankValueAtBottom) {\r\n                newList.push(blankEmpty);\r\n            }\r\n        \r\n            // Return a filtered list for multi-list configuration, else map to HTML elements\r\n            if (multilist) {\r\n                return newList.filter(entry => entry.keyName.length > 0).map(entry => entry.keyName).join('|');\r\n            } else {\r\n                return html`\r\n                ${newList.map((c, i) =>\r\n                    html`<mwc-list-item value=\"${c.keyName}\" ?selected=\"${fld.selectedValue === c.keyName}\" data-index=\"${i}\"\r\n                    data-item=\"${JSON.stringify(c)}\">${c[\"keyValue_\" + this.lang]}</mwc-list-item>`\r\n                )}`;\r\n            }\r\n        }\r\n        listEntriesForUom(fld, fldName){\r\n            console.log('listEntriesForUom')\r\n            let blankEmpty={keyName:\"\", keyValue_en:\"\", keyValue_es:\"\"}\r\n            let defValue=\"\"\r\n            let newList=[]\r\n            if (fld===undefined){\r\n                return html`<mwc-list-item></mwc-list-item>`\r\n            }\r\n            if (fld.addBlankValueOnTop!==undefined&&fld.addBlankValueOnTop===true){\r\n                newList.push(blankEmpty)\r\n            }\r\n            if (fld.the_default_value!==undefined){\r\n                if (fld.the_default_value.default_value!==undefined&&fldObj[keyName].default_value!==null){\r\n                    blankEmpty={keyName:fld.the_default_value.default_value, keyValue_en:fld.the_default_value.default_value, keyValue_es:fld.default_value.default_value}\r\n                    newList.push(blankEmpty)            \r\n                }\r\n                if (fld.the_default_value.selObjectPropertyName!==undefined&&fld.the_default_value.selObjectPropertyName!==null){\r\n                    let val=\"\"\r\n                    if (this.selectedItems!==undefined&&this.selectedItems.length>0){\r\n                        val=this.selectedItems[0][fld.the_default_value.selObjectPropertyName]\r\n                        const valueArray = val.split(\"|\");\r\n                        valueArray.forEach((item) => {\r\n                            const blankEmpty = {keyName: item, keyValue_en: item, keyValue_es: item}     \r\n                            const isDuplicate = newList.some(item => item.keyName === item);\r\n                            if (!isDuplicate) {\r\n                                if (this[fldName]!==null&&this[fldName].value.length===0){\r\n                                    defValue=item\r\n                                    this[fldName].value=item\r\n                                }\r\n                                newList.push(blankEmpty);\r\n                            }                                                               \r\n                        })                             \r\n                    }\r\n                }\r\n                if (fld.the_default_value.internalVariableObjName!==undefined&&fld.the_default_value.internalVariableObjName!==null&&\r\n                    fld.internalVariableObjProperty!==undefined&&fld.internalVariableObjProperty!==null){\r\n                        let val=this[fld.the_default_value.internalVariableObjName][0][fld.internalVariableObjProperty]\r\n                        blankEmpty={keyName:val, keyValue_en:val, keyValue_es:val}\r\n                        const isDuplicate = newList.some(item => item.keyName === val);\r\n                        if (!isDuplicate) {\r\n                          newList.push(blankEmpty);\r\n                        }                             \r\n    //                this[keyName[0]].value=this[fld.internalVariableObjName][0][fld.internalVariableObjProperty]\r\n                    }\r\n            }\r\n            if (fld.list_values!==undefined){\r\n                if (fld.list_values.default_value!==undefined&&fldObj[keyName].default_value!==null){\r\n                    blankEmpty={keyName:fld.list_values.default_value, keyValue_en:fld.list_values.default_value, keyValue_es:fld.list_values.default_value}\r\n                    newList.push(blankEmpty)            \r\n                }\r\n                if (fld.list_values.selObjectPropertyName!==undefined&&fld.list_values.selObjectPropertyName!==null){\r\n                    let val=this.selectedItems[0][fld.list_values.selObjectPropertyName]\r\n                    const valueArray = val.split(\"|\");\r\n                    valueArray.forEach((item) => {\r\n                      const blankEmpty = {keyName: item, keyValue_en: item, keyValue_es: item}                \r\n                      const isDuplicate = newList.some(item => item.keyName === item);\r\n                      if (!isDuplicate) {\r\n                        newList.push(blankEmpty);\r\n                      }                             \r\n                    })             \r\n                }\r\n                if (fld.list_values.internalVariableObjName!==undefined&&fld.list_values.internalVariableObjName!==null&&\r\n                    fld.internalVariableObjProperty!==undefined&&fld.internalVariableObjProperty!==null){\r\n                        let val=this[fld.list_values.internalVariableObjName][0][fld.internalVariableObjProperty]\r\n                        blankEmpty={keyName:val, keyValue_en:val, keyValue_es:val}\r\n                        const isDuplicate = newList.some(item => item.keyName === val);\r\n                        if (!isDuplicate) {\r\n                          newList.push(blankEmpty);\r\n                        }                             \r\n                }\r\n            }\r\n            return html`\r\n            ${newList.map((c, i) =>\r\n                html`<mwc-list-item value=\"${c.keyName}\" defval=\"${defValue}\" ?selected=${fld.addBlankValueOnTop!==undefined&&fld.addBlankValueOnTop===true&&fld.default_value!==undefined? i == 1: i==0}>${c[\"keyValue_\" + this.lang]}</mwc-list-item>`\r\n            )}\r\n            `\r\n        }   \r\n        getProcMasterData(){\r\n            let userSession = JSON.parse(sessionStorage.getItem(\"userSession\"))\r\n            if (this.procInstanceName===undefined){                \r\n                this.procInstanceName=sessionStorage.getItem(\"currentProcInstanceName\")\r\n            }\r\n            //sessionStorage.getItem(\"currentProcInstanceName\")\r\n            this.isProcManagement=userSession.isProcManagement\r\n            if (this.isProcManagement===undefined||this.isProcManagement!==true){\r\n                //let userSession = JSON.parse(sessionStorage.getItem(\"userSession\"))\r\n\r\n                //alert(this.procInstanceName)\r\n\r\n                //console.log('userSession.procedures_list.procedures', userSession.procedures_list.procedures)\r\n                let findProc =[]\r\n                if (this.area!==undefined){\r\n                    findProc = userSession.procedures_list.procedures.filter(m => m.procInstanceName == this.area)\r\n                }else{\r\n                    findProc = userSession.procedures_list.procedures.filter(m => m.procInstanceName == this.procInstanceName)\r\n                }\r\n                // if (!this.config.local) {\r\n                //   if (findProc.length) {\r\n                //     ProceduresModel[this.procName] = findProc[0].procModel\r\n                //   }\r\n                // }\r\n            //        this.procInstanceModel=ProceduresModel[this.procName]\r\n                if (findProc!==undefined&&findProc.length>0&&findProc[0].master_data!==undefined){\r\n                this.masterData=findProc[0].master_data\r\n                //console.log('master data', this.masterData)   \r\n                }\r\n            }else{\r\n                let userSession = JSON.parse(sessionStorage.getItem(\"userSession\"))\r\n                this.masterData=userSession.proc_management_masterdata\r\n            }\r\n        }\r\n        listEntriesFromMasterData(fldMDDef){\r\n            this.getProcMasterData()\r\n            console.log(fldMDDef, this.masterData)\r\n            return this.buildFrontListFromData(fldMDDef, this.masterData)\r\n        }\r\n        listEntriesFromProperty(fldMDDef){\r\n            if (this[fldMDDef.selObjectPropertyName]===undefined){\r\n                alert('selObjectPropertyName '+selObjectPropertyName+' is empty')\r\n                return\r\n            }\r\n            return this.buildFrontListFromData(fldMDDef, this[fldMDDef.selObjectPropertyName])\r\n        }    \r\n        listEntriesFromSelectedItem(fldMDDef){     \r\n            \r\n            let data=[]\r\n            \r\n            if (fldMDDef!==null&&fldMDDef.defval!==undefined&&fldMDDef.defval!==null){\r\n                alert(fldMDDef.defval)\r\n            }    \r\n            if (fldMDDef!==null&&fldMDDef!==undefined&&fldMDDef.default_value!==undefined&&fldMDDef.default_value!==null){\r\n                data=fldMDDef.default_value\r\n            }\r\n            if (fldMDDef!==null&&fldMDDef!==undefined&&fldMDDef.selObjectPropertyName!==undefined&&fldMDDef.selObjectPropertyName!==null&&fldMDDef!==null){\r\n                data=this.selectedItems[0][fldMDDef.selObjectPropertyName]\r\n            }\r\n            if (fldMDDef!==null&&fldMDDef!==undefined&&fldMDDef.internalVariableObjName!==undefined&&fldMDDef.internalVariableObjName!==null&&\r\n                fldMDDef.internalVariableObjProperty!==undefined&&fldMDDef.internalVariableObjProperty!==null){\r\n                data=this[fldMDDef.internalVariableObjName][0][fldMDDef.internalVariableObjProperty]\r\n            }\r\n            if (fldMDDef!==null&&fldMDDef!==undefined&&fldMDDef.internalVariableSingleObjName!==undefined&&fldMDDef.internalVariableSingleObjName!==null&&\r\n                fldMDDef.internalVariableSingleObjProperty!==undefined&&fldMDDef.internalVariableSingleObjProperty!==null){\r\n                data=this[fldMDDef.internalVariableSingleObjName][fldMDDef.internalVariableSingleObjProperty]\r\n            }\r\n    \r\n            let entries=[]\r\n            if (data!==undefined){\r\n                data.forEach(item =>{\r\n                    console.log('item', item, 'fldMDDef.propertyNameContainer.propertyKeyName', fldMDDef.propertyKeyName)\r\n                    let blankEmpty={keyName:'', keyValue_en:'', keyValue_es:''}\r\n                    blankEmpty.keyName=item[fldMDDef.propertyKeyName]\r\n    \r\n                    let valEn=''\r\n                    fldMDDef.propertyKeyValueEn.forEach(item2=>{\r\n                        if (valEn.length>0){valEn=valEn+'-'}\r\n                        valEn=valEn+item[item2]\r\n                    })\r\n                    blankEmpty.keyValue_en=valEn\r\n                    let valEs=''\r\n                    fldMDDef.propertyKeyValueEn.forEach(item2=>{\r\n                        if (valEs.length>0){valEs=valEs+'-'}\r\n                        valEs=valEs+item[item2]\r\n                    })\r\n                    blankEmpty.keyValue_es=valEs\r\n                    console.log('blankEmpty', blankEmpty)\r\n                    entries.push(blankEmpty)\r\n                })\r\n            }\r\n            return entries        \r\n            //return this.buildFrontListFromData(fldMDDef, this.selectedProcedureInstance)\r\n        }\r\n        buildFrontListFromData(fldMDDef, data, isInjected){            \r\n            if (data===undefined||fldMDDef===undefined){return []}\r\n            if (fldMDDef.version!==undefined&&fldMDDef.version===2){\r\n                return this.buildFrontListFromDatav2(fldMDDef, data, isInjected)\r\n            }\r\n            return this.buildFrontListFromDatav1(fldMDDef, data, isInjected)\r\n        }\r\n        buildFrontListFromDatav1(fldMDDef, data, isInjected){            \r\n            if (data===undefined||fldMDDef===undefined){return []}\r\n            let entries=[]\r\n            if (isInjected===undefined||isInjected===false){\r\n                console.log('masterData', data)\r\n                console.log('actionBeingPerformedModel', this.actionBeingPerformedModel)                \r\n                if (String(fldMDDef.propertyNameContainer).toUpperCase()===\"ROOT\"){\r\n\r\n                }else{\r\n                    if (data[fldMDDef.propertyNameContainer]===undefined){\r\n                        alert('Property '+fldMDDef.propertyNameContainer+' not found in Master Data')\r\n                        return entries\r\n                    }\r\n                    data=data[fldMDDef.propertyNameContainer]\r\n                }\r\n            }\r\n            if (fldMDDef.filterInFirstLevel===undefined||fldMDDef.filterInFirstLevel!==true){\r\n                if (data!==undefined){\r\n                    data.forEach(item =>{\r\n                    // console.log('item', item, 'fldMDDef.propertyNameContainer.propertyKeyName', fldMDDef.propertyKeyName)\r\n                        let blankEmpty={keyName:'', keyValue_en:'', keyValue_es:''}\r\n                        blankEmpty.keyName=item[fldMDDef.propertyKeyName]\r\n                        blankEmpty.keyValue_en=item[fldMDDef.propertyKeyValueEn]\r\n                        blankEmpty.keyValue_es=item[fldMDDef.propertyKeyValueEs]\r\n                        blankEmpty.allRecord=item\r\n                        //console.log('blankEmpty', blankEmpty)\r\n                        entries.push(blankEmpty)\r\n                    })\r\n                }\r\n                if (fldMDDef.fixItemsOnTop!==undefined){\r\n                    entries=[...fldMDDef.fixItemsOnTop, ...entries]\r\n                }\r\n                if (fldMDDef.fixItemsAtBottom!==undefined){\r\n                    entries=[...entries, ...fldMDDef.fixItemsAtBottom]\r\n                }\r\n            }else{\r\n                // if ((fldMDDef.elementName===undefined||fldMDDef.elementName===null)&&\r\n                //     (fldMDDef.propertyNameContainerLevelfixValue===undefined||fldMDDef.propertyNameContainerLevelfixValue===null)\r\n                //     (fldMDDef.contextVariableName===undefined||fldMDDef.contextVariableName===null)\r\n                //     ((fldMDDef.internalVariableSimpleObjName===undefined||fldMDDef.internalVariableSimpleObjName===null) || (fldMDDef.internalVariableSimpleObjProperty===undefined||fldMDDef.internalVariableSimpleObjProperty===null))\r\n                //     ){\r\n                //     alert('Property elementName or propertyNameContainerLevelfixValue is mandatory when filterInFirstLevel=true. Review model definition')\r\n                //     return entries\r\n                // }\r\n                let filterValue=undefined\r\n                if (fldMDDef.propertyNameContainerLevelfixValue!==undefined){\r\n                    filterValue=fldMDDef.propertyNameContainerLevelfixValue                \r\n                } else if (fldMDDef.elementName!==undefined){\r\n                    filterValue=this[fldMDDef.elementName].value\r\n                } else if (fldMDDef.contextVariableName!==undefined) {\r\n                    filterValue=this[fldMDDef.contextVariableName]                \r\n                } else if (fldMDDef.internalVariableSimpleObjName!==undefined&&fldMDDef.internalVariableSimpleObjProperty!==undefined){\r\n                    filterValue=this[fldMDDef.internalVariableSimpleObjName][fldMDDef.internalVariableSimpleObjProperty]\r\n                }\r\n                let filterPropertyName=\"name\"\r\n                if (fldMDDef.filterPropertyName!==undefined){\r\n                    filterPropertyName=fldMDDef.filterPropertyName\r\n                }\r\n                if (filterValue===undefined){return entries}\r\n                let result = data[fldMDDef.propertyNameContainer].find(item => item[filterPropertyName] === filterValue);\r\n                if (result===undefined){return entries}\r\n                //alert(filterValue)\r\n                // if (fldMDDef.propertyNameContainerLevel2fixValue!==undefined&&fldMDDef.propertyNameContainerLevel3){\r\n                //     entries=getListInLevel3(fldMDDef, result[fldMDDef.propertyNameContainerLevel2])\r\n                //     return entries\r\n                // }\r\n                result[fldMDDef.propertyNameContainerLevel2].forEach(item =>{\r\n                    console.log('item', item, 'fldMDDef.propertyNameContainer.propertyKeyName', fldMDDef.propertyKeyName)\r\n                    let blankEmpty={keyName:'', keyValue_en:'', keyValue_es:''}\r\n                    blankEmpty.keyName=item[fldMDDef.propertyKeyName]\r\n                    blankEmpty.keyValue_en=item[fldMDDef.propertyKeyValueEn]\r\n                    blankEmpty.keyValue_es=item[fldMDDef.propertyKeyValueEs]\r\n                    blankEmpty.allRecord=item\r\n                    console.log('blankEmpty', blankEmpty)\r\n                    entries.push(blankEmpty)\r\n                })\r\n                console.log('entries at end', entries)\r\n                if (fldMDDef.fixItemsOnTop!==undefined){\r\n                    entries=[...fldMDDef.fixItemsOnTop, ...entries]\r\n                }\r\n                if (fldMDDef.fixItemsAtBottom!==undefined){\r\n                    entries=[...entries, ...fldMDDef.fixItemsAtBottom]\r\n                }                \r\n                return entries\r\n                \r\n            }        \r\n            //let blankEmpty={keyName:\"1\", keyValue_en:\"2\", keyValue_es:\"3\"}\r\n            //entries.push(blankEmpty)\r\n            return entries\r\n        }\r\n        buildFrontListFromDatav2(config, data) {\r\n            // Check if data is undefined or if the current configuration is invalid\r\n            if (!data || !config) {\r\n                console.log('Invalid data or configuration');\r\n                return [];\r\n            }\r\n        \r\n            console.log('Processing Level:', config.label);\r\n            let entries = [];\r\n        \r\n            // Apply the filter defined in the current node configuration\r\n            let filteredData = data\r\n            if (config.filterStaticValue!==undefined){\r\n                filteredData=data.filter(item => item[config.filterKey] === config.filterStaticValue);\r\n            }\r\n            if (config.filterDataValue!==undefined){\r\n                filteredData=data.filter(item => item[config.filterKey] === data[config.filterDataValue]);\r\n            }\r\n            // Iterate over each filtered item to process further or to generate the final entry\r\n            filteredData.forEach(item => {\r\n                if (config.children && item[config.children]) {\r\n                    // If children are defined, recurse into the children with the new subset of data\r\n                    let childEntries = buildFrontListFromDatav2(config.children_definition, item[config.children]);\r\n                    entries = entries.concat(childEntries);\r\n                } else {\r\n                    // If no children are defined, it's a terminal node\r\n                    console.log('Terminal Node Found:', config.label);\r\n                    let blankEmpty = {\r\n                        keyName: item[config.propertyKeys.name],\r\n                        keyValue_en: item[config.propertyKeys.values.en],\r\n                        keyValue_es: item[config.propertyKeys.values.es],\r\n                        allRecord: item\r\n                    };\r\n                    entries.push(blankEmpty);\r\n                }\r\n            });\r\n        \r\n            return entries;\r\n        }\r\n        \r\n\r\n        getListInLevel3(fldMDDef, level2Arr){\r\n            let level3Arr = level2Arr.filter(p => p[propertyNameContainerLevel2PropertyKeyName] == fldMDDef.propertyNameContainerLevel2fixValue)\r\n            level3Arr[fldMDDef.propertyNameContainerLevel3].forEach(item =>{\r\n                console.log('item', item, 'fldMDDef.propertyNameContainer.propertyKeyName', fldMDDef.propertyNameContainerLevel2PropertyKeyName)\r\n                let blankEmpty={keyName:'', keyValue_en:'', keyValue_es:''}\r\n                blankEmpty.keyName=item[fldMDDef.propertyKeyName]\r\n                blankEmpty.keyValue_en=item[fldMDDef.propertyKeyValueEn]\r\n                blankEmpty.keyValue_es=item[fldMDDef.propertyKeyValueEs]\r\n                console.log('blankEmpty', blankEmpty)\r\n                entries.push(blankEmpty)\r\n            })\r\n        }\r\n    }\r\n}\r\n","import { LitElement, html, css } from 'lit';\r\nimport '@material/mwc-select';\r\nimport '@material/mwc-list/mwc-list-item';\r\nimport { ListsFunctions } from './lists-functions';\r\nimport { DialogsFeatures } from '../components/GenericDialogs/CommonFunctions/DialogsFeatures';\r\nclass TwoListsLinked extends ListsFunctions(DialogsFeatures(LitElement)) {\r\n  static properties = {\r\n    lang: { type: String},\r\n    procInstanceName: { type: String},\r\n    fld: { type: Object },\r\n    listLinked1Items: { type: Array },\r\n    listLinked2Items: { type: Array },\r\n    selectedList1Value: { type: String }\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.fld = {};\r\n    this.listLinked1Items = [];\r\n    this.listLinked2Items = [];\r\n    this.selectedList1Value = '';\r\n    this.procInstanceName = '';\r\n  }\r\n\r\n  static styles = css`\r\n    .layout {\r\n      display: flex;\r\n    }\r\n    .horizontal {\r\n      flex-direction: row;\r\n    }\r\n    .flex {\r\n      flex: 1;\r\n    }\r\n    .center-center {\r\n      justify-content: center;\r\n      align-items: center;\r\n    }\r\n        mwc-select {\r\n      --mdc-theme-primary: rgba(36, 192, 235, 1);\r\n      --mdc-theme-text-primary-on-background: rgba(49, 130, 189, 1);\r\n      --mdc-select-ink-color: rgb(47, 47, 47);\r\n      --mdc-select-dropdown-icon-color: rgba(36, 192, 235, 1);\r\n      --mdc-select-hover-line-color: rgba(36, 192, 235, 1);\r\n      --mdc-notched-outline-border-color: #148CFA;\r\n      --mdc-select-disabled-dropdown-icon-color: rgba(36, 192, 235, 1);\r\n      --mdc-select-label-ink-color: #148CFA; /* Color del label cuando no hay valor seleccionado */\r\n      --mdc-select-idle-line-color: #148CFA; /* Color de la línea */\r\n      --mdc-select-bottom-line-color: #148CFA; /* Color de la línea inferior */\r\n\r\n      font-family: Montserrat;\r\n      font-weight: bold;\r\n      font-size: 19px;\r\n    }\r\n\r\n    mwc-select::part(notched-outline) {\r\n      border-color: #148CFA;\r\n    }\r\n\r\n    mwc-select::part(idle) {\r\n      border-color: #148CFA;\r\n    }\r\n\r\n    mwc-select::part(label) {\r\n      color: #148CFA;\r\n    }\r\n\r\n    mwc-select.outlined {\r\n      --mdc-theme-primary: rgba(36, 192, 235, 1);\r\n      --mdc-theme-text-primary-on-background: rgba(49, 130, 189, 1);\r\n      --mdc-select-ink-color: rgba(36, 192, 235, 1);\r\n      font-family: Montserrat;\r\n      font-weight: bold;\r\n      font-size: 19px;\r\n      background-color: 4fcad029;\r\n    }\r\n    `;\r\n\r\n  render() {\r\n    return html`\r\n      ${!this.fld.listLinked1 ? html`` : html`\r\n        <div class=\"layout horizontal flex center-center\">\r\n          <mwc-select\r\n            id=\"listLinked1\"\r\n            label=\"${this.fieldLabel(this.fld.listLinked1)}\"\r\n            @selected=${(e) => this.actionWhenListValueSelected(e)}\r\n            ?disabled=${this.isFieldDisabled(this.fld.listLinked1)}\r\n            style=\"width: 100%;\"\r\n          >\r\n            ${this.listEntriesTwoListsLinked(this.fld.listLinked1)}\r\n          </mwc-select>\r\n        </div>\r\n        <div class=\"layout horizontal flex center-center\">\r\n          <mwc-select\r\n            id=\"listLinked2\"\r\n            label=\"${this.fieldLabel(this.fld.listLinked2)}\"\r\n            ?disabled=${this.selectedList1Value === ''}\r\n            style=\"width: 100%;\"\r\n          >\r\n            ${this.listEntriesTwoListsLinked(this.fld.listLinked2)}\r\n          </mwc-select>\r\n        </div>\r\n      `}\r\n    `;\r\n  }\r\n\r\n\r\n  listEntriesTwoListsLinked(field) {\r\n    let entries = [];\r\n    let blankEmpty = { keyName: \"\", keyValue_en: \"\", keyValue_es: \"\", allRecord: {} };\r\n    if (field.addBlankValueOnTop) {\r\n        entries.push(blankEmpty);\r\n      }\r\n    if (field.items) {\r\n        entries = [...entries, ...field.items];\r\n    } else if (field.valuesFromMasterData) {\r\n        entries = [...entries, ...this.listEntriesFromMasterData(field.valuesFromMasterData)];      \r\n    }\r\n  \r\n    // Si es la lista 2, usa los elementos filtrados\r\n    if (field === this.fld.listLinked2) {\r\n      entries = this.listLinked2Items;\r\n    }\r\n    if (field.addBlankValueAtBottom) {\r\n        entries.push(blankEmpty);\r\n    }\r\n    if (entries.length === 0) {\r\n    return html``;\r\n    }\r\n    return entries.map(item => html`<mwc-list-item value=\"${item.keyName}\">${item[\"keyValue_\" + this.lang]}</mwc-list-item>`);\r\n  }\r\n  \r\n  actionWhenListValueSelected(event) {\r\n    this.listLinked2.value=''\r\n    const selectedValue = event.target.value;\r\n    this.selectedList1Value = selectedValue;\r\n    this.updateList2Entries(selectedValue);\r\n  }\r\n  \r\n  updateList2Entries(selectedValue) {\r\n    if (selectedValue === '') {\r\n      this.listLinked2Items = [];\r\n    } else {\r\n      let allDataWithNoFilter;\r\n      if (this.fld.listLinked2.items) {\r\n        allDataWithNoFilter = this.fld.listLinked2.items;\r\n        this.listLinked2Items = allDataWithNoFilter.filter(item => item.parentValue === selectedValue);\r\n      } else {\r\n        let list2MasterDataConfig=this.fld.listLinked2.valuesFromMasterData\r\n        allDataWithNoFilter = this.masterData[list2MasterDataConfig.propertyNameContainer] \r\n        \r\n        allDataWithNoFilter= allDataWithNoFilter.filter(item => item[list2MasterDataConfig.propertyNameContainerLevelPropertyKeyName] === selectedValue);\r\n        let allDataForTheSelectedEntry=allDataWithNoFilter[0]\r\n        allDataForTheSelectedEntry=allDataForTheSelectedEntry[list2MasterDataConfig.selectedEntryFromFilterPropertyName]\r\n        this.listLinked2Items = allDataForTheSelectedEntry        \r\n        .map(item => ({\r\n          keyName: item[this.fld.listLinked2.valuesFromMasterData.propertyKeyName],\r\n          keyValue_en: item[this.fld.listLinked2.valuesFromMasterData.propertyKeyValueEn],\r\n          keyValue_es: item[this.fld.listLinked2.valuesFromMasterData.propertyKeyValueEs]\r\n        }));  \r\n        let blankEmpty = { keyName: \"\", keyValue_en: \"\", keyValue_es: \"\", allRecord: {} };\r\n    \r\n        // Agrega una entrada en blanco al principio si está configurado\r\n        if (this.fld.listLinked2.addBlankValueOnTop) {\r\n          this.listLinked2Items.unshift(blankEmpty);\r\n        }\r\n    \r\n        // Agrega una entrada en blanco al final si está configurado\r\n        if (this.fld.listLinked2.addBlankValueAtBottom) {\r\n          this.listLinked2Items.push(blankEmpty);\r\n        }              \r\n      }\r\n    }\r\n    // Necesario para actualizar el renderizado de la lista 2\r\n    this.requestUpdate();\r\n  }\r\n  \r\n  get listLinked1() { \r\n    return this.shadowRoot.querySelector(\"mwc-select#listLinked1\"); \r\n  }\r\n  \r\n  get listLinked2() { \r\n    return this.shadowRoot.querySelector(\"mwc-select#listLinked2\"); \r\n  }\r\n  \r\n}\r\n\r\ncustomElements.define('two-lists-linked', TwoListsLinked);\r\n","import { html, nothing } from 'lit';\r\nimport { commonLangConfig } from '@trazit/common-core';\r\nimport {GridFunctions} from '../grid_with_buttons/GridFunctions';\r\nimport '@material/mwc-textarea';\r\nimport '@cicciosgamino/qr-code-element';\r\n\r\nimport '@material/mwc-list/mwc-list-item';\r\nimport '@material/mwc-select';\r\nimport '@material/mwc-checkbox';\r\nimport '@material/mwc-formfield';\r\nimport '../MultiSelect';\r\n//import '../Tree/treeview/index';\r\nimport '../Tree/tree-viewfran';\r\nimport '../speclimitquantitative/index';\r\nimport { ListsFunctions } from '../../form_fields/lists-functions';\r\nimport '../../form_fields/twolistslinked'\r\nimport {DialogsFunctions} from './DialogsFunctions';\r\nimport { DialogsFeatures } from './CommonFunctions/DialogsFeatures';\r\nexport function TrazitGenericDialogs(base) {\r\n\r\n  return class extends DialogsFeatures(ListsFunctions(GridFunctions(DialogsFunctions(base)))) {\r\n    static get properties() {\r\n      return {\r\n        selectedResults: { type: Array },\r\n        enterResults: { type: Array },\r\n        microorganismList: { type: Array },\r\n        selectedAssigns: { type: Array },\r\n        assignList: { type: Array },\r\n        targetValue: { type: Object },\r\n        selectedDialogAction: { type: Object },\r\n        lotDays: { type: Number },\r\n        deactivatedLots: { type: Array },\r\n        openInvests: { type: Array },\r\n        selectedInvestigations: { type: Array },\r\n        capaRequired: { type: Boolean },\r\n        selectedStucks: { type: Array },\r\n        dataForDialog: { type: Object },\r\n        familyList: { type: Array },\r\n        microName: { type: String },\r\n        fromGrid: { type: Boolean },\r\n        fields:{type: Array},\r\n        declineDialog:{type: Object},\r\n        masterData:{type: Object},\r\n        genericDialogGridItems: { type: Array },\r\n        genericDialogGridSelectedItems: { type: Array },\r\n        area: { type: String },\r\n        procInstanceName: { type: String }\r\n      }\r\n    }\r\n\r\n    constructor() {\r\n      super()\r\n      this.lotDays = 7\r\n      this.deactivatedLots = []\r\n      this.microorganismList = []\r\n      this.familyList = []\r\n      this.capaRequired = false\r\n      this.fromGrid = false\r\n      this.fields=[]\r\n      this.actionBeingPerformedModel={}\r\n      this.fieldsShouldBeReset=true\r\n      this.masterData={}\r\n      this.genericDialogGridItems=[]\r\n      this.genericDialogGridSelectedItems=[]\r\n      this.procInstanceName = ''; \r\n    }\r\n    handleQRCodeDecoded(e) {\r\n        const decodedData = e.detail.value; // Asumiendo que el evento tiene los datos decodificados\r\n        const dialogFields = this.actionBeingPerformedModel.dialogInfo.fields;\r\n        dialogFields.forEach(field => {\r\n            const keyName = Object.keys(field)[0];\r\n            const fieldDef = field[keyName];\r\n            if (fieldDef.qrCodeParsing && decodedData[fieldDef.qrCodeParsing]) {\r\n                this[keyName].value = decodedData[fieldDef.qrCodeParsing];\r\n            }\r\n        });\r\n    }\r\n    renderQRCodeScanner(actionModel) {\r\n        const qrCodeField = actionModel.dialogInfo.fields.find(field => field.qrcode);\r\n        if (qrCodeField) {\r\n            return html`\r\n            <div class=\"layout horizontal flex center-center\">\r\n                <qr-code-element\r\n                    continuous\r\n                    @qrcode-decoded=${this.handleQRCodeDecoded}>\r\n                </qr-code-element>\r\n            </div>\r\n            `;\r\n        }\r\n        return nothing;\r\n    }\r\n    \r\n    renderDialogFields(actionModel) {\r\n        return html`\r\n        ${actionModel.dialogInfo.fields.map((fld, i) => html`\r\n            // Renderiza tus campos aquí como antes\r\n        `)}\r\n        `;\r\n    }\r\n\r\n    openGenericDialog(actionModel = this.actionBeingPerformedModel){\r\n        //alert('openGenericDialog')\r\n        if (actionModel===undefined||actionModel.dialogInfo===undefined){\r\n            return false\r\n        }    \r\n        if (actionModel.dialogInfo.gridContent!==undefined&&actionModel.dialogInfo.gridContent===true){\r\n            this.getGenericDialogGridItems(actionModel.dialogInfo)\r\n            return true\r\n        }\r\n        if (actionModel.dialogInfo.filesListContent!==undefined&&actionModel.dialogInfo.filesListContent===true){\r\n            this.getGenericDialogGridItems(actionModel.dialogInfo)\r\n            return true\r\n        }\r\n\r\n        this.formDefaultValue()\r\n        if (actionModel.dialogInfo===undefined||actionModel.dialogInfo.name===undefined||actionModel.dialogInfo.name.toString().toUpperCase()!==\"GENERICDIALOG\"){\r\n            return false\r\n       }    \r\n\r\n//        if (!actionModel||!actionModel.dialogInfo||!actionModel.dialogInfo.fields){\r\n//        //alert(false)\r\n//        return false\r\n//       } \r\n       // alert(true)\r\n       //this.defaultValue()\r\n       //this.resetFields()\r\n       return true \r\n    }\r\n\r\n    acceptedGenericGridDialog(e){\r\n        console.log('genericDialogGridSelectedItems', this.genericDialogGridSelectedItems)\r\n        if (this.genericDialogGridSelectedItems.length==0){\r\n            if (this.lang==\"es\"){\r\n                alert('Por favor, seleccione un elemento de la tabla')\r\n            }else{\r\n                alert('Please select one element from the list first')\r\n            }\r\n            return\r\n        }\r\n        this.dialogAcceptForGrid(false, this.genericDialogGridSelectedItems[0])\r\n        e.stopPropagation();\r\n        return\r\n        this.fieldsShouldBeReset=true\r\n        if (this.checkMandatoryFieldsNotEmpty()){\r\n            this.dialogAccept(false)\r\n        }else{\r\n            console.log('Accepted Generic Dialog but mandatories pending then action not performed')\r\n           // alert('mandatories pending')\r\n           e.stopPropagation();\r\n        }\r\n    }\r\n    /** Date Template Dialog part  @open=${this.defaultValue()}*/\r\n    genericFormDialog(actionModel, procInstanceName) {\r\n        this.procInstanceName=procInstanceName\r\n        if (actionModel === undefined) {\r\n            actionModel = this.actionBeingPerformedModel\r\n            if (actionModel!==undefined){\r\n                this.area=actionModel.area\r\n            }\r\n        }\r\n        \r\n\r\n         // @closed=${this.resetFields} this is in use but moved to be executed about to perform the fetchApi \r\n         //     otherwise it is not compatible with actions requiring credentials dialog.\r\n    return html`\r\n    <style>\r\n    mwc-textfield {\r\n        border-style : Solid;\r\n        border-color : #999999;\r\n        border-color : rgba(153, 153, 153, 1);\r\n        border-width : 1px;\r\n        border-radius : 7px;\r\n        -moz-border-radius : 7px;\r\n        -webkit-border-radius : 7px;   \r\n        font-family : Montserrat;\r\n        font-weight : bold;\r\n        font-size : 19px;\r\n        background-color :  #FFFFFF;\r\n        background-color : rgb(255, 255, 255);  \r\n        --mdc-text-field-idle-line-color:#148CFA;\r\n        --mdc-text-field-outlined-idle-border-color: #148CFA;\r\n        --mdc-text-field-label-ink-color:  #148CFA;\r\n        --mdc-text-field-focused-label-color: #148CFA;\r\n        --mdc-theme-primary: #0465FB;\r\n      }\r\n      mwc-select {        \r\n        --mdc-theme-primary : rgba(36, 192, 235, 1);\r\n        --mdc-theme-text-primary-on-background : rgba(49, 130, 189, 1);\r\n        --mdc-select-ink-color: rgb(47, 47, 47);\r\n        --mdc-select-dropdown-icon-color:rgba(36, 192, 235, 1);\r\n        --mdc-select-hover-line-color:rgba(36, 192, 235, 1);\r\n        --mdc-notched-outline-border-color: rgba(186, 235, 248, 0.4);\r\n        --mdc-select-disabled-dropdown-icon-color:rgba(36, 192, 235, 1);\r\n        --mdc-select-label-ink-color: #148CFA;\r\n        \r\n        \r\n        font-family : Montserrat;\r\n        font-weight : bold;\r\n        font-size : 19px;\r\n      }\r\n      mwc-select.outlined {        \r\n        --mdc-theme-primary : rgba(36, 192, 235, 1);\r\n        --mdc-theme-text-primary-on-background : rgba(49, 130, 189, 1);\r\n        --mdc-select-ink-color: rgba(36, 192, 235, 1);\r\n        font-family : Montserrat;\r\n        font-weight : bold;\r\n        font-size : 19px;\r\n        background-color: 4fcad029;\r\n      }  \r\n      \r\n    .file-list {\r\n      list-style: none;\r\n      padding: 0;\r\n      margin: 0 auto;\r\n      max-width: 600px;\r\n    }\r\n\r\n    /* Style for each list item */\r\n    .file-list-item {\r\n      display: flex;\r\n      align-items: center;\r\n      padding: 10px;\r\n      border-bottom: 1px solid #ddd;\r\n    }\r\n\r\n    /* Style for the icon button */\r\n    .file-list-item mwc-icon-button {\r\n      margin-right: 10px;\r\n    }\r\n\r\n    /* Style for the file name */\r\n    .file-name {\r\n      font-size: 14px;\r\n      color: #333;\r\n    }            \r\n    </style>\r\n        <tr-dialog id=\"genericDialog\"  \r\n             \r\n\r\n            ?open=${this.openGenericDialog(actionModel)}  heading=\"\" hideActions=\"\" scrimClickAction=\"\">\r\n        \r\n        ${actionModel!==undefined&&actionModel.dialogInfo!==undefined&&actionModel.dialogInfo!==undefined&&actionModel.dialogInfo.gridContent!==undefined&&actionModel.dialogInfo.gridContent===true ?\r\n        html`\r\n            <div style=\"margin-top:30px;text-align:center\">\r\n                <sp-button size=\"xl\" variant=\"secondary\" slot=\"secondaryAction\" dialogAction=\"decline\" @click=${this.declineDialog}> \r\n                    ${commonLangConfig.closeDialogButton[\"label_\" + this.lang]}</sp-button>\r\n                <sp-button size=\"xl\" slot=\"primaryAction\" dialogAction=\"accept\" @click=${this.acceptedGenericGridDialog}>\r\n                    ${commonLangConfig.confirmDialogButton[\"label_\" + this.lang]}</sp-button>\r\n            </div>  \r\n            \r\n            ${this.genericDialogGridItems==undefined||this.genericDialogGridItems.length==0?\r\n                html`${this.lang===\"en\"?'No items to display':'No hay elementos para ver'}`\r\n            :html`\r\n                <vaadin-grid .items=${this.genericDialogGridItems} id=\"genericDialogGrid\" theme=\"row-dividers\" column-reordering-allowed multi-sort \r\n                @active-item-changed=${e => this.genericDialogGridSelectedItems = e.detail.value ? [e.detail.value] : []}\r\n                .selectedItems=\"${this.genericDialogGridSelectedItems}\" all-rows-visible>\r\n                ${actionModel.dialogInfo.langConfig.gridHeader.map(fld =>\r\n                    html`<vaadin-grid-filter-column width=\"${fld.width}\" resizable text-align=\"center\" path=\"${fld.fldName}\" .header=\"${fld[\"label_\" + this.lang]}\"></vaadin-grid-filter-column>`\r\n                    )}\r\n                </vaadin-grid>  \r\n            `}                      \r\n        `:html`\r\n        ${!actionModel||!actionModel.dialogInfo||!actionModel.dialogInfo.fields ?\r\n            html`\r\n                ${actionModel!==undefined&&actionModel.dialogInfo!==undefined&&actionModel.dialogInfo!==undefined&&actionModel.dialogInfo.filesListContent!==undefined&&actionModel.dialogInfo.filesListContent===true ?\r\n                html`\r\n                    ${this.genericDialogGridItems==undefined||this.genericDialogGridItems.length==0?html`${this.lang===\"en\"?'No items to display':'No hay elementos para ver'}`\r\n                    :html`\r\n                    <ul class=\"file-list\">\r\n                    ${this.renderQRCodeScanner(actionModel)}\r\n                        ${this.genericDialogGridItems.map((fld, i) =>\r\n                        html`\r\n                        <li class=\"file-list-item\">\r\n                            <mwc-icon-button title=\"${fld.brief_summary!==undefined&&fld.brief_summary.length>0? fld.brief_summary: fld.file_link}\" icon=\"picture_as_pdf\" \r\n                                @click=${()=>window.open(fld.file_link!==undefined&&fld.file_link.length?fld.file_link:fld.report_url, '_blank').focus()} \r\n                                ?disabled=${!fld.file_link} style=\"--mdc-icon-size: 40px;\"></mwc-icon-button>\r\n                            <div class=\"file-name\">${fld.file_link!==undefined&&fld.file_link.length?fld.file_link:fld.original_file_name}</div>\r\n                        </li>                            \r\n                        `\r\n                        )}\r\n                    </ul>\r\n                    `}\r\n                `:nothing}    \r\n            `: html`              \r\n            ${actionModel.dialogInfo.fields.map((fld, i) =>             \r\n                html`   \r\n                ${!fld.acceptancecriteria ?\r\n                    html``: html`        \r\n                        <speclimit-quantitative id=\"acceptancecriteria\" .fld=${fld.acceptancecriteria} ></speclimit-quantitative>         \r\n                `}          \r\n\r\n                ${!fld.tree1 ?\r\n                    html``: html`     \r\n  <tree-viewfran    id=\"tree1\" .data=\"${fld.tree1.treeElementData}\"   label=\"${this.fieldLabel(fld.tree1)}\" .specification=\"${fld.tree1.treeElementSpecification}\"    \r\n    @item-selected=${fld.tree1.treeSelection}    .level=\"${0}\"  ></tree-viewfran>                       \r\n               <!--         <tree-view id=\"tree1\" .data=${fld.tree1.treeElementData} .specification=${fld.tree1.treeElementSpecification} \r\n               @item-selected=${fld.tree1.treeSelection}></tree-view>         -->\r\n                `}          \r\n                ${!fld.text1 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"text1\" type=\"text\" .value=${fld.text1.default_value ? fld.text1.default_value : ''}  label=\"${this.fieldLabel(fld.text1)}\"  ?disabled=${this.isFieldDisabled(fld.text1)} \r\n                        @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n                    </div>\r\n                `}          \r\n                ${!fld.text2 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"text2\" type=\"text\" .value=${fld.text2.default_value ? fld.text2.default_value : ''} label=\"${this.fieldLabel(fld.text2)}\"  ?disabled=${this.isFieldDisabled(fld.text2)}                    \r\n                    @keypress=${(e)=>e.keyCode == 13 &&this.actionWhenOtherThanListValueChanged(e, fld.text2, actionModel.dialogInfo, this.genericDialogGridSelectedItems)}  \r\n                    </mwc-textfield>                  \r\n                    </div>\r\n                `}          \r\n                ${!fld.text3 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"text3\" type=\"text\" .value=${fld.text3.default_value ? fld.text3.default_value : ''} label=\"${this.fieldLabel(fld.text3)}\"  ?disabled=${this.isFieldDisabled(fld.text3)} \r\n                        @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n                    </div>\r\n                `}                       \r\n                ${!fld.text4 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"text4\" type=\"text\" .value=${fld.text4.default_value ? fld.text4.default_value : ''} label=\"${this.fieldLabel(fld.text4)}\"  ?disabled=${this.isFieldDisabled(fld.text4)} \r\n                    @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n                    </div>\r\n                `}          \r\n                ${!fld.text5 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"text5\" type=\"text\" .value=${fld.text5.default_value ? fld.text5.default_value : ''} label=\"${this.fieldLabel(fld.text5)}\"  ?disabled=${this.isFieldDisabled(fld.text5)} \r\n                    @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n                    </div>\r\n                `}          \r\n                ${!fld.text6 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"text6\" type=\"text\" .value=${fld.text6.default_value ? fld.text6.default_value : ''} label=\"${this.fieldLabel(fld.text6)}\"  ?disabled=${this.isFieldDisabled(fld.text6)} \r\n                    @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n                    </div>\r\n                `}          \r\n                ${!fld.text7 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"text7\" type=\"text\" .value=${fld.text7.default_value ? fld.text7.default_value : ''} label=\"${this.fieldLabel(fld.text7)}\" ?disabled=${this.isFieldDisabled(fld.text7)}  \r\n                    @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n                    </div>\r\n                `}          \r\n                ${!fld.text8 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"text8\" type=\"text\" .value=${fld.text8.default_value ? fld.text8.default_value : ''} label=\"${this.fieldLabel(fld.text8)}\" ?disabled=${this.isFieldDisabled(fld.text8)} \r\n                    @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n                    </div>\r\n                `}          \r\n                ${!fld.text9 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"text9\" type=\"text\" .value=${fld.text9.default_value ? fld.text9.default_value : ''} label=\"${this.fieldLabel(fld.text9)}\" ?disabled=${this.isFieldDisabled(fld.text9)} \r\n                    @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n                    </div>\r\n                `}          \r\n                ${!fld.text10 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"text10\" type=\"text\" .value=${fld.text10.default_value ? fld.text10.default_value : ''} label=\"${this.fieldLabel(fld.text10)}\" ?disabled=${this.isFieldDisabled(fld.text10)} \r\n                    @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n                    </div>\r\n                `} \r\n                ${!fld.textarea1 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textarea id=\"textarea1\" label=\"${this.fieldLabel(fld.textarea1)}\" rows=10 cols=100></mwc-textarea>            \r\n                    </div>\r\n                `} \r\n                ${!fld.number111 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"number111\" type=\"number\" \r\n                    .value=${this.fldDefaultValue(fld.number111)}                      \r\n                    @input=${e=>this.setNumberMask(e, fld.number111)}\r\n                    label=\"${this.fieldLabel(fld.number111)}\"\r\n                    @keypress=${e => e.keyCode == 13}></mwc-textfield>                 \r\n                    </div>\r\n                `}   \r\n\r\n                ${!fld.number1 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                        <mwc-textfield class=\"layout flex\" id=\"number1\" type=\"number\"\r\n                            .value=${String(this.fldDefaultValue(fld.number1))}\r\n                            @input=${e => this.setValidVal(e, fld)}\r\n                            label=\"${this.fieldLabel(fld.number1)}\"\r\n                            ?disabled=${this.isFieldDisabled(fld.number1)}\r\n                            @keypress=${e => e.keyCode === 13 && this.acceptedGenericDialog()}></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.number2 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"number2\" type=\"number\" @input=${e=>this.setNumberMask(e, fld.number2)}  ?disabled=${this.isFieldDisabled(fld.number2)} \r\n                    .value=${this.fldDefaultValue(fld.number2)}    label=\"${this.fieldLabel(fld.number2)}\"\r\n                    @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.number3 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"number3\" type=\"number\" @input=${e=>this.setNumberMask(e, fld.number3)} ?disabled=${this.isFieldDisabled(fld.number3)} \r\n                    .value=${this.fldDefaultValue(fld.number3)}    label=\"${this.fieldLabel(fld.number3)}\"\r\n                    @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.number4 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"number4\" type=\"number\" @input=${e=>this.setNumberMask(e, fld.number4)} ?disabled=${this.isFieldDisabled(fld.number4)} \r\n                    .value=${this.fldDefaultValue(fld.number4)}    label=\"${this.fieldLabel(fld.number4)}\"\r\n                    @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.number5 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"number5\" type=\"number\" @input=${e=>this.setNumberMask(e, fld.number5)} ?disabled=${this.isFieldDisabled(fld.number5)} \r\n                    .value=${this.fldDefaultValue(fld.number5)}    label=\"${this.fieldLabel(fld.number5)}\"\r\n                    @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.number6 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"number6\" type=\"number\" @input=${e=>this.setNumberMask(e, fld.number6)} ?disabled=${this.isFieldDisabled(fld.number6)} \r\n                    .value=${this.fldDefaultValue(fld.number6)}   label=\"${this.fieldLabel(fld.number6)}\"\r\n                    @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.number7 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"number7\" type=\"number\" @input=${e=>this.setNumberMask(e, fld.number7)} ?disabled=${this.isFieldDisabled(fld.number7)} \r\n                    .value=${this.fldDefaultValue(fld.number7)}    label=\"${this.fieldLabel(fld.number7)}\"\r\n                    @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.number8 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"number8\" type=\"number\" @input=${e=>this.setNumberMask(e, fld.number8)} ?disabled=${this.isFieldDisabled(fld.number8)} \r\n                    .value=${this.fldDefaultValue(fld.number8)}    label=\"${this.fieldLabel(fld.number8)}\"\r\n                    @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.number9 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"number9\" type=\"number\" @input=${e=>this.setNumberMask(e, fld.number9)} ?disabled=${this.isFieldDisabled(fld.number9)} \r\n                    .value=${this.fldDefaultValue(fld.number9)}    label=\"${this.fieldLabel(fld.number9)}\"\r\n                    @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.number10 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"number10\" type=\"number\" @input=${e=>this.setNumberMask(e, fld.number10)} ?disabled=${this.isFieldDisabled(fld.number10)} \r\n                    .value=${this.fldDefaultValue(fld.number10)}    label=\"${this.fieldLabel(fld.number10)}\"\r\n                    @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.checkbox1 ?\r\n                    html``: html`        \r\n                    <mwc-formfield label=\"${this.fieldLabel(fld.checkbox1)}\" >\r\n                        <mwc-checkbox id=\"checkbox1\" \r\n                        ?checked=${this.fldDefaultValue(fld.checkbox1)} ?disabled=${this.isFieldDisabled(fld.checkbox1)} \r\n                        @change=${e => { this.checkbox1.value=this.checkbox1.checked}}\r\n                        value=\"${fld.checkbox1.default_value}\"\r\n                        ></mwc-checkbox>\r\n                    </mwc-formfield>\r\n                `}                              \r\n                    ${!fld.checkbox2 ?\r\n                    html``: html`        \r\n                        <mwc-formfield label=\"${this.fieldLabel(fld.checkbox2)}\" >\r\n                        <mwc-checkbox id=\"checkbox2\" \r\n                        ?checked=${this.fldDefaultValue(fld.checkbox2)} ?disabled=${this.isFieldDisabled(fld.checkbox2)} \r\n                        @change=${e => { this.checkbox2.value=this.checkbox2.checked}}\r\n                        value=\"${fld.checkbox2.default_value}\"\r\n                    ></mwc-checkbox>\r\n                        </mwc-formfield>\r\n                    `}                              \r\n                    ${!fld.checkbox3 ?\r\n                    html``: html`        \r\n                        <mwc-formfield label=\"${this.fieldLabel(fld.checkbox3)}\" >\r\n                        <mwc-checkbox id=\"checkbox3\" \r\n                        ?checked=${this.fldDefaultValue(fld.checkbox3)} ?disabled=${this.isFieldDisabled(fld.checkbox3)} \r\n                        @change=${e => { this.checkbox3.value=this.checkbox3.checked}}\r\n                        value=\"${fld.checkbox3.default_value}\"\r\n                    ></mwc-checkbox>\r\n                        </mwc-formfield>\r\n                    `}                              \r\n                    ${!fld.checkbox4 ?\r\n                    html``: html`        \r\n                        <mwc-formfield label=\"${this.fieldLabel(fld.checkbox4)}\" >\r\n                        <mwc-checkbox id=\"checkbox4\" \r\n                        ?checked=${this.fldDefaultValue(fld.checkbox4)} ?disabled=${this.isFieldDisabled(fld.checkbox4)} \r\n                        @change=${e => { this.checkbox4.value=this.checkbox4.checked}}\r\n                        value=\"${fld.checkbox4.default_value}\"\r\n                    ></mwc-checkbox>\r\n                        </mwc-formfield>\r\n                    `}                              \r\n                    ${!fld.checkbox5 ?\r\n                    html``: html`        \r\n                        <mwc-formfield label=\"${this.fieldLabel(fld.checkbox5)}\" >\r\n                        <mwc-checkbox id=\"checkbox5\" \r\n                        ?checked=${this.fldDefaultValue(fld.checkbox5)} ?disabled=${this.isFieldDisabled(fld.checkbox5)} \r\n                        @change=${e => { this.checkbox5.value=this.checkbox5.checked}}\r\n                        value=\"${fld.checkbox5.default_value}\"\r\n                    ></mwc-checkbox>\r\n                        </mwc-formfield>\r\n                    `}                              \r\n                    ${!fld.checkbox6 ?\r\n                    html``: html`        \r\n                        <mwc-formfield label=\"${this.fieldLabel(fld.checkbox6)}\" >\r\n                        <mwc-checkbox id=\"checkbox6\" \r\n                        ?checked=${this.fldDefaultValue(fld.checkbox6)} ?disabled=${this.isFieldDisabled(fld.checkbox6)} \r\n                        @change=${e => { this.checkbox6.value=this.checkbox6.checked}}\r\n                        value=\"${fld.checkbox6.default_value}\"\r\n                    ></mwc-checkbox>\r\n                        </mwc-formfield>\r\n                    `}                              \r\n                    ${!fld.checkbox7 ?\r\n                    html``: html`        \r\n                        <mwc-formfield label=\"${this.fieldLabel(fld.checkbox7)}\" >\r\n                        <mwc-checkbox id=\"checkbox7\" \r\n                        ?checked=${this.fldDefaultValue(fld.checkbox7)} ?disabled=${this.isFieldDisabled(fld.checkbox7)} \r\n                        @change=${e => { this.checkbox7.value=this.checkbox7.checked}}\r\n                        value=\"${fld.checkbox7.default_value}\"\r\n                    ></mwc-checkbox>\r\n                        </mwc-formfield>\r\n                    `}                              \r\n                    ${!fld.checkbox8 ?\r\n                    html``: html`        \r\n                        <mwc-formfield label=\"${this.fieldLabel(fld.checkbox8)}\" >\r\n                        <mwc-checkbox id=\"checkbox8\" \r\n                        ?checked=${this.fldDefaultValue(fld.checkbox8)} ?disabled=${this.isFieldDisabled(fld.checkbox8)} \r\n                        @change=${e => { this.checkbox8.value=this.checkbox8.checked}}\r\n                        value=\"${fld.checkbox8.default_value}\"\r\n                    ></mwc-checkbox>\r\n                        </mwc-formfield>\r\n                    `}                              \r\n                    ${!fld.checkbox9 ?\r\n                    html``: html`        \r\n                        <mwc-formfield label=\"${this.fieldLabel(fld.checkbox9)}\" >\r\n                        <mwc-checkbox id=\"checkbox9\" \r\n                        ?checked=${this.fldDefaultValue(fld.checkbox9)} ?disabled=${this.isFieldDisabled(fld.checkbox9)} \r\n                        @change=${e => { this.checkbox9.value=this.checkbox9.checked}}\r\n                        value=\"${fld.checkbox9.default_value}\"\r\n                    ></mwc-checkbox>\r\n                        </mwc-formfield>\r\n                    `}                              \r\n                    ${!fld.checkbox10 ?\r\n                    html``: html`        \r\n                        <mwc-formfield label=\"${this.fieldLabel(fld.checkbox10)}\" >\r\n                        <mwc-checkbox id=\"checkbox10\" \r\n                        ?checked=${this.fldDefaultValue(fld.checkbox10)} ?disabled=${this.isFieldDisabled(fld.checkbox10)} \r\n                        @change=${e => { this.checkbox10.value=this.checkbox10.checked}}\r\n                        value=\"${fld.checkbox10.default_value}\"\r\n                    ></mwc-checkbox>\r\n                        </mwc-formfield>\r\n                    `}                              \r\n\r\n                    ${!fld.date1 ?html``: html`<mwc-textfield id=\"date1\" label=\"${this.fieldLabel(fld.date1)}\" type=\"date\"></mwc-textfield>`}\r\n                    ${!fld.date2 ?html``: html`<mwc-textfield id=\"date2\" label=\"${this.fieldLabel(fld.date2)}\" type=\"date\"></mwc-textfield>`}\r\n                    ${!fld.date3 ?html``: html`<mwc-textfield id=\"date3\" label=\"${this.fieldLabel(fld.date3)}\" type=\"date\"></mwc-textfield>`}\r\n                    ${!fld.date4 ?html``: html`<mwc-textfield id=\"date4\" label=\"${this.fieldLabel(fld.date4)}\" type=\"date\"></mwc-textfield>`}\r\n                    ${!fld.date5 ?html``: html`<mwc-textfield id=\"date5\" label=\"${this.fieldLabel(fld.date5)}\" type=\"date\"></mwc-textfield>`}                           \r\n                    ${!fld.date6 ?html``: html`<mwc-textfield id=\"date6\" label=\"${this.fieldLabel(fld.date6)}\" type=\"date\"></mwc-textfield>`} \r\n                    ${!fld.date7 ?html``: html`<mwc-textfield id=\"date7\" label=\"${this.fieldLabel(fld.date7)}\" type=\"date\"></mwc-textfield>`}\r\n                    ${!fld.date8 ?html``: html`<mwc-textfield id=\"date8\" label=\"${this.fieldLabel(fld.date8)}\" type=\"date\"></mwc-textfield>`}\r\n                    ${!fld.date9 ?html``: html`<mwc-textfield id=\"date9\" label=\"${this.fieldLabel(fld.date9)}\" type=\"date\"></mwc-textfield>`}\r\n                    ${!fld.date10 ?html``: html`<mwc-textfield id=\"date10\" label=\"${this.fieldLabel(fld.date10)}\" type=\"date\"></mwc-textfield>`}\r\n\r\n                    ${!fld.datetime1 ?html``: html`<input id=\"datetime1\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n                    ${!fld.datetime2 ?html``: html`<input id=\"datetime2\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n                    ${!fld.datetime3 ?html``: html`<input id=\"datetime3\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n                    ${!fld.datetime4 ?html``: html`<input id=\"datetime4\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n                    ${!fld.datetime5 ?html``: html`<input id=\"datetime5\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n                    ${!fld.datetime6 ?html``: html`<input id=\"datetime6\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n                    ${!fld.datetime7 ?html``: html`<input id=\"datetime7\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n                    ${!fld.datetime8 ?html``: html`<input id=\"datetime8\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n                    ${!fld.datetime9 ?html``: html`<input id=\"datetime9\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n                    ${!fld.datetime10 ?html``: html`<input id=\"datetime10\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n\r\n                    \r\n                    ${!fld.daterange1 ?\r\n                    html``: html`    \r\n                        <div style=\"display:flex\">    \r\n                        <mwc-textfield id=\"daterange1dateStart\" label=\"${this.fieldLabel(fld.daterange1.dateStart)}\" type=\"date\"></mwc-textfield>\r\n                        <mwc-textfield id=\"daterange1dateEnd\" label=\"${this.fieldLabel(fld.daterange1.dateEnd)}\" type=\"date\"></mwc-textfield>\r\n                        </div>\r\n                    `}                       \r\n                    ${!fld.daterange2 ?\r\n                    html``: html`    \r\n                        <div style=\"display:flex\">    \r\n                        <mwc-textfield id=\"daterange2dateStart\" label=\"${this.fieldLabel(fld.daterange2.dateStart)}\" type=\"date\"></mwc-textfield>\r\n                        <mwc-textfield id=\"daterange2dateEnd\" label=\"${this.fieldLabel(fld.daterange2.dateEnd)}\" type=\"date\"></mwc-textfield>\r\n                        </div>\r\n                    `}                       \r\n                    ${!fld.daterange3 ?\r\n                    html``: html`    \r\n                        <div style=\"display:flex\">    \r\n                        <mwc-textfield id=\"daterange3dateStart\" label=\"${this.fieldLabel(fld.daterange3.dateStart)}\" type=\"date\"></mwc-textfield>\r\n                        <mwc-textfield id=\"daterange3dateEnd\" label=\"${this.fieldLabel(fld.daterange3.dateEnd)}\" type=\"date\"></mwc-textfield>\r\n                        </div>\r\n                    `}                       \r\n                    ${!fld.daterange4 ?\r\n                    html``: html`    \r\n                        <div style=\"display:flex\">    \r\n                        <mwc-textfield id=\"daterange4dateStart\" label=\"${this.fieldLabel(fld.daterange4.dateStart)}\" type=\"date\"></mwc-textfield>\r\n                        <mwc-textfield id=\"daterange4dateEnd\" label=\"${this.fieldLabel(fld.daterange4.dateEnd)}\" type=\"date\"></mwc-textfield>\r\n                        </div>\r\n                    `}                       \r\n                    ${!fld.daterange5 ?\r\n                    html``: html`    \r\n                        <div style=\"display:flex\">    \r\n                        <mwc-textfield id=\"daterange5dateStart\" label=\"${this.fieldLabel(fld.daterange5.dateStart)}\" type=\"date\"></mwc-textfield>\r\n                        <mwc-textfield id=\"daterange5dateEnd\" label=\"${this.fieldLabel(fld.daterange5.dateEnd)}\" type=\"date\"></mwc-textfield>\r\n                        </div>\r\n                `}                \r\n                ${!fld.twoListsLinked ?html``: html`                \r\n                    <two-lists-linked .procInstanceName=${this.procInstanceName} lang=${this.lang} .fld=${fld.twoListsLinked}></two-lists-linked>\r\n                `}      \r\n                ${!fld.list1 ?html``: html`       \r\n                <div class=\"layout horizontal flex center-center\"> \r\n                    <mwc-select id=\"list1\" label=\"${this.fieldLabel(fld.list1)}\" @selected=${(e)=>this.actionWhenListValueSelected(e, fld.list1, actionModel.dialogInfo)} ?disabled=${this.isFieldDisabled(fld.list1)} .definition=${fld.list1}\r\n                        style=\"width:100%;\">\r\n                        ${this.listEntries(fld.list1)}</mwc-select>`}  \r\n                </div>\r\n                ${!fld.list2 ?html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\"> \r\n                    <mwc-select style=\"width:100%;\" id=\"list2\" label=\"${this.fieldLabel(fld.list2)}\" @selected=${(e)=>this.actionWhenListValueSelected(e, fld.list2, actionModel.dialogInfo)} ?disabled=${this.isFieldDisabled(fld.list2)} .definition=${fld.list2}>\r\n                        ${this.listEntries(fld.list2)}</mwc-select>`}\r\n                </div>  \r\n                ${!fld.list3 ?html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\"> \r\n                    <mwc-select style=\"width:100%;\" id=\"list3\" label=\"${this.fieldLabel(fld.list3)}\" @selected=${(e)=>this.actionWhenListValueSelected(e, fld.list3, actionModel.dialogInfo)} @input=${this.fldDisabled} ?disabled=${this.isFieldDisabled(fld.list3)}>\r\n                        ${this.listEntries(fld.list3)}</mwc-select>`}\r\n                </div>  \r\n                ${!fld.list4 ?html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\"> \r\n                    <mwc-select style=\"width:100%;\" id=\"list4\" label=\"${this.fieldLabel(fld.list4)}\" @selected=${(e)=>this.actionWhenListValueSelected(e, fld.list4, actionModel.dialogInfo)}  @input=${this.fldDisabled} ?disabled=${this.isFieldDisabled(fld.list4)}>\r\n                        ${this.listEntries(fld.list4)}</mwc-select>`}\r\n                </div>  \r\n                ${!fld.list5 ?html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\"> \r\n                    <mwc-select style=\"width:100%;\" id=\"list5\" label=\"${this.fieldLabel(fld.list5)}\" @selected=${(e)=>this.actionWhenListValueSelected(e, fld.list5, actionModel.dialogInfo)}  @input=${this.fldDisabled} ?disabled=${this.isFieldDisabled(fld.list5)}>\r\n                        ${this.listEntries(fld.list5)}</mwc-select>`}\r\n                </div>  \r\n                ${!fld.list6 ?html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\"> \r\n                    <mwc-select style=\"width:100%;\" id=\"list6\" label=\"${this.fieldLabel(fld.list6)}\" @selected=${(e)=>this.actionWhenListValueSelected(e, fld.list6, actionModel.dialogInfo)} ?disabled=${this.isFieldDisabled(fld.list6)}>\r\n                        ${this.listEntries(fld.list6)}</mwc-select>`}\r\n                </div>  \r\n                ${!fld.list7 ?html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\"> \r\n                    <mwc-select style=\"width:100%;\" id=\"list7\" label=\"${this.fieldLabel(fld.list7)}\" @selected=${(e)=>this.actionWhenListValueSelected(e, fld.list7, actionModel.dialogInfo)} ?disabled=${this.isFieldDisabled(fld.list7)}>\r\n                        ${this.listEntries(fld.list7)}</mwc-select>`}\r\n                </div>  \r\n                ${!fld.list8 ?html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\"> \r\n                    <mwc-select style=\"width:100%;\" id=\"list8\" label=\"${this.fieldLabel(fld.list8)}\" @selected=${(e)=>this.actionWhenListValueSelected(e, fld.list8, actionModel.dialogInfo)} ?disabled=${this.isFieldDisabled(fld.list8)}>\r\n                        ${this.listEntries(fld.list8)}</mwc-select>`}\r\n                </div>  \r\n                ${!fld.list9 ?html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\"> \r\n                    <mwc-select style=\"width:100%;\" id=\"list9\" label=\"${this.fieldLabel(fld.list9)}\" @selected=${(e)=>this.actionWhenListValueSelected(e, fld.list9, actionModel.dialogInfo)} ?disabled=${this.isFieldDisabled(fld.list9)}>\r\n                        ${this.listEntries(fld.list9)}</mwc-select>`}\r\n                </div>  \r\n                ${!fld.list10 ?html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\"> \r\n                    <mwc-select style=\"width:100%;\" id=\"list10\" label=\"${this.fieldLabel(fld.list10)}\" @selected=${(e)=>this.actionWhenListValueSelected(e, fld.list10, actionModel.dialogInfo)} ?disabled=${this.isFieldDisabled(fld.list10)}>\r\n                        ${this.listEntries(fld.list10)}</mwc-select>`}\r\n                </div>  \r\n                ${!fld.multilist1 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\" style=\"margin-top: 4px;\">\r\n                      <multi-select style=\"width: 100%;\" id=\"multilist1\" .props=${fld.multilist1.properties!==undefined?fld.multilist1.properties:{}} .activeOptions=${fld.multilist1.defaultValue ? this.selectedItem[fld.multilist1.defaultValue] : {}} .options=${this.listEntries(fld.multilist1, true)}\r\n                      .label=\"${fld.multilist1[\"label_\" + this.lang]}\"> </multi-select> \r\n                    </div>\r\n                `}                   \r\n                ${!fld.multilist2 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\" style=\"margin-top: 4px;\">\r\n                      <multi-select style=\"width: 100%;\" id=\"multilist2\" .props=${fld.multilist2.properties!==undefined?fld.multilist2.properties:{}} .activeOptions=${fld.multilist2.defaultValue ? this.selectedItem[fld.multilist2.defaultValue] : {}} .options=${this.listEntries(fld.multilist2, true)}\r\n                      .label=\"${fld.multilist2[\"label_\" + this.lang]}\"> </multi-select> \r\n                    </div>\r\n                `}                   \r\n                ${!fld.multilist3 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\" style=\"margin-top: 4px;\">\r\n                      <multi-select style=\"width: 100%;\" id=\"multilist3\" .props=${fld.multilist3.properties!==undefined?fld.multilist3.properties:{}} .activeOptions=${fld.multilist3.defaultValue ? this.selectedItem[fld.multilist3.defaultValue] : {}} .options=${this.listEntries(fld.multilist3, true)}\r\n                      .label=\"${fld.multilist3[\"label_\" + this.lang]}\"> </multi-select> \r\n                    </div>\r\n                `}                   \r\n                ${!fld.multilist4 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\" style=\"margin-top: 4px;\">\r\n                      <multi-select style=\"width: 100%;\" id=\"multilist4\" .props=${fld.multilist4.properties!==undefined?fld.multilist4.properties:{}} .activeOptions=${fld.multilist4.defaultValue ? this.selectedItem[fld.multilist4.defaultValue] : {}} .options=${this.listEntries(fld.multilist4, true)}\r\n                      .label=\"${fld.multilist4[\"label_\" + this.lang]}\"> </multi-select> \r\n                    </div>\r\n                `}                   \r\n                ${!fld.multilist5 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\" style=\"margin-top: 4px;\">\r\n                      <multi-select style=\"width: 100%;\" id=\"multilist5\" .props=${fld.multilist5.properties!==undefined?fld.multilist5.properties:{}} .activeOptions=${fld.multilist5.defaultValue ? this.selectedItem[fld.multilist5.defaultValue] : {}} .options=${this.listEntries(fld.multilist5, true)}\r\n                      .label=\"${fld.multilist5[\"label_\" + this.lang]}\"> </multi-select> \r\n                    </div>\r\n                `}                   \r\n                ${!fld.multilist6 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\" style=\"margin-top: 4px;\">\r\n                      <multi-select style=\"width: 100%;\" id=\"multilist6\" .props=${fld.multilist6.properties!==undefined?fld.multilist6.properties:{}} .activeOptions=${fld.multilist6.defaultValue ? this.selectedItem[fld.multilist6.defaultValue] : {}} .options=${this.listEntries(fld.multilist6, true)}\r\n                      .label=\"${fld.multilist6[\"label_\" + this.lang]}\"> </multi-select> \r\n                    </div>\r\n                `}                   \r\n                ${!fld.multilist7 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\" style=\"margin-top: 4px;\">\r\n                      <multi-select style=\"width: 100%;\" id=\"multilist7\" .props=${fld.multilist7.properties!==undefined?fld.multilist7.properties:{}} .activeOptions=${fld.multilist7.defaultValue ? this.selectedItem[fld.multilist7.defaultValue] : {}} .options=${this.listEntries(fld.multilist7, true)}\r\n                      .label=\"${fld.multilist7[\"label_\" + this.lang]}\"> </multi-select> \r\n                    </div>\r\n                `}                   \r\n                ${!fld.multilist8 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\" style=\"margin-top: 4px;\">\r\n                      <multi-select style=\"width: 100%;\" id=\"multilist8\" .props=${fld.multilist8.properties!==undefined?fld.multilist8.properties:{}} .activeOptions=${fld.multilist8.defaultValue ? this.selectedItem[fld.multilist8.defaultValue] : {}} .options=${this.listEntries(fld.multilist8, true)}\r\n                      .label=\"${fld.multilist8[\"label_\" + this.lang]}\"> </multi-select> \r\n                    </div>\r\n                `}                   \r\n                ${!fld.multilist9 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\" style=\"margin-top: 4px;\">\r\n                      <multi-select style=\"width: 100%;\" id=\"multilist9\" .props=${fld.multilist9.properties!==undefined?fld.multilist9.properties:{}} .activeOptions=${fld.multilist9.defaultValue ? this.selectedItem[fld.multilist9.defaultValue] : {}} .options=${this.listEntries(fld.multilist9, true)}\r\n                      .label=\"${fld.multilist9[\"label_\" + this.lang]}\"> </multi-select> \r\n                    </div>\r\n                `}                   \r\n                ${!fld.multilist10 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\" style=\"margin-top: 4px;\">\r\n                      <multi-select style=\"width: 100%;\" id=\"multilist10\" .props=${fld.multilist10.properties!==undefined?fld.multilist10.properties:{}} .activeOptions=${fld.multilist10.defaultValue ? this.selectedItem[fld.multilist10.defaultValue] : {}} .options=${this.listEntries(fld.multilist10, true)}\r\n                      .label=\"${fld.multilist10[\"label_\" + this.lang]}\"> </multi-select> \r\n                    </div>\r\n                `}                   \r\n\r\n                ${!fld.list1SelectedRow ?html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\"> \r\n                    <mwc-select style=\"width:100%;\" id=\"list1SelectedRow\" label=\"${this.fieldLabel(fld.list1SelectedRow)}\">\r\n                        ${this.listEntriesForUom(fld.list1SelectedRow, 'list1SelectedRow')}</mwc-select>`}  \r\n                ${!fld.list2SelectedRow ?html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\"> \r\n                    <mwc-select style=\"width:100%;\" id=\"list2SelectedRow\" label=\"${this.fieldLabel(fld.list2SelectedRow)}\">\r\n                        ${this.listEntriesForUom(fld.list2SelectedRow, 'list2SelectedRow')}</mwc-select>`}  \r\n                ${!fld.list3SelectedRow ?html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\"> \r\n                    <mwc-select style=\"width:100%;\" id=\"list3SelectedRow\" label=\"${this.fieldLabel(fld.list3SelectedRow)}\">\r\n                        ${this.listEntriesForUom(fld.list3SelectedRow, 'list3SelectedRow')}</mwc-select>`}  \r\n                \r\n                ${!fld.listMDSamplerPersonalAreas ?\r\n                html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\"> \r\n                    <mwc-select style=\"width:100%;\" id=\"listMDSamplerPersonalAreas\" label=\"${this.selectedAction&&this.selectedAction.dialogInfo&&fld.listMDSamplerPersonalAreas&&fld.listMDSamplerPersonalAreas[\"label_\" + this.lang]}\">\r\n                    ${this.masterData.samplerPersonalAreas.map((c, i) =>\r\n                    html`<mwc-list-item value=\"${c.key}\" ?selected=${i == 0}>${c[\"label_\"+this.lang]}</mwc-list-item>`\r\n                    )}\r\n                    </mwc-select>\r\n                `}           \r\n                \r\n                ${!fld.dynamicElement1 ? nothing: this.addTheDynamicElement(fld.dynamicElement1)}\r\n\r\n                ${!fld.listMDprocedureUsers ?\r\n                    html``: html`        \r\n                        <mwc-select id=\"listMDprocedureUsers\" label=\"${this.selectedAction&&this.selectedAction.dialogInfo&&fld.listMDprocedureUsers&&fld.listMDprocedureUsers[\"label_\" + this.lang]}\">\r\n                        ${this.MDprocedureUsers.map((c, i) =>\r\n                        html`<mwc-list-item value=\"${c.user_name}\" ?selected=${i == 0}>${c.user_name}</mwc-list-item>`\r\n                        )}\r\n                        </mwc-select>\r\n                `}         \r\n                ${!fld.listMDvariablesSet ?\r\n                    html``: html`        \r\n                        <mwc-select id=\"listMDvariablesSet\" label=\"${this.selectedAction&&this.selectedAction.dialogInfo&&fld.listMDvariablesSet&&fld.listMDvariablesSet[\"label_\" + this.lang]}\">\r\n                        ${this.MDvariablesSet.map((c, i) =>\r\n                        html`<mwc-list-item value=\"${c.name}\" ?selected=${i == 0}>${c.name}(${c.variables_list})</mwc-list-item>`\r\n                        )}\r\n                        </mwc-select>\r\n                `}           \r\n                ${!fld.listMDvariables ?\r\n                    html``: html`        \r\n                        <mwc-select id=\"listMDvariables\" label=\"${this.selectedAction&&this.selectedAction.dialogInfo&&fld.listMDvariables&&fld.listMDvariables[\"label_\" + this.lang]}\">\r\n                        ${this.MDvariables.map((c, i) =>\r\n                        html`<mwc-list-item value=\"${c.name}\" ?selected=${i == 0}>${c.name}(${c.param_type})</mwc-list-item>`\r\n                        )}\r\n                        </mwc-select>\r\n                `}           \r\n            \r\n                ${!fld.listSelectedStudyIndividuals ?\r\n                    html``: html`        \r\n                        <mwc-select id=\"listSelectedStudyIndividuals\" label=\"${this.selectedAction&&this.selectedAction.dialogInfo&&fld.listSelectedStudyIndividuals&&fld.listSelectedStudyIndividuals[\"label_\" + this.lang]}\">\r\n                        ${this.selectedStudy.study_individual.map((l, i) =>\r\n                        html`<mwc-list-item value=\"${this.listItemValueToGet(fld.listSelectedStudyIndividuals, l)}\" ?selected=${i == 0}>${this.listItemValueToDisplay(fld.listSelectedStudyIndividuals, l)}</mwc-list-item>`\r\n                        )}\r\n                        </mwc-select>\r\n                `}    \r\n                ${!fld.listSelectedStudyIndividualSamples ?\r\n                    html``: html`        \r\n                        <mwc-select id=\"listSelectedStudyIndividualSamples\" label=\"${this.selectedAction&&this.selectedAction.dialogInfo&&fld.listSelectedStudyIndividualSamples&&fld.listSelectedStudyIndividualSamples[\"label_\" + this.lang]}\">\r\n                        ${this.selectedStudy.study_individual.map((l, i) =>\r\n                        html`<mwc-list-item value=\"${this.listItemValueToGet(fld.listSelectedStudyIndividualSamples, l)}\" ?selected=${i == 0}>${this.listItemValueToDisplay(fld.listSelectedStudyIndividualSamples, l)}</mwc-list-item>`\r\n                        )}\r\n                        </mwc-select>\r\n                `} \r\n                `            \r\n            )}\r\n            <div style=\"margin-top:30px;text-align:center\">\r\n                <sp-button size=\"xl\" variant=\"secondary\" slot=\"secondaryAction\" dialogAction=\"decline\" @click=${this.declineDialog}>\r\n                    ${commonLangConfig.cancelDialogButton[\"label_\" + this.lang]}</sp-button>\r\n                <sp-button size=\"xl\" slot=\"primaryAction\" dialogAction=\"accept\" @click=${this.acceptedGenericDialog}>\r\n                    ${commonLangConfig.confirmDialogButton[\"label_\" + this.lang]}</sp-button>\r\n            </div>\r\n        `}\r\n        `}\r\n        </tr-dialog>\r\n    `\r\n    }\r\n    addTheDynamicElement(fld){\r\n        if (fld.rule===undefined||this.selectedItems[0]===undefined){return}\r\n        let selObj=this.selectedItems[0]\r\n        let curValue=selObj[fld.rule.field]\r\n        if (curValue===undefined){return}\r\n        if (curValue.length===0){curValue=\"*NULL*\"}\r\n        let matchingEntry = fld.rule.logic.find(entry => entry.value === curValue);\r\n        \r\n        if (matchingEntry===undefined){            \r\n            if (curValue.length>0){curValue=\"*NOT_NULL*\"}\r\n            matchingEntry = fld.rule.logic.find(entry => entry.value === curValue);\r\n        }\r\n        if (matchingEntry===undefined){return}\r\n        \r\n        if (String(matchingEntry.element).toUpperCase()===\"TEXT\"){\r\n            return html`\r\n            <div class=\"layout horizontal flex center-center\">\r\n            <mwc-textfield class=\"layout flex\" id=\"dynamicElement1\" type=\"text\" .value=${fld.default_value ? fld.default_value : ''}  label=\"${this.fieldLabel(fld)}\"  ?disabled=${this.isFieldDisabled(fld)} \r\n                @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n            </div>\r\n            `\r\n        }\r\n        if (String(matchingEntry.element).toUpperCase()===\"LIST\"){\r\n            fld.items=[]\r\n            fld.items= JSON.parse(selObj[fld.rule.field])\r\n            return html`\r\n            <div class=\"layout horizontal flex center-center\">\r\n            <mwc-select id=\"dynamicElement1\" label=\"${this.fieldLabel(fld)}\" @selected=${()=>this.actionWhenListValueSelected(fld)} ?disab, actionModel.dialogInfoled=${this.isFieldDisabled(fld)}  >\r\n            ${this.listEntries(fld)}</mwc-select>\r\n            </div>\r\n            `\r\n        }\r\n        return html``         \r\n    }\r\n    get genericDialog() {return this.shadowRoot.querySelector(\"tr-dialog#genericDialog\")}\r\n    get dateDialog() {return this.shadowRoot.querySelector(\"tr-dialog#dateDialog\")}\r\n    get dateInput() {return this.shadowRoot.querySelector(\"input#dateInput\")}\r\n    setNewDate() {\r\n      if (this.dateInput.value) {\r\n        this.dialogAccept(false)\r\n      }\r\n    }\r\n    declineDialog(){\r\n        this.fieldsShouldBeReset=true\r\n    }\r\n    acceptedGenericDialog(e){\r\n        this.fieldsShouldBeReset=true\r\n        if (this.checkMandatoryFieldsNotEmpty()){\r\n            this.dialogAccept(false)\r\n        }else{\r\n            console.log('Accepted Generic Dialog but mandatories pending then action not performed')\r\n           // alert('mandatories pending')\r\n           e.stopPropagation();\r\n        }\r\n    }\r\n    checkMandatoryFieldsNotEmpty(){                \r\n        let dlgFlds=this.actionBeingPerformedModel.dialogInfo.fields\r\n        for (let i=0;i<dlgFlds[0].length;i++){            \r\n            let fldObj=dlgFlds[0][i]\r\n           // console.log('checkMandatoryFieldsNotEmpty', fldObj)\r\n            let keyName=Object.keys(fldObj)\r\n            let fldDef=fldObj[keyName[0]]\r\n            if ((fldDef.optional===undefined||\r\n                fldDef.optional===false)&&this[keyName].value.length==0){\r\n                alert('Field '+fldDef[\"label_\"+this.lang]+' is mandatory')\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n\r\n\r\n\r\n    gridActiveItemChanged(){\r\n        alert('Changed')\r\n\r\n        // <vaadin-grid id=\"mainGrid\" theme=\"row-dividers\" column-reordering-allowed multi-sort \r\n        // @active-item-changed=${this.gridActiveItemChanged} .items=${this.genericDialogGridItems} .selectedItems=\"${this.genericDialogGridSelectedItems}\"\r\n        // ${gridRowDetailsRenderer(this.detailRenderer)} ${this.setCellListener()}            \r\n        // ${this.gridList(actionModel.dialogInfo)}\r\n        // </vaadin-grid>\r\n    }\r\n\r\n    formDefaultValue(){\r\n        if (this.fieldsShouldBeReset) {\r\n            this.resetFields();\r\n            this.fieldsShouldBeReset = false;\r\n        }        \r\n        //alert('open defaultValue')\r\n        // if (this.actionBeingPerformedModel.dialogInfo.gridContent!==undefined&&this.actionBeingPerformedModel.dialogInfo.gridContent===true){\r\n        //     this.getGenericDialogGridItems(this.actionBeingPerformedModel.dialogInfo)\r\n        //     return \r\n        // }\r\n        // if (this.actionBeingPerformedModel.dialogInfo.filesListContent!==undefined&&this.actionBeingPerformedModel.dialogInfo.filesListContent===true){\r\n        //     this.getGenericDialogGridItems(this.actionBeingPerformedModel.dialogInfo)\r\n        //     return \r\n        // }\r\n       \r\n        //if (this.fieldsShouldBeReset===true){\r\n            //this.resetFields()\r\n            //this.fieldsShouldBeReset=false\r\n        //}\r\n        let dlgFlds=undefined\r\n        if (this.actionBeingPerformedModel!==undefined&&this.actionBeingPerformedModel.dialogInfo!==undefined&&this.actionBeingPerformedModel.dialogInfo.fields!==undefined){\r\n            this.actionBeingPerformedModel.dialogInfo.fields\r\n            dlgFlds=this.actionBeingPerformedModel.dialogInfo.fields\r\n        }\r\n        if (dlgFlds===undefined){\r\n            //alert('The dialog '+this.actionBeingPerformedModel.dialogInfo.name+' has no fields property for adding the fields, please review.')\r\n            return\r\n        }\r\n        for (let element of dlgFlds){\r\n            let fldObj=element\r\n            let keyName=Object.keys(fldObj)\r\n            \r\n            ////if (==null){        \r\n            // if (this[keyName]!==null&&this[keyName].defval!==undefined&&this[keyName].defval!==null){\r\n            //     alert(this[keyName].defval)\r\n            // }    \r\n            if (this[keyName]!==null&&fldObj[keyName]!==undefined&&fldObj[keyName].default_value!==undefined&&fldObj[keyName].default_value!==null){\r\n                this[keyName].value=fldObj[keyName].default_value\r\n            }\r\n            if (this[keyName]!==null&&fldObj[keyName]!==undefined&&fldObj[keyName].selObjectPropertyName!==undefined&&fldObj[keyName].selObjectPropertyName!==null&&this[keyName]!==null){\r\n                if (this.selectedItem[0]===undefined){return}\r\n                this[keyName].value=this.selectedItem[0][fldObj[keyName].selObjectPropertyName]\r\n            }            \r\n            if (this[keyName]!==null&&fldObj[keyName]!==undefined&&fldObj.selObjectPropertyName!==undefined&&fldObj[keyName].selObjectPropertyName!==null&&this[keyName]!==null){\r\n                if (this.selectedItem[0]===undefined){return}\r\n                this[keyName].value=this.selectedItem[0][fldObj.selObjectPropertyName]\r\n            }            \r\n            if (this[keyName]!==null&&fldObj[keyName]!==undefined&&fldObj[keyName].internalVariableObjName!==undefined&&fldObj[keyName].internalVariableObjName!==null&&                \r\n                fldObj[keyName].internalVariableObjProperty!==undefined&&fldObj[keyName].internalVariableObjProperty!==null){\r\n                if (this[fldObj[keyName].internalVariableObjName]===undefined||this[fldObj[keyName].internalVariableObjName][0]===undefined){return}                    \r\n                \r\n                if (Array.isArray(this[fldObj[keyName].internalVariableObjName])){\r\n                    this[keyName].value=this[fldObj[keyName].internalVariableObjName][0][fldObj[keyName].internalVariableObjProperty]\r\n                }else{\r\n                    this[keyName].value=this[fldObj[keyName].internalVariableObjName][fldObj[keyName].internalVariableObjProperty]\r\n                }\r\n            }    \r\n            if (this[keyName]!==null&&fldObj[keyName]!==undefined&&fldObj[keyName].internalVariableObjName!==undefined&&fldObj[keyName].internalVariableObjName!==null&&                \r\n                fldObj[keyName].getNextId!==undefined&&fldObj[keyName].getNextId!==null&&fldObj[keyName].getNextId===true){                \r\n                    //let varName=\r\n                    if (this[fldObj[keyName].internalVariableObjName]===undefined){\r\n                        this[keyName].value=1\r\n                    }else{\r\n                        this[keyName].value=this[fldObj[keyName].internalVariableObjName].length+1\r\n                    }\r\n            }               \r\n                \r\n        }\r\n    }    \r\n    resetFields(e){           \r\n        //alert('reset Fields now')   \r\n        let dlgFlds=undefined\r\n        if (this.actionBeingPerformedModel!==undefined&&this.actionBeingPerformedModel.dialogInfo!==undefined&&this.actionBeingPerformedModel.dialogInfo.fields!==undefined){\r\n            dlgFlds=this.actionBeingPerformedModel.dialogInfo.fields\r\n        }\r\n        if (dlgFlds===undefined){\r\n            //alert('The dialog '+this.actionBeingPerformedModel.dialogInfo.name+' has no fields property for adding the fields, please review.')\r\n            return\r\n        }\r\n        for (const element of dlgFlds){\r\n            let fldObj=element            \r\n            let keyName=Object.keys(fldObj)\r\n            if (this[keyName]!==null){\r\n               // console.log(keyName[0])\r\n                if (keyName[0].includes('list')&&!keyName[0].includes('multi')){\r\n                    if (!keyName[0].includes('SelectedRow')){\r\n                        this[keyName[0]].value=[]\r\n                    }\r\n                }else if (keyName[0].includes('multi')){\r\n                    fldObj.defaultValue ? this[keyName[0]].activeOptions=this.selectedItem[fldObj.defaultValue] : this[keyName[0]].activeOptions={}\r\n                    this[keyName[0]].setClosed()                    \r\n                }else{\r\n                    if (this[keyName]!==undefined&&this[keyName[0]]!==undefined){\r\n                        this[keyName[0]].value=\"\"\r\n                    }\r\n                }\r\n\r\n            }\r\n            //this.actionWhenOtherThanListValueChanged(e, element, this.actionBeingPerformedModel.dialogInfo, this.selectedItems[0]);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n     \r\n    get acceptancecriteria() {return this.shadowRoot.querySelector(\"speclimit-quantitative#acceptancecriteria\")    }        \r\n    get twoListsLinked() {    return this.shadowRoot.querySelector(\"two-lists-linked\")    }    \r\n\r\n    get twoListsLinked() {\r\n        return this.shadowRoot.querySelector(\"two-lists-linked\");\r\n      }\r\n    \r\n      get listLinked1() {\r\n        const twoListsLinkedComponent = this.twoListsLinked;\r\n        return twoListsLinkedComponent ? twoListsLinkedComponent.listLinked1 : null;\r\n      }\r\n    \r\n      get listLinked2() {\r\n        const twoListsLinkedComponent = this.twoListsLinked;\r\n        return twoListsLinkedComponent ? twoListsLinkedComponent.listLinked2 : null;\r\n      }\r\n    \r\n\r\n    get tree1() {    return this.shadowRoot.querySelector(\"tree-viewfran#tree1\")    }        \r\n    get text1() {    return this.shadowRoot.querySelector(\"mwc-textfield#text1\")    }        \r\n    get text2() {    return this.shadowRoot.querySelector(\"mwc-textfield#text2\")    }        \r\n    get text3() {    return this.shadowRoot.querySelector(\"mwc-textfield#text3\")    }        \r\n    get text4() {    return this.shadowRoot.querySelector(\"mwc-textfield#text4\")    }        \r\n    get text5() {    return this.shadowRoot.querySelector(\"mwc-textfield#text5\")    }        \r\n    get text6() {    return this.shadowRoot.querySelector(\"mwc-textfield#text6\")    }        \r\n    get text7() {    return this.shadowRoot.querySelector(\"mwc-textfield#text7\")    }        \r\n    get text8() {    return this.shadowRoot.querySelector(\"mwc-textfield#text8\")    }        \r\n    get text9() {    return this.shadowRoot.querySelector(\"mwc-textfield#text9\")    }        \r\n    get text10() {    return this.shadowRoot.querySelector(\"mwc-textfield#text10\")    } \r\n\r\n    get textarea1() {    return this.shadowRoot.querySelector(\"mwc-textarea#textarea1\")    } \r\n    \r\n    get checkbox1() {    return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox1\")    }        \r\n    get checkbox2() {    return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox2\")    }        \r\n    get checkbox3() {    return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox3\")    }        \r\n    get checkbox4() {    return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox4\")    }        \r\n    get checkbox5() {    return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox5\")    }        \r\n    get checkbox6() {    return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox6\")    }        \r\n    get checkbox7() {    return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox7\")    }        \r\n    get checkbox8() {    return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox8\")    }        \r\n    get checkbox9() {    return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox9\")    }        \r\n    get checkbox10() {    return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox10\")    }        \r\n    get date1() {    return this.shadowRoot.querySelector(\"mwc-textfield#date1\")    }        \r\n    get date2() {    return this.shadowRoot.querySelector(\"mwc-textfield#date2\")    }    \r\n    get date3() {    return this.shadowRoot.querySelector(\"mwc-textfield#date3\")    }        \r\n    get date4() {    return this.shadowRoot.querySelector(\"mwc-textfield#date4\")    }    \r\n    get date5() {    return this.shadowRoot.querySelector(\"mwc-textfield#date5\")    }        \r\n    get date6() {    return this.shadowRoot.querySelector(\"mwc-textfield#date6\")    }    \r\n    get date7() {    return this.shadowRoot.querySelector(\"mwc-textfield#date7\")    }        \r\n    get date8() {    return this.shadowRoot.querySelector(\"mwc-textfield#date8\")    }    \r\n    get date9() {    return this.shadowRoot.querySelector(\"mwc-textfield#date9\")    }        \r\n    get date10() {    return this.shadowRoot.querySelector(\"mwc-textfield#date10\")    }    \r\n    get datetime1() {    return this.shadowRoot.querySelector(\"input#datetime1\")    }        \r\n    get datetime2() {    return this.shadowRoot.querySelector(\"input#datetime2\")    }    \r\n    get datetime3() {    return this.shadowRoot.querySelector(\"input#datetime3\")    }        \r\n    get datetime4() {    return this.shadowRoot.querySelector(\"input#datetime4\")    }    \r\n    get datetime5() {    return this.shadowRoot.querySelector(\"input#datetime5\")    }        \r\n    get datetime6() {    return this.shadowRoot.querySelector(\"input#datetime6\")    }    \r\n    get datetime7() {    return this.shadowRoot.querySelector(\"input#datetime7\")    }        \r\n    get datetime8() {    return this.shadowRoot.querySelector(\"input#datetime8\")    }    \r\n    get datetime9() {    return this.shadowRoot.querySelector(\"input#datetime9\")    }        \r\n    get datetime10() {    return this.shadowRoot.querySelector(\"input#datetime10\")    }    \r\n\r\n    get daterange1dateStart() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange1dateStart\")    }        \r\n    get daterange1dateEnd() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange1dateEnd\")    }    \r\n    get daterange2dateStart() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange2dateStart\")    }        \r\n    get daterange2dateEnd() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange2dateEnd\")    }    \r\n    get daterange3dateStart() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange3dateStart\")    }        \r\n    get daterange3dateEnd() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange3dateEnd\")    }    \r\n    get daterange4dateStart() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange4dateStart\")    }        \r\n    get daterange4dateEnd() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange4dateEnd\")    }    \r\n    get daterange5dateStart() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange5dateStart\")    }        \r\n    get daterange5dateEnd() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange5dateEnd\")    }    \r\n        \r\n    \r\n    get number1() {    return this.shadowRoot.querySelector(\"mwc-textfield#number1\")    }    \r\n    get number2() {    return this.shadowRoot.querySelector(\"mwc-textfield#number2\")    }    \r\n    get number3() {    return this.shadowRoot.querySelector(\"mwc-textfield#number3\")    }    \r\n    get number4() {    return this.shadowRoot.querySelector(\"mwc-textfield#number4\")    }    \r\n    get number5() {    return this.shadowRoot.querySelector(\"mwc-textfield#number5\")    }    \r\n    get number6() {    return this.shadowRoot.querySelector(\"mwc-textfield#number6\")    }    \r\n    get number7() {    return this.shadowRoot.querySelector(\"mwc-textfield#number7\")    }    \r\n    get number8() {    return this.shadowRoot.querySelector(\"mwc-textfield#number8\")    }    \r\n    get number9() {    return this.shadowRoot.querySelector(\"mwc-textfield#number9\")    }    \r\n    get number10() {    return this.shadowRoot.querySelector(\"mwc-textfield#number10\")    }    \r\n  \r\n    get list1() {    return this.shadowRoot.querySelector(\"mwc-select#list1\")    }\r\n    get list2() {    return this.shadowRoot.querySelector(\"mwc-select#list2\")    }\r\n    get list3() {    return this.shadowRoot.querySelector(\"mwc-select#list3\")    }\r\n    get list4() {    return this.shadowRoot.querySelector(\"mwc-select#list4\")    }\r\n    get list5() {    return this.shadowRoot.querySelector(\"mwc-select#list5\")    }    \r\n    get list6() {    return this.shadowRoot.querySelector(\"mwc-select#list6\")    }    \r\n    get list7() {    return this.shadowRoot.querySelector(\"mwc-select#list7\")    }    \r\n    get list8() {    return this.shadowRoot.querySelector(\"mwc-select#list8\")    }    \r\n    get list9() {    return this.shadowRoot.querySelector(\"mwc-select#list9\")    }    \r\n    get list10() {    return this.shadowRoot.querySelector(\"mwc-select#list10\")    }  \r\n\r\n    get list1SelectedRow() {    return this.shadowRoot.querySelector(\"mwc-select#list1SelectedRow\")    }  \r\n    get list2SelectedRow() {    return this.shadowRoot.querySelector(\"mwc-select#list2SelectedRow\")    }  \r\n    get list3SelectedRow() {    return this.shadowRoot.querySelector(\"mwc-select#list3SelectedRow\")    }  \r\n\r\n    get listMDprocedureUsers() {return this.shadowRoot.querySelector(\"mwc-select#listMDprocedureUsers\")}\r\n    get listMDSamplerPersonalAreas() {return this.shadowRoot.querySelector(\"mwc-select#listMDSamplerPersonalAreas\")}\r\n    get listMDvariablesSet() {return this.shadowRoot.querySelector(\"mwc-select#listMDvariablesSet\")}\r\n    get listMDvariables() {return this.shadowRoot.querySelector(\"mwc-select#listMDvariables\")}\r\n    get listSelectedStudyIndividuals() {return this.shadowRoot.querySelector(\"mwc-select#listSelectedStudyIndividuals\")}\r\n    get listSelectedStudyIndividualSamples() {return this.shadowRoot.querySelector(\"mwc-select#listSelectedStudyIndividualSamples\")}\r\n\r\n    get multilist1() {    return this.shadowRoot.querySelector(\"multi-select#multilist1\")    }\r\n    get multilist2() {    return this.shadowRoot.querySelector(\"multi-select#multilist2\")    }\r\n    get multilist3() {    return this.shadowRoot.querySelector(\"multi-select#multilist3\")    }\r\n    get multilist4() {    return this.shadowRoot.querySelector(\"multi-select#multilist4\")    }\r\n    get multilist5() {    return this.shadowRoot.querySelector(\"multi-select#multilist5\")    }\r\n    get multilist6() {    return this.shadowRoot.querySelector(\"multi-select#multilist6\")    }\r\n    get multilist7() {    return this.shadowRoot.querySelector(\"multi-select#multilist7\")    }\r\n    get multilist8() {    return this.shadowRoot.querySelector(\"multi-select#multilist8\")    }\r\n    get multilist9() {    return this.shadowRoot.querySelector(\"multi-select#multilist9\")    }\r\n    get multilist10() {    return this.shadowRoot.querySelector(\"multi-select#multilist10\")    }\r\n\r\n    get dynamicElement1() {    return this.shadowRoot.querySelector(\"#dynamicElement1\")    } \r\n\r\n    setNumberMask(e, fieldDef) {\r\n      if (fieldDef.min_allowed!==undefined && typeof fieldDef.min_allowed == 'number' && e.target.value < fieldDef.min_allowed) {\r\n        e.target.value = fieldDef.min_allowed\r\n        this[e.currentTarget.id].value=fieldDef.min_allowed\r\n        return\r\n      }\r\n      if (fieldDef.max_allowed!==undefined && typeof fieldDef.max_allowed == 'number' && e.target.value > fieldDef.max_allowed) {\r\n        e.target.value = fieldDef.max_allowed\r\n        this[e.currentTarget.id].value=fieldDef.max_allowed\r\n        return\r\n      }\r\n      // make sure the decimal length <= max_dp when manual input\r\n      if (fieldDef.max_dp!==undefined) {\r\n        let v = e.target.value.split(\".\")\r\n        if (v.length > 1 && v[1].length > fieldDef.max_dp) {\r\n          v[1] = v[1].substring(0, fieldDef.max_dp)\r\n          e.target.value = Number(v.join(\".\"))\r\n          this[e.currentTarget.id].value=Number(v.join(\".\"))\r\n        }\r\n      }\r\n    }        \r\n\r\n    async fldDefaultValue(fldDef){\r\n        if (fldDef===undefined){return ''}\r\n        let curArgName=\"\"\r\n        //console.log('fldDefaultValue', fldDef)\r\n        if (fldDef.default_value){\r\n            return fldDef.default_value\r\n        } else if (fldDef.getNextId!==undefined&&fldDef.getNextId===true&&fldDef.internalVariableObjName!==undefined){\r\n            console.log(this[fldDef.internalVariableObjName].length+1)\r\n            return this[fldDef.internalVariableObjName].length+1\r\n        } else if (fldDef.internalVariableSimpleObjName&&fldDef.internalVariableSimpleObjProperty) {          \r\n            if (this[fldDef.internalVariableSimpleObjName]===undefined||this[fldDef.internalVariableSimpleObjName][fldDef.internalVariableSimpleObjProperty]===undefined){\r\n              let msg=\"\"\r\n              if (this[fldDef.internalVariableSimpleObjName][fldDef.internalVariableSimpleObjProperty]===undefined){\r\n                msg='The object '+fldDef.internalVariableSimpleObjName+' has no one property called '+fldDef.internalVariableSimpleObjProperty\r\n                alert(msg)\r\n              }else{\r\n                msg='there is no object called '+fldDef.internalVariableSimpleObjName+' in this view'\r\n                alert(msg)\r\n              }\r\n              return \"ERROR: \"+msg\r\n            }  \r\n            return this[fldDef.internalVariableSimpleObjName][fldDef.internalVariableSimpleObjProperty]          \r\n        } else if (fldDef.internalVariableObjName&&fldDef.internalVariableObjProperty) {          \r\n            if (this[fldDef.internalVariableObjName]===undefined||this[fldDef.internalVariableObjName][0][fldDef.internalVariableObjProperty]===undefined){\r\n            let msg=\"\"\r\n            if (this[fldDef.internalVariableObjName][0][fldDef.internalVariableObjProperty]===undefined){\r\n                msg='The object '+fldDef.internalVariableObjName+' has no one property called '+fldDef.internalVariableObjProperty\r\n                alert(msg)\r\n                //console.log(msg, this[fldDef.internalVariableObjName][0])\r\n            }else{\r\n                msg='there is no object called '+fldDef.internalVariableObjName+' in this view'\r\n                alert(msg)\r\n            }\r\n        //    alert('No family selected')\r\n            return \"ERROR: \"+msg\r\n            }  \r\n            return this[fldDef.internalVariableObjName][0][fldDef.internalVariableObjProperty]\r\n        \r\n        } else if (fldDef.element) {\r\n        \r\n        } else if (fldDef.defaultValue) {\r\n        if (fldDef.isAdhocField!==undefined&&fldDef.isAdhocField===true){\r\n            curArgName=jsonParam[fldDef.argumentName]\r\n            if (curArgName===undefined){curArgName=''}\r\n            if (curArgName.length>0){curArgName=curArgName+\"|\"}\r\n            curArgName=curArgName+fldDef.defaultValue\r\n            if (fldDef.fieldType!==undefined){\r\n            curArgName=curArgName+\"*\"+fldDef.fieldType\r\n            }\r\n            return curArgName\r\n        }else{\r\n            return fldDef.defaultValue // get value from default value (i.e incubator)\r\n        }\r\n        } else if (fldDef.selObjectPropertyName) {\r\n            return this.selectedItem[fldDef.selObjectPropertyName] // get value from selected item\r\n        } else if (fldDef.targetValue) {\r\n            return targetValue[fldDef.argumentName] // get value from target element passed\r\n        } else if (fldDef.fixValue) {\r\n            return fldDef.fixValue\r\n        } else if (fldDef.contextVariableName) {\r\n            return this[fldDef.contextVariableName]\r\n        } else {\r\n            return \"\"\r\n        }\r\n    }    \r\n  }\r\n}","import { html } from 'lit';\r\nimport { commonLangConfig } from '@trazit/common-core';\r\nimport '@material/mwc-list/mwc-list-item';\r\nimport '@material/mwc-select';\r\nimport '@material/mwc-checkbox';\r\nimport '@material/mwc-formfield';\r\nimport {DialogsFunctions} from './DialogsFunctions';\r\nimport { ActionsFunctions } from '../Actions/ActionsFunctions';\r\n\r\nexport function TrazitInvestigationsDialog(base) {\r\nreturn class extends ActionsFunctions(DialogsFunctions(base)) {\r\n    static get properties() {\r\n        return {\r\n          selectedInvestigations:{ type: Array},\r\n          openInvests:{ type: Array},\r\n          capaRequired: {type: Boolean},\r\n          targetValue: {type: Object}\r\n        }\r\n    }\r\n    constructor() {\r\n        super()\r\n        this.selectedInvestigations=[]\r\n        this.openInvests=[]\r\n        this.capaRequired=false\r\n        this.targetValue={}\r\n    }\r\n    openGenericDialog(actionModel = this.actionBeingPerformedModel){\r\n      if (actionModel.dialogInfo===undefined||actionModel.dialogInfo.name===undefined||actionModel.dialogInfo.name.toString().toUpperCase()!==\"GENERICDIALOG\"){\r\n          return false\r\n      }    \r\n\r\n//        if (!actionModel||!actionModel.dialogInfo||!actionModel.dialogInfo.fields){\r\n//        //alert(false)\r\n//        return false\r\n//       } \r\n     // alert(true)\r\n     this.formDefaultValue()\r\n     //this.resetFields()\r\n     return true \r\n  }\r\n    investigationTemplate() {\r\n      //console.log('viewModelFromProcModel', this.viewModelFromProcModel, 'this.openInvests', this.openInvests)\r\n      //?open=${this.openInvests.length}        \r\n      if (this.viewModelFromProcModel===undefined||this.viewModelFromProcModel.langConfig===undefined\r\n        ||this.viewModelFromProcModel.langConfig.gridHeader===undefined||this.viewModelFromProcModel.langConfig.gridHeader.created_on===undefined\r\n        ||this.viewModelFromProcModel.filter!==\"pending\"){\r\n          \r\n          return html``\r\n        }\r\n      return html`\r\n      <tr-dialog id=\"investigationDialog\" \r\n        @closed=${e => { if (e.target === this.investigationDialog) { this.openInvests = []; this.grid.activeItem = null } }}\r\n        heading=\"\"\r\n        hideActions=\"\"\r\n        scrimClickAction=\"\">\r\n        <div class=\"layout vertical flex center-justified\" style=\"width:450px;\">\r\n          <div style=\"height:55vh;overflow:auto\">\r\n            <vaadin-grid .items=${this.openInvests} id=\"investigationGrid\" theme=\"row-dividers\" column-reordering-allowed multi-sort \r\n              @active-item-changed=${e => this.selectedInvestigations = e.detail.value ? [e.detail.value] : []}\r\n              .selectedItems=\"${this.selectedInvestigations}\" all-rows-visible>\r\n              <vaadin-grid-sort-column width=\"40%\" resizable text-align=\"center\" path=\"id\" header=\"Id\"></vaadin-grid-sort-column>\r\n              <vaadin-grid-filter-column width=\"60%\" resizable text-align=\"center\" path=\"created_on\" .header=\"${this.viewModelFromProcModel.langConfig.gridHeader.created_on[\"label_\" + this.lang]}\"></vaadin-grid-filter-column>\r\n            </vaadin-grid>\r\n          </div>\r\n          <div style=\"margin-top:10px;text-align:center\">\r\n            <sp-button size=\"xl\" variant=\"secondary\" slot=\"secondaryAction\" dialogAction=\"decline\">\r\n              ${commonLangConfig.cancelDialogButton[\"label_\" + this.lang]}</sp-button>\r\n            <sp-button size=\"xl\" slot=\"primaryAction\" dialogAction=\"accept\" \r\n              @click=${this.addInvestigationAction}\r\n              ?disabled=${!this.selectedInvestigations.length}>\r\n              ${commonLangConfig.confirmDialogButton[\"label_\" + this.lang]}</sp-button>\r\n          </div>\r\n        </div>\r\n      </tr-dialog>\r\n      `\r\n    }\r\n    decisionTemplate() {\r\n      if (this.viewModelFromProcModel===undefined||this.viewModelFromProcModel.langConfig===undefined||this.viewModelFromProcModel.langConfig.fieldText===undefined\r\n        ||this.viewModelFromProcModel.filter!==\"open\"\r\n        ){return html``}\r\n      \r\n      return html`\r\n      <tr-dialog id=\"decisionDialog\" \r\n        @opened=${() => this.capaRequired = this.capaCheck.checked}\r\n        @closed=${e => { if (e.target === this.decisionDialog) this.grid.activeItem = null }}\r\n        heading=\"\"\r\n        hideActions=\"\"\r\n        scrimClickAction=\"\">\r\n        <div class=\"layout vertical flex center-justified\">\r\n          <mwc-textfield id=\"systemName\" label=\"${this.viewModelFromProcModel.langConfig.fieldText.systemName[\"label_\" + this.lang]}\" \r\n            .value=${this.selectedItems.length && this.selectedItems[0].capa_external_system_name}\r\n            dialogInitialFocus></mwc-textfield>\r\n          <mwc-textfield id=\"systemId\" label=\"${this.viewModelFromProcModel.langConfig.fieldText.systemId[\"label_\" + this.lang]}\"\r\n            .value=${this.selectedItems.length && this.selectedItems[0].capa_external_system_id}></mwc-textfield>\r\n          <mwc-formfield label=\"${this.viewModelFromProcModel.langConfig.fieldText.capa[\"label_\" + this.lang]}\">\r\n            <mwc-checkbox id=\"capaCheck\" \r\n              ?checked=${this.selectedItems.length && this.selectedItems[0].capa_required}\r\n              @change=${e => {                \r\n                this.capaRequired = e.target.checked;\r\n                this.capaId.value = \"\";\r\n                this.capaName.value = \"\";\r\n            }}></mwc-checkbox>\r\n          </mwc-formfield>\r\n          <mwc-textfield id=\"capaName\" label=\"${this.viewModelFromProcModel.langConfig.fieldText.capaName[\"label_\" + this.lang]}\"\r\n            .value=${this.selectedItems.length && this.selectedItems[0].external_system_name}\r\n            ?hidden=${!this.capaRequired}></mwc-textfield>\r\n          <mwc-textfield id=\"capaId\" label=\"${this.viewModelFromProcModel.langConfig.fieldText.capaId[\"label_\" + this.lang]}\"\r\n            .value=${this.selectedItems.length && this.selectedItems[0].external_system_id}\r\n            ?hidden=${!this.capaRequired}></mwc-textfield>\r\n          <div style=\"margin-top:30px;text-align:center\">\r\n            <sp-button size=\"xl\" variant=\"secondary\" slot=\"secondaryAction\" dialogAction=\"decline\">\r\n              ${commonLangConfig.cancelDialogButton[\"label_\" + this.lang]}</sp-button>\r\n            <sp-button size=\"xl\" slot=\"primaryAction\"\r\n              @click=${this.setDecision}>\r\n              ${commonLangConfig.confirmDialogButton[\"label_\" + this.lang]}</sp-button>\r\n          </div>\r\n        </div>\r\n      </tr-dialog>\r\n      `\r\n    }\r\n    get investigationDialog() {return this.shadowRoot.querySelector(\"tr-dialog#investigationDialog\")}\r\n    get decisionDialog() {return this.shadowRoot.querySelector(\"tr-dialog#decisionDialog\")}\r\n    get systemName() {return this.shadowRoot.querySelector(\"mwc-textfield#systemName\")}\r\n    get systemId() {return this.shadowRoot.querySelector(\"mwc-textfield#systemId\")}\r\n    get capaCheck() {return this.shadowRoot.querySelector(\"mwc-checkbox#capaCheck\")}\r\n    get capaName() {return this.shadowRoot.querySelector(\"mwc-textfield#capaName\")}\r\n    get capaId() {return this.shadowRoot.querySelector(\"mwc-textfield#capaId\")}\r\n\r\n    setDecision() {\r\n      let required = []\r\n      if (!this.systemName.value) {\r\n        required.push(\"System Name\")\r\n      }\r\n      if (!this.systemId.value) {\r\n        required.push(\"System Id\")\r\n      }\r\n      if (this.capaCheck.checked) {\r\n        if (!this.capaName.value) {\r\n          required.push(\"CAPA Name\")\r\n        }\r\n        if (!this.capaId.value) {\r\n          required.push(\"CAPA Id\")\r\n        }\r\n      }\r\n      if (required.length) {\r\n        this.dispatchEvent(new CustomEvent(\"error\", {\r\n          detail: {\r\n            is_error: true,\r\n            message_en: \"Please fill the required fields: \" + required.join(\", \"),\r\n            message_es: \"Por favor, rellene los campos obligatorios: \" + required.join(\", \")\r\n          },\r\n          bubbles: true,\r\n          composed: true\r\n        }))\r\n        console.log(\"Please fill the required fields: \" + required.join(\", \"))\r\n        return\r\n      }\r\n\r\n      let targetValue = {\r\n        \"capaFieldValue\": \"Trackwise\" + this.systemName.value + \"*String|\" + this.systemId.value + \"*String|\" + this.capaName.value + \"*String|\" + this.capaId.value + \"*String\",\r\n        \"capaRequired\": this.capaRequired\r\n      }\r\n      this.trazitNoDialogRequired(this.actionBeingPerformedModel, \r\n        this.selectedItems[0], targetValue, false, this.selectedItems[0], null, null, null)\r\n      //this.performActionRequestHavingDialogOrNot(this.actionBeingPerformedModel, \r\n      //  this.selectedItems[0], targetValue)\r\n    }\r\n    addInvestigationAction() {\r\n      let targetValue = {\r\n        \"investigationId\": this.selectedInvestigations[0].id,        \r\n      }\r\n      if (this.selectedItems[0].result_id!==undefined){\r\n        targetValue.objectsToAdd= \"sample_analysis_result*\" + this.selectedItems[0].result_id\r\n      }\r\n      this.trazitNoDialogRequired(this.actionBeingPerformedModel, \r\n        this.selectedItems[0], targetValue, false, this.selectedItems[0], null, null, null)\r\n//      this.performActionRequestHavingDialogOrNot(this.actionBeingPerformedModel.dialogInfo.action[0], this.selectedItems[0], targetValue, undefined, this.selectedInvestigations[0])\r\n    }\r\n    newInvestigationAction() {\r\n//      console.log('newInvestigationAction')\r\n      if (this.selectedItems[0].result_id!==undefined){\r\n        this.reqParams.fieldValue = \"Investigation for \" + this.selectedItems[0].result_id + \"*String\"\r\n        this.reqParams.objectsToAdd= \"sample_analysis_result*\" + this.selectedItems[0].result_id\r\n      }\r\n      let APIParams=this.getAPICommonParams(this.actionBeingPerformedModel)    \r\n      let endPointUrl=this.getActionAPIUrl(this.actionBeingPerformedModel)\r\n      if (String(endPointUrl).toUpperCase().includes(\"ERROR\")){\r\n          alert(endPointUrl)\r\n          return\r\n      }\r\n      let serviceAPIurl=this.getServiceAPIUrl(this.actionBeingPerformedModel)  \r\n      let params = serviceAPIurl + endPointUrl   \r\n        + '?' + new URLSearchParams(this.reqParams) + '&'+ new URLSearchParams(APIParams)\r\n      this.fetchApi(params).then(() => {\r\n        this.reload()\r\n      })\r\n    }\r\n\r\n    getOpenInvestigations() {\r\n      alert('getOpenInvestigations')\r\n      //this.actionBeingPerformedModel.dialogInfo.viewQuery  \r\n      let APIParams=this.getAPICommonParams(this.actionBeingPerformedModel)    \r\n      let endPointUrl=this.getQueryAPIUrl(this.actionBeingPerformedModel)\r\n      if (String(endPointUrl).toUpperCase().includes(\"ERROR\")){\r\n          alert(endPointUrl)\r\n          return\r\n      }\r\n      let serviceAPIurl=this.getServiceAPIUrl(this.actionBeingPerformedModel)  \r\n      let params = serviceAPIurl + endPointUrl        \r\n        + '?' + new URLSearchParams(APIParams) //+ '&'+ new URLSearchParams(extraParams)\r\nconsole.log('getOpenInvestigations', 'params', params)        \r\n      this.fetchApi(params).then(j => {\r\n        if (j && !j.is_error) {\r\n          this.openInvests = j\r\n          this.requestUpdate()\r\n        }\r\n      })\r\n    }\r\n\r\n    addInvestObjects() {\r\n      let serviceAPIurl=this.getServiceAPIUrl(this.actionBeingPerformedModel)  \r\n      let params = serviceAPIurl + this.selectedDialogAction.endPoint\r\n        + '?' + new URLSearchParams(this.reqParams)\r\n      this.fetchApi(params).then(() => {\r\n        this.investigationDialog.close()\r\n        this.resetDialogThings()\r\n        this.reload()\r\n      })\r\n    }\r\n\r\n    capaDecisionAction() {\r\n      let APIParams=this.getAPICommonParams(this.actionBeingPerformedModel)    \r\n      let endPointUrl=this.getActionAPIUrl(this.actionBeingPerformedModel)\r\n      if (String(endPointUrl).toUpperCase().includes(\"ERROR\")){\r\n          alert(endPointUrl)\r\n          return\r\n      }\r\n      let serviceAPIurl=this.getServiceAPIUrl(this.actionBeingPerformedModel)  \r\n//      console.log('capaDecisionAction', 'reqParams', this.reqParams)\r\n      let params = serviceAPIurl + endPointUrl   \r\n        + '?' + new URLSearchParams(this.reqParams) + '&'+ new URLSearchParams(APIParams)\r\n      this.fetchApi(params).then(() => {\r\n        this.decisionDialog.close()\r\n        this.resetDialogThings()\r\n        this.reload()\r\n      })\r\n    }\r\n\r\n    closeInvestigation() {\r\n      let reqParams={}\r\n      reqParams.investigationId = this.selectedItems[0].id\r\n      let APIParams=this.getAPICommonParams(this.actionBeingPerformedModel)    \r\n      let endPointUrl=this.getActionAPIUrl(this.actionBeingPerformedModel)\r\n      if (String(endPointUrl).toUpperCase().includes(\"ERROR\")){\r\n          alert(endPointUrl)\r\n          return\r\n      }\r\n      if (!this.selectedItems[0].capa_decision_on) {\r\n        this.dispatchEvent(new CustomEvent(\"error\", {\r\n          detail: {\r\n            is_error: true,\r\n            message_en: \"Required set decision before close\",\r\n            message_es: \"Decisión de conjunto requerida antes del cierre\"\r\n          },\r\n          bubbles: true,\r\n          composed: true\r\n        }))\r\n        console.log(\"Required set decision before close\")\r\n        return\r\n      }\r\n      let serviceAPIurl=this.getServiceAPIUrl(this.actionBeingPerformedModel)  \r\n      let params = serviceAPIurl + endPointUrl\r\n        + '?' + new URLSearchParams(reqParams)+ '&'+ new URLSearchParams(APIParams)\r\n      this.fetchApi(params).then(() => {\r\n        this.reload()\r\n      })\r\n    }\r\n\r\n\r\n}}","import { html, nothing } from 'lit';\r\nimport { commonLangConfig } from '@trazit/common-core';\r\nimport '@material/mwc-list/mwc-list-item';\r\nimport '@material/mwc-select';\r\nimport '@material/mwc-checkbox';\r\nimport '@material/mwc-formfield';\r\nimport { ActionsFunctions } from '../Actions/ActionsFunctions';\r\nexport function TrazitReactivateObjectsDialog(base) {\r\nreturn class extends ActionsFunctions(base) {\r\n    static get properties() {\r\n        return {\r\n            numDays: { type: Number },\r\n            deactivatedObjects: { type: Array },\r\n            selectedObjectToReactive: {type: Object}\r\n        }\r\n    }\r\n    constructor() {\r\n        super()\r\n        this.numDays = 7\r\n        this.deactivatedObjects = []\r\n        this.selectedObjectToReactive = {}\r\n    }\r\n  \r\n    noNegativeValues(e) {\r\n      if (e.target.value <=0){\r\n        this.numDays=0\r\n        e.target.value=0\r\n      }\r\n      return\r\n    }    \r\n\r\n    reactivateObjectsDialog() {\r\n        return html` \r\n        <tr-dialog id=\"reactivateObjectDialog\" ?open=${this.actionBeingPerformedModel&&this.actionBeingPerformedModel.dialogInfo&&this.actionBeingPerformedModel.dialogInfo.name==='reactivateObjectDialog'} heading=\"\" hideActions=\"\" @open=\"${this.cleanReactivateObjectList}\" scrimClickAction=\"\">\r\n        ${this.actionBeingPerformedModel===undefined||this.actionBeingPerformedModel.dialogInfo===undefined||this.actionBeingPerformedModel.dialogInfo.name!==\"reactivateObjectDialog\" ? nothing :\r\n        html`\r\n        <style>\r\n        mwc-select {        \r\n          --mdc-theme-primary : rgba(36, 192, 235, 1);\r\n          --mdc-theme-text-primary-on-background : rgba(49, 130, 189, 1);\r\n          --mdc-select-ink-color: rgb(47, 47, 47);\r\n          --mdc-select-dropdown-icon-color:rgba(36, 192, 235, 1);\r\n          --mdc-select-hover-line-color:rgba(36, 192, 235, 1);\r\n          --mdc-notched-outline-border-color: rgba(186, 235, 248, 0.4);\r\n          --mdc-select-disabled-dropdown-icon-color:rgba(36, 192, 235, 1);\r\n  \r\n          font-family : Montserrat;\r\n          font-weight : bold;\r\n          font-size : 19px;\r\n        }\r\n        mwc-select.outlined {        \r\n          --mdc-theme-primary : rgba(36, 192, 235, 1);\r\n          --mdc-theme-text-primary-on-background : rgba(49, 130, 189, 1);\r\n          --mdc-select-ink-color: rgba(36, 192, 235, 1);\r\n          font-family : Montserrat;\r\n          font-weight : bold;\r\n          font-size : 19px;\r\n          background-color: 4fcad029;\r\n        }       \r\n        div.reactivate{\r\n          min-width:490px;\r\n        }\r\n  \r\n        </style>\r\n        <div class=\"layout vertical flex center-justified reactivate\">        \r\n                <div class=\"layout vertical flex\">\r\n                  <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"queryNumDays\" type=\"number\" \r\n                      .value=${this.numDays} @change=${e => this.numDays = e.target.value}\r\n                      @input=${e=>this.noNegativeValues(e)}\r\n                      label=\"${this.actionBeingPerformedModel.dialogInfo.fieldsObject.queryNumDays[\"label_\" + this.lang]}\"\r\n                      @keypress=${e => e.keyCode == 13 && this.setDays()}></mwc-textfield>\r\n                    <mwc-icon-button icon=\"refresh\" @click=${this.setDays}></mwc-icon-button>\r\n                  </div>\r\n                  <mwc-select id=\"objectToReactivateName\" label=\"${this.actionBeingPerformedModel.dialogInfo.fieldsObject.objectName[\"label_\" + this.lang]}\" \r\n                    ?disabled=${!this.deactivatedObjects.length}>\r\n                    ${!this.deactivatedObjects.length ? nothing : html`\r\n                    ${this.deactivatedObjects.map((l, i) =>\r\n                    html`<mwc-list-item value=\"${this.listItemValueToGet(l)}\" ?selected=${i == 0}>${this.listItemValueToDisplay(l)}</mwc-list-item>`\r\n                    )}\r\n                    `}\r\n                  </mwc-select>\r\n                </div>     \r\n          <div style=\"margin-top:30px;text-align:center\">\r\n            <sp-button size=\"xl\" variant=\"secondary\" slot=\"secondaryAction\" dialogAction=\"decline\" @click=\"${this.cleanReactivateObjectList}\">\r\n              ${commonLangConfig.cancelDialogButton[\"label_\" + this.lang]}</sp-button>\r\n            <sp-button size=\"xl\" slot=\"primaryAction\" dialogAction=\"accept\" @click=${this.reactivateObjectDialogAction}>\r\n              ${commonLangConfig.confirmDialogButton[\"label_\" + this.lang]}</sp-button>\r\n          </div>\r\n        </div>\r\n        </tr-dialog>      \r\n        `}\r\n        `\r\n    } \r\n    cleanReactivateObjectList(){\r\n        this.deactivatedObjects= []\r\n        this.selectedObjectToReactive={}\r\n    }    \r\n    setDays() {\r\n        this.selectedDialogAction = this.actionBeingPerformedModel.dialogInfo.viewQuery\r\n        this.GetAlternativeViewData(this.selectedDialogAction, false)\r\n    }  \r\n    listItemValueToGet(entry){\r\n        if (this.actionBeingPerformedModel.dialogInfo===undefined||this.actionBeingPerformedModel.dialogInfo.listDefinition===undefined||this.actionBeingPerformedModel.dialogInfo.listDefinition.keyFldName===undefined){\r\n          alert('This selected action has no the requirements, requieres dialogInfo.listDefinition.keyFldName property, check the console')\r\n          return entry[\"name\"]\r\n        }\r\n        this.selectedObjectToReactive=entry\r\n        return entry[this.actionBeingPerformedModel.dialogInfo.listDefinition.keyFldName]\r\n    }\r\n    listItemValueToDisplay(entry){\r\n        if (this.actionBeingPerformedModel.dialogInfo===undefined||this.actionBeingPerformedModel.dialogInfo.listDefinition===undefined||this.actionBeingPerformedModel.dialogInfo.listDefinition.eachEntryTextGenerator===undefined){\r\n            alert('This selected action has no the requirements, requieres dialogInfo.listDefinition.eachEntryTextGenerator property, check the console')\r\n            return entry[\"name\"]\r\n        }\r\n        let lFlds=this.actionBeingPerformedModel.dialogInfo.listDefinition.eachEntryTextGenerator\r\n        let textToDisplay=''\r\n        for (let i = 0; i < lFlds.length; i++) {\r\n            if (lFlds[i].type=='fix'){textToDisplay=textToDisplay+lFlds[i].value}\r\n            if (lFlds[i].type=='field'){textToDisplay=textToDisplay+entry[lFlds[i].value]}\r\n        }\r\n        return textToDisplay\r\n    }\r\n    reactivateObjectDialogAction() {\r\n      this.trazitNoDialogRequired(this.actionBeingPerformedModel, this.selectedObjectToReactive, null, false, this.selectedObjectToReactive, null, null, null)\r\n      this.cleanReactivateObjectList()\r\n      return\r\n    } \r\n    async getDeactivatedObjects() {\r\n        // console.log('getDeactivatedObjects')\r\n        let queryDefinition=this.actionBeingPerformedModel.dialogInfo.viewQuery\r\n        this.deactivatedObjects = []\r\n        let APIParams=this.getAPICommonParams(queryDefinition)\r\n        let viewParams=this.jsonParam(queryDefinition)\r\n        let endPointUrl=this.getQueryAPIUrl(queryDefinition)\r\n        if (String(endPointUrl).toUpperCase().includes(\"ERROR\")){\r\n            alert(endPointUrl)\r\n            return\r\n        }\r\n        let params = this.config.backendUrl + endPointUrl\r\n          + '?' + new URLSearchParams(APIParams) + '&'+ new URLSearchParams(viewParams)\r\n        try {\r\n          const response =await this.fetchApi(params)\r\n          if (response && !response.is_error) {\r\n            //console.log('deactivatedObjects', j.json())            \r\n            this.deactivatedObjects = response\r\n            if (this.deactivatedObjects.length===0){\r\n              let log=\"\"\r\n              if (this.lang===\"en\"){\r\n                log='No records found'\r\n              }else{\r\n                log='No se han encontrado objetos'\r\n              }\r\n              this.dispatchEvent(\r\n                new CustomEvent(\"error\", {\r\n                  detail: { ...e, log: log },\r\n                  bubbles: true,\r\n                  composed: true,\r\n                })  \r\n              )\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Error:', error);\r\n          // Handle any errors that occurred during fetch or JSON parsing\r\n        }        \r\n    }\r\n  \r\n    \r\n    get reactivateObjectDialog() {return this.shadowRoot.querySelector(\"tr-dialog#reactivateObjectDialog\")}\r\n    get queryNumDays() {return this.shadowRoot.querySelector(\"mwc-textfield#queryNumDays\")}  \r\n    get objectToReactivateName() {return this.shadowRoot.querySelector(\"mwc-select#objectToReactivateName\")}\r\n  \r\n}}","import { html } from 'lit-element';\r\nimport '@material/mwc-icon';\r\nimport \"@material/mwc-textfield\";\r\n\r\nexport const template = (props, label) => {\r\n    if (props.activeOptions===undefined){ \r\n        props.activeOptions=[]\r\n    } else if (typeof props.activeOptions === 'string') {\r\n        // Split the string into an array using the pipe '|' as a delimiter\r\n        props.activeOptions = props.activeOptions.split('|');\r\n    }\r\n    if (!Array.isArray(props.activeOptions)) {\r\n        props.activeOptions = [];\r\n    }\r\n    if (props.options===undefined){ \r\n        props.options=[]\r\n    } else if (typeof props.options === 'string') {\r\n        // Split the string into an array using the pipe '|' as a delimiter\r\n        props.options = props.options.split('|');\r\n    }\r\n    if (!Array.isArray(props.options)) {\r\n        props.options = [];\r\n    }\r\n    if (props.allowAdhocEntries===undefined){ props.allowAdhocEntries=false}\r\n    //if (props.options===undefined){ props.options=[]}\r\n    if (props.readOnly===undefined){ props.readOnly=false}\r\n    if (props.displayLabel===undefined){ props.displayLabel=true}\r\n    if (props.readOnly===true){props.clickedContainer= true}\r\n    \r\n    const filteredOptions = props.options.filter(option => !props.activeOptions.includes(option));\r\n    const uniqueFilteredOptions = [...new Set(filteredOptions)];\r\n    return html`\r\n    <div>\r\n    ${props.readOnly===true? html`\r\n    <div class=\"sellect-container-readonly\" @click=${(e) => props.clickContainer(e)} style=${props.clickedContainer ? \"background-color:transparent;\" : \"\"} @focusout=${() => props.inputFocusOut()}>\r\n        ${props.displayLabel===false? html``:html`\r\n            <label class=${props.clickedContainer ? \"second\" : \"first\"}> ${label} </label>\r\n        `}                \r\n        <div class=\"sellect-destination-list\">\r\n        ${props.activeOptions.map((option, i) => html `\r\n            <span class=\"sellect-trigger sellect-item\" style=\"display: inherit;\"> ${option} \r\n            ${props.readOnly===true? html``:html`\r\n                <mwc-icon class=\"sellect-close-icon\" style=\"font-size:8px\" @click=${() => props.removeActiveOption(i)}> close </mwc-icon> </span>\r\n            `}\r\n        `)}\r\n        </div>\r\n        </div>\r\n    `:html`\r\n        <div class=\"sellect-container\" @click=${(e) => props.clickContainer(e)} style=${props.clickedContainer ? \"background-color:transparent;\" : \"\"} @focusout=${() => props.inputFocusOut()}>\r\n            <div class=\"sellect-destination-list\">\r\n                ${props.activeOptions.map((option, i) => html `\r\n                    <span class=\"sellect-trigger sellect-item\" style=\"display: inherit;\"> ${option} \r\n                    ${props.readOnly===true? html``:html`\r\n                        <mwc-icon class=\"sellect-close-icon\" style=\"font-size:8px\" @click=${() => props.removeActiveOption(i)}> close </mwc-icon> </span>\r\n                    `}\r\n                `)}\r\n            </div>\r\n            ${props.displayLabel===false? html``:html`\r\n                <label class=${props.clickedContainer ? \"second\" : \"first\"}> ${label} </label>\r\n                ${props.allowAdhocEntries ? html `\r\n                <input class=\"sellect-element\" ?disabled=${props.readOnly||!props.allowAdhocEntries} @click=${() => props.setOpenTrue()} id=\"my-element\" type=\"text\" label=${\"* New Production Lot Name\"}  @change=${(e) => props.pressEnter(e) }></input>\r\n                ` : html `\r\n                <input class=\"sellect-element\" ?disabled=${props.readOnly||!props.allowAdhocEntries} @click=${() => props.setOpenTrue()} id=\"my-element\" type=\"text\" label=${\"* New Production Lot Name\"}> </input>\r\n                `}\r\n            `}\r\n            ${props.readOnly===true? html``:html`\r\n            <div class=\"sellect-origin-list ${!props.open ? \"\" : \"open\"}\">\r\n                ${uniqueFilteredOptions.map((option, i) => html`\r\n                    <span class=\"sellect-trigger sellect-item\" style=\"display: inherit;\" @click=${() => props.removeOption(i)}> ${option} <i class=\"fa fa-times sellect-close-icon\"> </i> </span>\r\n                `)}\r\n            </div>\r\n            `}\r\n            ${props.readOnly===true? html``:html`\r\n                <mwc-icon class=\"sellect-arrow-icon\" @click=${(e) => props.setOpen(e)}> arrow_drop_down </mwc-icon>\r\n            `}\r\n        </div>\r\n    `}\r\n    </div>\r\n    `;\r\n};\r\n","import { LitElement } from \"lit-element\";\r\nimport { template } from \"./app.template\";\r\nimport { styles } from \"./app.css\";\r\n\r\nexport class DependencyForm extends LitElement {\r\n  static get styles() {\r\n    return styles;\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      endpoint: { type: String },\r\n      endpoints: { type: Array },\r\n      notification: { type: String },\r\n      notifications: { type: Array },\r\n      params: { type: Array },\r\n      lang: { type: String },\r\n      isFormValid: { type: Boolean },\r\n      toggles: { type: Object },\r\n      objectTypes: {type : Array},\r\n      rowSelectedData: { type: Object },\r\n      objectTypesStr: {type: String}\r\n    };\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.endpoints = [];\r\n    this.params = [];\r\n    this.notification = \"\";\r\n    this.notifications = [];\r\n    this.endpoint = \"\";\r\n    this.lang = \"\";\r\n    this.toggles = {};\r\n    this.objectTypes = [];\r\n    this.objectTypesStr=\"\"\r\n    this.rowSelectedData = {};\r\n    this.notificationChecked = false;\r\n    this.tmpNotification = [];\r\n  }\r\n\r\n  render() {\r\n    return template({\r\n      endpoints: this.endpoints,\r\n      notifications: this.notifications,\r\n      tmpNotifications: this.tmpNotifications,\r\n      params: this.params,\r\n      lang: this.lang,\r\n      checkValidity: this._checkValidity,\r\n      toggles: this.toggles,\r\n      objectTypes: this.objectTypes,\r\n      objectTypesStr: this.objectTypesStr,\r\n      rowSelectedData: this.rowSelectedData,\r\n      notificationChecked: this.notificationChecked,\r\n      endpoint: this.endpoint,\r\n      handleChangeEndpoint: this._handleChangeEndpoint,\r\n      toggleChanged: this._toggleChanged,\r\n      handleChangeStep: this._handleChangeStep,\r\n      visibleNotification: this._visibleNotification,\r\n    });\r\n  }\r\n\r\n  _visibleNotification = (e) =>  {\r\n    this.notificationChecked = !this.notificationChecked;\r\n    this.notifications = this.tmpNotifications;\r\n    if(this.notificationChecked) {\r\n      this.notifications = [];\r\n    }\r\n    this.requestUpdate();\r\n  }\r\n\r\n  _handleChangeStep = (name) => (e) => {\r\n    this.objectTypes = [];\r\n    this.objectTypesStr=\"\";\r\n    const stepValue = e.target.value;\r\n    let steps = JSON.parse(sessionStorage.getItem(\"steps\"));\r\n    const tmp = JSON.parse(steps[stepValue - 1].dynamic_data);\r\n    console.log(tmp)\r\n    //this.objectTypesStr=tmp.object_type\r\n    tmp.map((step, i) => {\r\n      if (this.objectTypesStr.length>0){\r\n        this.objectTypesStr=this.objectTypesStr+\"|\"\r\n      }\r\n      this.objectTypesStr=this.objectTypesStr+step.object_type;\r\n      this.objectTypes.push(step.object_type);\r\n    });\r\n    this.requestUpdate();\r\n  };\r\n\r\n  _toggleChanged = (name) => () => {\r\n    this.toggles[name] = !this.toggles[name];\r\n    this.requestUpdate();\r\n  };\r\n\r\n  _handleChangeEndpoint = (e) => {\r\n    //sessionStorage.setItem('actionName',\"SCRIPT_ADD_STEP\");\r\n    //this.rowSelectedData = undefined;\r\n    //this.rowSelectedData={}\r\n    this.willUpdateData = undefined;\r\n    this.toggles = {};\r\n    if (this.endpoints === undefined) return [];\r\n    const idx = this.endpoints.findIndex(\r\n      (endpoint) => endpoint.keyName === e.target.value\r\n    );\r\n    if (idx === -1) return [];\r\n    this.endpoint = this.endpoints[idx].keyName;\r\n    this.params = this.endpoints[idx]?.arguments_array ?? [];\r\n    console.log(this.endpoint, this.params)\r\n    this.requestUpdate();\r\n  };\r\n\r\n  getFormFields = () => {\r\n    console.log('getFormFields')\r\n    this.checkValidity();\r\n    if (!this.isFormValid) return null;\r\n\r\n    const payload = {};\r\n    const fields = this.shadowRoot.querySelectorAll(\r\n      \"mwc-textfield, mwc-select, mwc-checkbox, mwc-radio\"\r\n    );\r\n\r\n    fields.forEach((field) => {\r\n      console.log('field', field)\r\n      if (field.tagName === \"MWC-TEXTFIELD\" || field.tagName === \"MWC-SELECT\") {\r\n        payload[field.name] = field.value;\r\n      }\r\n\r\n      if (field.tagName === \"MWC-CHECKBOX\") {\r\n        payload[field.name] = field.checked;\r\n      }\r\n\r\n      if (field.tagName === \"MWC-RADIO\" && field.checked) {\r\n        payload[field.name] = field.value;\r\n      }\r\n    });\r\n\r\n    return payload;\r\n  };\r\n\r\n  getFieldTypes = () => {\r\n    return this.params;\r\n  };\r\n\r\n  checkValidity = () => {\r\n    const requiredFields = this.shadowRoot.querySelectorAll(\"[required]\");\r\n    const validFields = []; // stores the validity of all required fields\r\n\r\n    requiredFields.forEach((field) => {\r\n      validFields.push(field.validity.valid);\r\n    });\r\n\r\n    // if false is not in the array of validFields, then the form is valid\r\n    this.isFormValid = !validFields.includes(false);\r\n    return this.isFormValid;\r\n  };\r\n}\r\n\r\nwindow.customElements.define(\"dependency-form\", DependencyForm);\r\n","import { html, nothing } from \"lit\";\r\nimport \"@material/mwc-select\";\r\nimport \"@material/mwc-textfield\";\r\nimport \"@material/mwc-switch\";\r\nimport \"@material/mwc-list/mwc-list-item\";\r\nimport '../../MultiSelect/index';\r\nimport { elementTypes } from \"../config\";\r\n\r\nexport const template = (props) => {\r\n  let items = [];\r\n  //let rowSelectedData=sessionStorage.getItem('rowSelectedData')\r\n  //rowSelectedData=sessionStorage.getItem('steps')\r\n  //props.rowSelectedData.action_name=rowSelectedData.action_name\r\n  //if (props.rowSelectedData!==null){\r\n    if (props.rowSelectedData===undefined){\r\n      items=props.params\r\n    } else if (Object.keys(props.rowSelectedData).length === 0){\r\n      items=props.params\r\n    } else if (!props.rowSelectedData) {    \r\n      items=[]//props.params\r\n    }else{\r\n      let actionName = sessionStorage.getItem('actionName')\r\n      if (actionName ==props.endpoint){\r\n        items =  actionName == \"SCRIPT_UPDATE_STEP\" ? \r\n          props.endpoints.find((item) => item.keyName == props.rowSelectedData.action_name)?.arguments_array : props.params;\r\n        }else{\r\n          items=props.params\r\n        }\r\n    }\r\n  //}\r\n  //console.log(props.objectTypesStr, 'items', items)\r\n  return html`\r\n    <div class=\"container\">\r\n      <form id=\"#endpoint-form\" action=\"/\" method=\"get\">\r\n        <div class=\"item-container\">\r\n          <mwc-select\r\n            required\r\n            fixedMenuPosition\r\n            @change=${props.handleChangeEndpoint}\r\n            id=\"endpoint\"\r\n            name=\"endpoint\"\r\n            label=\"endpoint\"\r\n            value=${props!==undefined&&props.rowSelectedData!==null&&props.rowSelectedData!==undefined&&props.rowSelectedData.action_name!==undefined?\r\n              props.rowSelectedData.action_name:''}\r\n          >\r\n          ${props===undefined||props.endpoints===undefined?nothing:html`\r\n           ${ props.endpoints.map((endpoint, idx) => \r\n                endpoint.keyName != props.rowSelectedData?.action_name ?\r\n                html `                \r\n                  <mwc-list-item value=${endpoint.keyName}>\r\n                    ${endpoint.keyName}\r\n                  </mwc-list-item>\r\n                ` : \r\n                html `                \r\n                  <mwc-list-item value=${props.rowSelectedData.action_name}>\r\n                    ${props.rowSelectedData.action_name}\r\n                  </mwc-list-item>\r\n                `\r\n              )\r\n            }\r\n          `}\r\n          </mwc-select>\r\n        </div>\r\n\r\n        <div class=\"form-fields\">\r\n          ${\r\n            items.map((param, idx) => {\r\n            const required = param[\"is_mandatory?\"];\r\n            const str = html`<mwc-switch\r\n                name=${param.name}\r\n                @click=${props.toggleChanged(param.name)}\r\n              />`;\r\n            const new_category =\r\n              param.name == \"category\" ? html`<mwc-select></mwc-select>` : ``;\r\n            if ((param.type === elementTypes.Number) || (param.type === elementTypes.Integer) ) {\r\n              return html`\r\n              <mwc-formfield>\r\n                  ${str}\r\n                  ${props.toggles[param.name]\r\n                    ? html`\r\n                        <mwc-textfield\r\n                          type=\"text\"\r\n                          ?required=${required}\r\n                          label=${\"Step\"}\r\n                          name=${param.name + \"_step\"}\r\n                          style=\"width: 100%\"\r\n                          @change=${props.handleChangeStep(param.name)}\r\n                        ></mwc-textfield>\r\n                        <multi-select style=\"width: 100%;\" name=${param.name + \"_object_posic\"} \r\n                        ?required=${required} .activeOptions=${{}} .options=${props.objectTypes}\r\n                        .props=${{\"readOnly\":false, \"displayLabel\":true}} .label=\"${\"Object Type\"}\"> </multi-select> \r\n                        <mwc-textfield\r\n                          type=\"text\"\r\n                          ?required=${required}\r\n                          label=${\"Object Posic\"}\r\n                          name=${param.name + \"_object_posic\"}\r\n                          style=\"width: 100%\"\r\n                          defaultValue=${1}\r\n                        ></mwc-textfield>\r\n                      `\r\n                    :\r\n                    html `\r\n                    <mwc-textfield\r\n                    ?required=${required}\r\n                    outlined\r\n                    type=\"number\"\r\n                    label=${param.name}\r\n                    name=${param.name}\r\n                    @blur=${props.checkValidity}\r\n                    value=3\r\n                  ></mwc-textfield>` }\r\n                </mwc-formfield>\r\n              `;\r\n            } else if ((param.type === elementTypes.Text) || (param.type === elementTypes.TextArr) || (param.type === elementTypes.TextObjectsArr) ) {\r\n              let arg = \"argument_0\" + (idx + 1);\r\n              return html`\r\n                <mwc-formfield>\r\n                  ${str}\r\n                  ${props.toggles[param.name]\r\n                    ? html`\r\n                        <mwc-textfield\r\n                          type=\"text\"\r\n                          ?required=${required}\r\n                          label=${\"Step\"}\r\n                          name=${param.name + \"_step\"}\r\n                          style=\"width: 100%\"\r\n                          @change=${props.handleChangeStep(param.name)}\r\n                        ></mwc-textfield>\r\n                        <multi-select style=\"width: 100%;\" name=${param.name + \"_object_posic\"} \r\n                        ?required=${required} .activeOptions=${{}} .options=${props.objectTypes}\r\n                        .props=${{\"readOnly\":false, \"displayLabel\":true}} .label=\"${\"Object Type\"}\"> </multi-select> \r\n                        <mwc-textfield\r\n                          type=\"text\"\r\n                          ?required=${required}\r\n                          label=${\"Object Posic\"}\r\n                          name=${param.name + \"_object_posic\"}\r\n                          style=\"width: 100%\"\r\n                          defaultValue=${1}\r\n                        ></mwc-textfield>\r\n                      `\r\n                    :\r\n                    html `\r\n                    <mwc-textfield\r\n                      ?required=${required}\r\n                      type=\"text\"\r\n                      label=${param.name}\r\n                      name=${param.name}\r\n                      @blur=${props.checkValidity}\r\n                      value=${sessionStorage.getItem('actionName') == \"SCRIPT_UPDATE_STEP\" ? props.rowSelectedData && props.rowSelectedData[arg] ? props.rowSelectedData[arg] : \"\" : \"\"}\r\n                      style=\"width: 100%\"\r\n                    ></mwc-textfield> ` }\r\n                </mwc-formfield>\r\n              `;\r\n            } else if (param.type === elementTypes.TextArr2) {\r\n              console.log(\"elementTypes.TextArr2\");\r\n              return html`\r\n                <mwc-formfield>\r\n                  ${str}\r\n                  ${props.toggles[param.name]\r\n                    ? html`\r\n                        <mwc-textfield\r\n                          type=\"text\"\r\n                          ?required=${required}\r\n                          label=${\"Step\"}\r\n                          name=${param.name + \"_step\"}\r\n                          style=\"width: 100%\"\r\n                          @change=${props.handleChangeStep(param.name)}\r\n                        ></mwc-textfield>\r\n                        ${props.objectTypes.length > 0 ? \r\n                          html`\r\n                         <mwc-select\r\n                          required\r\n                          fixedMenuPosition\r\n                          id=\"objectType\"\r\n                          name=${param.name + \"_object_type\"}\r\n                          label=\"objectType\"\r\n                        >\r\n                          ${props.objectTypes.map((objectType, idx) => {\r\n                            return html`\r\n                              <mwc-list-item value=${objectType}>\r\n                                ${objectType}\r\n                              </mwc-list-item>\r\n                            `;\r\n                          })}\r\n                          </mwc-select>\r\n                          ` : html `\r\n                            <multi-select style=\"width: 100%;\" name=${param.name + \"_object_posic\"} \r\n                            ?required=${required} .activeOptions=${{}} .options=${props.objectTypes}\r\n                            .props=${{\"readOnly\":false, \"displayLabel\":true}} .label=\"${\"Object Type\"}\"> </multi-select> \r\n                          `\r\n                        }\r\n                       \r\n                        <mwc-textfield\r\n                          type=\"text\"\r\n                          ?required=${required}\r\n                          label=${\"Object Posic\"}\r\n                          name=${param.name + \"_object_posic\"}\r\n                          style=\"width: 100%\"\r\n                          defaultValue=${1}\r\n                        ></mwc-textfield>\r\n                      `\r\n                    : html`\r\n                        <mwc-textfield\r\n                          type=\"text\"\r\n                          ?required=${required}\r\n                          label=${param.name}\r\n                          name=${param.name}\r\n                          @blur=${props.checkValidity}\r\n                          style=\"width: 100%\"\r\n                        ></mwc-textfield>\r\n                      `}\r\n                </mwc-formfield>\r\n              `;\r\n            }\r\n            return html`${param.type}`;\r\n            })\r\n          }\r\n          <mwc-formfield label=\"Expected successful?\">\r\n            <mwc-checkbox name=\"expectedSyntaxis\" @change=${(e) => props.visibleNotification(e)}></mwc-checkbox>\r\n          </mwc-formfield>\r\n          ${!props.notificationChecked ? html `\r\n          <mwc-select\r\n            fixedMenuPosition\r\n            id=\"notification\"\r\n            name=\"notification\"\r\n            label=\"notification\"\r\n          >\r\n          ${props===undefined||props.notifications===undefined?nothing:html`\r\n            ${props.notifications.map((notif, idx) => {\r\n              return html`\r\n                <mwc-list-item value=${notif.keyName}>\r\n                  ${notif[\"keyValue_\" + props.lang]}\r\n                </mwc-list-item>\r\n              `;\r\n            })}\r\n          `}\r\n          </mwc-select>\r\n          `: null}\r\n        </div>\r\n      </form>\r\n    </div>\r\n  `;\r\n};\r\n","import { html } from \"lit\";\r\nimport { commonLangConfig } from \"@trazit/common-core\";\r\nimport { GridFunctions } from \"../grid_with_buttons/GridFunctions\";\r\n\r\nimport \"@material/mwc-list/mwc-list-item\";\r\nimport \"@material/mwc-select\";\r\nimport \"@material/mwc-checkbox\";\r\nimport \"@material/mwc-formfield\";\r\nimport { DialogsFunctions } from \"./DialogsFunctions\";\r\nimport \"../../components/DependencyForm/app/index\";\r\nimport '../MultiSelect';\r\n\r\nexport function TrazitTestScriptNewStepDialog(base) {\r\n  return class extends GridFunctions(DialogsFunctions(base)) {\r\n    static get properties() {\r\n      return {};\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n    }\r\n    openTestScriptNewStepDialog(actionModel = this.actionBeingPerformedModel) {\r\n      if (\r\n        actionModel.dialogInfo === undefined ||\r\n        actionModel.dialogInfo.name === undefined ||\r\n        actionModel.dialogInfo.name.toString().toUpperCase() !==\r\n          \"TESTSCRIPTNEWSTEPDIALOG\"\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      //        if (!actionModel||!actionModel.dialogInfo||!actionModel.dialogInfo.fields){\r\n      //        //alert(false)\r\n      //        return false\r\n      //       }\r\n      // alert(true)\r\n      //this.defaultValue()\r\n      //this.resetFields()\r\n      //    if (this.actionBeingPerformedModel.dialogInfo.gridContent!==undefined&&this.actionBeingPerformedModel.dialogInfo.gridContent===true){\r\n      //     this.getGenericDialogGridItems(this.actionBeingPerformedModel.dialogInfo)\r\n      //     return\r\n      // }\r\n      // if (this.actionBeingPerformedModel.dialogInfo.filesListContent!==undefined&&this.actionBeingPerformedModel.dialogInfo.filesListContent===true){\r\n      //     this.getGenericDialogGridItems(this.actionBeingPerformedModel.dialogInfo)\r\n      //     return\r\n      // }\r\n      return true;\r\n    }\r\n\r\n    isFieldDisabled(fld) {\r\n      if (fld.disabled !== undefined && fld.disabled === true) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    /** Date Template Dialog part  @open=${this.defaultValue()}*/\r\n    testScriptNewStepFormDialog(actionModel) {\r\n      if (actionModel === undefined) {\r\n        actionModel = this.actionBeingPerformedModel;\r\n        if (actionModel !== undefined) {\r\n          this.area = actionModel.area;\r\n        }\r\n      }\r\n      let rowData={}\r\n      if (this.actionBeingPerformedModel.actionName===\"SCRIPT_UPDATE_STEP\"){\r\n        rowData=this.selectedItems[0]\r\n      }else{\r\n        rowData={}\r\n      }\r\n      \r\n      // let rowSelectedRowStr=sessionStorage.getItem ('rowSelectedData')\r\n      // if (rowSelectedRowStr!==undefined&& rowSelectedRowStr !== \"[object Object]\" ){\r\n      //   rowData=JSON.parse(rowSelectedRowStr)\r\n      // }\r\n//      console.log(rowData)\r\n      // @closed=${this.resetFields} this is in use but moved to be executed about to perform the fetchApi\r\n      //     otherwise it is not compatible with actions requiring credentials dialog.\r\n      return html`\r\n        <style>\r\n          mwc-textfield {\r\n            border-style: Solid;\r\n            border-color: #999999;\r\n            border-color: rgba(153, 153, 153, 1);\r\n            border-width: 1px;\r\n            border-radius: 7px;\r\n            -moz-border-radius: 7px;\r\n            -webkit-border-radius: 7px;\r\n            font-family: Montserrat;\r\n            font-weight: bold;\r\n            font-size: 19px;\r\n            background-color: #ffffff;\r\n            background-color: rgb(255, 255, 255);\r\n            --mdc-text-field-idle-line-color: #148cfa;\r\n            --mdc-text-field-outlined-idle-border-color: #148cfa;\r\n            --mdc-text-field-label-ink-color: #148cfa;\r\n            --mdc-text-field-focused-label-color: #148cfa;\r\n            --mdc-theme-primary: #0465fb;\r\n          }\r\n          mwc-select {\r\n            --mdc-theme-primary: rgba(36, 192, 235, 1);\r\n            --mdc-theme-text-primary-on-background: rgba(49, 130, 189, 1);\r\n            --mdc-select-ink-color: rgb(47, 47, 47);\r\n            --mdc-select-dropdown-icon-color: rgba(36, 192, 235, 1);\r\n            --mdc-select-hover-line-color: rgba(36, 192, 235, 1);\r\n            --mdc-notched-outline-border-color: rgba(186, 235, 248, 0.4);\r\n            --mdc-select-disabled-dropdown-icon-color: rgba(36, 192, 235, 1);\r\n\r\n            font-family: Montserrat;\r\n            font-weight: bold;\r\n            font-size: 19px;\r\n          }\r\n          mwc-select.outlined {\r\n            --mdc-theme-primary: rgba(36, 192, 235, 1);\r\n            --mdc-theme-text-primary-on-background: rgba(49, 130, 189, 1);\r\n            --mdc-select-ink-color: rgba(36, 192, 235, 1);\r\n            font-family: Montserrat;\r\n            font-weight: bold;\r\n            font-size: 19px;\r\n            background-color: #4fcad029;\r\n          }\r\n        </style>\r\n        <tr-dialog\r\n          id=\"testScriptNewStepDialog\"\r\n          heading=\"\"\r\n          hideActions=\"\"\r\n          scrimClickAction=\"\"\r\n          @opened=${() => {\r\n            this.defaultValue();\r\n          }}\r\n          ?open=${this.openTestScriptNewStepDialog(actionModel)}\r\n        >\r\n          <dependency-form\r\n            .lang=${this.lang}\r\n            .endpoints=${this.listTestEndpointsList()}\r\n            .notifications=${this.listTestNotificationsList()}\r\n            .tmpNotifications=${this.listTestNotificationsList()}\r\n            .rowSelectedData=${rowData}\r\n          ></dependency-form>\r\n          <div style=\"margin-top:30px;text-align:center\">\r\n            <sp-button\r\n              size=\"xl\"\r\n              variant=\"secondary\"\r\n              slot=\"secondaryAction\"\r\n              dialogAction=\"decline\"\r\n              @click=${() => this.declineDialog()}\r\n            >\r\n              ${commonLangConfig.closeDialogButton[\"label_\" + this.lang]}\r\n            </sp-button>\r\n            <sp-button\r\n              size=\"xl\"\r\n              slot=\"primaryAction\"\r\n              dialogAction=\"accept\"\r\n              @click=${() => this.acceptedTestDialog(actionModel)}\r\n            >\r\n              ${commonLangConfig.confirmDialogButton[\"label_\" + this.lang]}\r\n            </sp-button>\r\n          </div>\r\n        </tr-dialog>\r\n      `;\r\n    }\r\n    addTheDynamicElement(fld) {\r\n      if (fld.rule === undefined || this.selectedItemInView === undefined) {\r\n        return;\r\n      }\r\n      let selObj = this.selectedItemInView;\r\n      let curValue = selObj[fld.rule.field];\r\n      if (curValue === undefined) {\r\n        return;\r\n      }\r\n      if (curValue.length === 0) {\r\n        curValue = \"*NULL*\";\r\n      }\r\n      let matchingEntry = fld.rule.logic.find(\r\n        (entry) => entry.value === curValue\r\n      );\r\n\r\n      if (matchingEntry === undefined) {\r\n        if (curValue.length > 0) {\r\n          curValue = \"*NOT_NULL*\";\r\n        }\r\n        matchingEntry = fld.rule.logic.find(\r\n          (entry) => entry.value === curValue\r\n        );\r\n      }\r\n      if (matchingEntry === undefined) {\r\n        return;\r\n      }\r\n\r\n      if (String(matchingEntry.element).toUpperCase() === \"TEXT\") {\r\n        return html`\r\n          <div class=\"layout horizontal flex center-center\">\r\n            <mwc-textfield\r\n              class=\"layout flex\"\r\n              id=\"dynamicElement1\"\r\n              type=\"text\"\r\n              .value=${fld.default_value ? fld.default_value : \"\"}\r\n              label=\"${this.fieldLabel(fld)}\"\r\n              ?disabled=${this.isFieldDisabled(fld)}\r\n              @keypress=${(e) =>\r\n                e.keyCode == 13 && this.acceptedTestGenericDialog}\r\n            ></mwc-textfield>\r\n          </div>\r\n        `;\r\n      }\r\n      if (String(matchingEntry.element).toUpperCase() === \"LIST\") {\r\n        fld.items = [];\r\n        fld.items = JSON.parse(selObj[fld.rule.field]);\r\n        return html`\r\n          <div class=\"layout horizontal flex center-center\">\r\n            <mwc-select\r\n              id=\"dynamicElement1\"\r\n              label=\"${this.fieldLabel(fld)}\"\r\n              @selected=${this.valueSelected}\r\n              ?disabled=${this.isFieldDisabled(fld)}\r\n            >\r\n              ${this.listEntries(fld)}</mwc-select\r\n            >\r\n          </div>\r\n        `;\r\n      }\r\n      return html``;\r\n    }\r\n    get testScriptNewStepDialog() {\r\n      return this.shadowRoot.querySelector(\"tr-dialog#testScriptNewStepDialog\");\r\n    }\r\n    get dateDialog() {\r\n      return this.shadowRoot.querySelector(\"tr-dialog#dateDialog\");\r\n    }\r\n    get dateInput() {\r\n      return this.shadowRoot.querySelector(\"input#dateInput\");\r\n    }\r\n    setNewDate() {\r\n      if (this.dateInput.value) {\r\n        this.dialogAccept(false);\r\n      }\r\n    }\r\n    declineDialog = () => {\r\n      this.fieldsShouldBeReset = true;\r\n      console.log(\"closedialog\");\r\n      sessionStorage.setItem('rowSelectedData', {})\r\n    }\r\n    acceptedTestDialog(actionModel) {\r\n      console.log(\"Accepted\");\r\n      this.fieldsShouldBeReset = true;\r\n      if (this.validationCheck()) {\r\n        this.performActionRequestHavingDialogOrNotForProcess(actionModel);\r\n      } else {\r\n        console.log(\r\n          \"Accepted Test Dialog but mandatories pending then action not performed\"\r\n        );\r\n        alert(\"mandatories pending\");\r\n      }\r\n    }\r\n\r\n    async performActionRequestHavingDialogOrNotForProcess(actionModel) {\r\n      const data = this.getDependencyForm().getFormFields();\r\n      const meta = this.getDependencyForm().getFieldTypes();\r\n\r\n      const fieldNames = meta.map((info) => info.name);\r\n      const fieldValues = meta.map((info) => {\r\n        if (\r\n          Object.keys(data).includes(info.name + \"_step\") &&\r\n          Object.keys(data).includes(info.name + \"_object_type\") &&\r\n          Object.keys(data).includes(info.name + \"_object_posic\")\r\n        ) {\r\n          const name = {\r\n            step: data[info.name + \"_step\"],\r\n            object_type: data[info.name + \"_object_type\"],\r\n            object_posic: data[info.name + \"_object_posic\"],\r\n          };\r\n          return `${JSON.stringify(name)}*${info.type}`;\r\n        }\r\n        return `${data[info.name]}*${info.type}`;\r\n      });\r\n\r\n      //console.log({ meta, data });\r\n      //console.log(fieldNames.join(\"|\"), fieldValues.join(\"|\"));\r\n      //console.log(\"uuuuuuuuuuuuuuuuu\",{ fieldNames, fieldValues });\r\n\r\n      let actionName = actionModel.actionName; //sessionStorage.getItem('actionName');\r\n      let extraParams = \"&action=\" + this.getDependencyForm().endpoint;\r\n      \r\n      if (actionName == \"SCRIPT_UPDATE_STEP\") {\r\n        extraParams = extraParams + \"&stepId=\" + this.selectedItems[0].step_id;\r\n      }\r\n      extraParams = extraParams + \"&scriptId=\" + this.selectedItem.script_id;\r\n      extraParams = extraParams + \"&fieldName=\" + fieldNames.join(\"|\");\r\n      extraParams = extraParams + \"&fieldValue=\" + fieldValues.join(\"|\");\r\n      extraParams = extraParams + \"&procInstanceName=\" + this.procInstanceName;\r\n      extraParams = extraParams + \"&procedureName=\" + this.procedureName;\r\n      extraParams = extraParams + \"&procedureVersion=\" + this.procedureVersion;\r\n      extraParams = extraParams + \"&expectedSyntaxis=\" + data.expectedSyntaxis;\r\n      extraParams = extraParams + \"&expectedNotification=\" + data.notification;\r\n      let APIParams = this.getAPICommonParams(actionModel, true);\r\n      let endPointUrl = this.getActionAPIUrl(actionModel);\r\n      if (String(endPointUrl).toUpperCase().includes(\"ERROR\")) {\r\n        alert(endPointUrl);\r\n        return;\r\n      }\r\n      let params =\r\n        this.config.backendUrl +\r\n        endPointUrl +\r\n        \"?\" +\r\n        new URLSearchParams(APIParams); // + \"&\" +new URLSearchParams(credDialogArgs);\r\n      \r\n      console.log(\"add data Params\", JSON.stringify(extraParams));\r\n\r\n      params = params + extraParams;\r\n\r\n      let log = true;\r\n      params = params.replace(/\\|/g, \"%7C\");\r\n\r\n      console.log(\"add data extraParams\", JSON.stringify(extraParams));\r\n          await this.fetchApi(params)\r\n            .then((j) => {\r\n              if (j && !j.is_error) {      \r\n                this.actionOutput = j.json();\r\n                this.selectedItem = j.json();\r\n              } else {\r\n                this.actionOutput = j.json();\r\n                this.selectedItem = j.json();\r\n              }\r\n              this.selectSectionView(index, true);\r\n\r\n              //this.selectedProcInstanceMainView()\r\n              //if (this.actionOutput!==undefined){console.log(\"actionOutput\", this.actionOutput);}\r\n            })\r\n            .then((j) => {\r\n              let mye = {};\r\n              if (j.is_error !== undefined && j.is_error === true) {\r\n                //        mye = { is_error: true, message_en: \"Performed with success\", message_es: \"Ejecutado correctamente\" }\r\n                this.dispatchEvent(\r\n                  new CustomEvent(\"error\", {\r\n                    detail: { ...j, log: log },\r\n                    bubbles: true,\r\n                    composed: true,\r\n                  })\r\n                );\r\n              } else {\r\n                mye = {\r\n                  is_error: false,\r\n                  message_en: \"Performed with success\",\r\n                  message_es: \"Ejecutado correctamente\",\r\n                };\r\n                this.dispatchEvent(\r\n                  new CustomEvent(\"success\", {\r\n                    detail: { ...mye, log: log },\r\n                    bubbles: true,\r\n                    composed: true,\r\n                  })\r\n                );\r\n              }\r\n              return j;\r\n            })\r\n            .catch((e) => {\r\n              if (e.message == \"Unexpected end of JSON input\") {\r\n                this.dispatchEvent(\r\n                  new CustomEvent(\"error\", {\r\n                    detail: { ...e },\r\n                    bubbles: true,\r\n                    composed: true,\r\n                  })\r\n                );\r\n              } else {\r\n                this.dispatchEvent(\r\n                  new CustomEvent(\"error\", {\r\n                    detail: { ...e, log: log },\r\n                    bubbles: true,\r\n                    composed: true,\r\n                  })\r\n                );\r\n                //this.error(e)\r\n                return e;\r\n              }\r\n            });\r\n\r\n      return;\r\n    }\r\n\r\n    getDependencyForm() {\r\n      return this.shadowRoot.querySelector(\"dependency-form\");\r\n    }\r\n\r\n    validationCheck() {\r\n      const validity = this.getDependencyForm().checkValidity();\r\n      return validity;\r\n    }\r\n\r\n    gridActiveItemChanged() {\r\n      alert(\"Changed\");\r\n\r\n      // <vaadin-grid id=\"mainGrid\" theme=\"row-dividers\" column-reordering-allowed multi-sort\r\n      // @active-item-changed=${this.gridActiveItemChanged} .items=${this.genericDialogGridItems} .selectedItems=\"${this.genericDialogGridSelectedItems}\"\r\n      // ${gridRowDetailsRenderer(this.detailRenderer)} ${this.setCellListener()}\r\n      // ${this.gridList(actionModel.dialogInfo)}\r\n      // </vaadin-grid>\r\n    }\r\n\r\n    defaultValue(e) {\r\n      //alert('open defaultValue')\r\n      // if (this.actionBeingPerformedModel.dialogInfo.gridContent!==undefined&&this.actionBeingPerformedModel.dialogInfo.gridContent===true){\r\n      //     this.getGenericDialogGridItems(this.actionBeingPerformedModel.dialogInfo)\r\n      //     return\r\n      // }\r\n      // if (this.actionBeingPerformedModel.dialogInfo.filesListContent!==undefined&&this.actionBeingPerformedModel.dialogInfo.filesListContent===true){\r\n      //     this.getGenericDialogGridItems(this.actionBeingPerformedModel.dialogInfo)\r\n      //     return\r\n      // }\r\n      if (this.fieldsShouldBeReset === true) {\r\n        this.resetFields();\r\n        this.fieldsShouldBeReset = false;\r\n      }\r\n      let dlgFlds = this.actionBeingPerformedModel.dialogInfo.fields;\r\n      if (dlgFlds === undefined) {\r\n        //alert('The dialog '+this.actionBeingPerformedModel.dialogInfo.name+' has no fields property for adding the fields, please review.')\r\n        return;\r\n      }\r\n      for (let element of dlgFlds) {\r\n        let fldObj = element;\r\n        let keyName = Object.keys(fldObj);\r\n\r\n        //if (==null){\r\n        if (\r\n          this[keyName] !== null &&\r\n          this[keyName].defval !== undefined &&\r\n          this[keyName].defval !== null\r\n        ) {\r\n          alert(this[keyName].defval);\r\n        }\r\n        if (\r\n          this[keyName] !== null &&\r\n          fldObj[keyName] !== undefined &&\r\n          fldObj[keyName].default_value !== undefined &&\r\n          fldObj[keyName].default_value !== null\r\n        ) {\r\n          this[keyName].value = fldObj[keyName].default_value;\r\n        }\r\n        if (\r\n          this[keyName] !== null &&\r\n          fldObj[keyName] !== undefined &&\r\n          fldObj[keyName].selObjectPropertyName !== undefined &&\r\n          fldObj[keyName].selObjectPropertyName !== null &&\r\n          this[keyName] !== null\r\n        ) {\r\n          this[keyName].value =\r\n            this.selectedItems[0][fldObj[keyName].selObjectPropertyName];\r\n        }\r\n        if (\r\n          this[keyName] !== null &&\r\n          fldObj[keyName] !== undefined &&\r\n          fldObj[keyName].internalVariableObjName !== undefined &&\r\n          fldObj[keyName].internalVariableObjName !== null &&\r\n          fldObj[keyName].internalVariableObjProperty !== undefined &&\r\n          fldObj[keyName].internalVariableObjProperty !== null\r\n        ) {\r\n          this[keyName].value =\r\n            this[fldObj[keyName].internalVariableObjName][0][\r\n              fldObj[keyName].internalVariableObjProperty\r\n            ];\r\n        }\r\n      }\r\n    }\r\n    resetFields(e) {\r\n      //alert('reset Fields now')\r\n      let dlgFlds = this.actionBeingPerformedModel.dialogInfo.fields;\r\n      if (dlgFlds === undefined) {\r\n        //alert('The dialog '+this.actionBeingPerformedModel.dialogInfo.name+' has no fields property for adding the fields, please review.')\r\n        return;\r\n      }\r\n      for (const element of dlgFlds) {\r\n        let fldObj = element;\r\n        let keyName = Object.keys(fldObj);\r\n        if (this[keyName] !== null) {\r\n          // console.log(keyName[0])\r\n          if (keyName[0].includes(\"list\")) {\r\n            if (!keyName[0].includes(\"SelectedRow\")) {\r\n              this[keyName[0]].value = [];\r\n            }\r\n          } else {\r\n            if (this[keyName] !== undefined && this[keyName[0]] !== undefined) {\r\n              this[keyName[0]].value = \"\";\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    valueSelected(e) {\r\n      return; // The code below is there only for trying to make lists depending on another list, does not work yet\r\n      //alert('ds '+ e.target.id+this[e.target.id].value)\r\n\r\n      // let triggeredElem=this.actionBeingPerformedModel.dialogInfo.fields.filter(p => p == e.target.id)\r\n\r\n      let cleanParams = {};\r\n      // Object.entries(this.actionBeingPerformedModel.dialogInfo.fields).map(([key, value]) => {\r\n      //   if (value != null || value != undefined) {\r\n      //     cleanParams[key] = value\r\n      //   }\r\n      // })\r\n      // console.log('cleanParams', cleanParams)\r\n      let fld = this.actionBeingPerformedModel.dialogInfo.fields[1].list2; //(([key, value]) =>{\r\n      //cleanParams=value\r\n      //})\r\n      console.log(\"fld\", fld);\r\n      let thisNewList2 = [];\r\n      thisNewList2 = this.listEntries(fld);\r\n      console.log(\"thisNewList2\", thisNewList2);\r\n      //alert(this.actionBeingPerformedModel.dialogInfo.fields[e.target.id].valuesFromMasterData.recalculateObjectOnEntrySelected)\r\n      //console.log(e.targetValue)\r\n    }\r\n    // listEntries(fld){\r\n\r\n    scriptStepArguments(fld, data){\r\n      \r\n      this.isProcManagement=true\r\n      //alert(\"Remember to remove line 510, TrazitTestScriptNewStepDialog\")\r\n      this.moduleName=sessionStorage.getItem('selectedProcedureModuleName')\r\n      //this.moduleName=\"STOCKS\"\r\n      //alert(this.moduleName)\r\n      this.getProcMasterData(); \r\n      let flattenedArray = Object.values(this.masterData).flatMap(group => Object.values(group));\r\n      let findProc = flattenedArray.filter(item => item.module_name === this.moduleName);\r\n      if (findProc.length==0) {return}\r\n      let endPointList=this.listTestEndpointsList()\r\n      const idx =endPointList.findIndex(\r\n        (endpoint) => endpoint.keyName === data.action_name\r\n      );\r\n      if (idx === -1) return [];\r\n      let endpointParams =endPointList[idx]?.arguments_array ?? [];  \r\n      //console.log(endpointParams)    \r\n      return html`\r\n        ${endpointParams.map((curParam, curParamIdx) => html` \r\n            <span style=\"color:blue;\">${curParam.name}:</span><span style=\"color:green;\">${this.dataArgumentValue(data,curParamIdx)}</span> `\r\n        )}\r\n        \r\n      ` \r\n    }\r\n    dataArgumentValue(data, index){\r\n      index=(index+1)\r\n      let argFldName=\"\"\r\n      if (index==1){argFldName=\"argument_0\"}else{argFldName=\"argument_\"}\r\n      argFldName=argFldName+index\r\n      \r\n      return data[argFldName]===undefined||data[argFldName].length===0?\"N/A\": data[argFldName]\r\n    }\r\n\r\n    listTestEndpointsList() {\r\n      let userSession = JSON.parse(sessionStorage.getItem(\"userSession\"))\r\n      this.isProcManagement=userSession.isProcManagement\r\n      if (this.isProcManagement===undefined||this.isProcManagement===false){return}\r\n\r\n      let fld = {};\r\n      fld.addBlankValueOnTop = true;\r\n      fld.valuesFromMasterData = {\r\n        propertyNameContainer: \"modules\",\r\n        filterInFirstLevel: true,\r\n        filterPropertyName: \"module_name\",\r\n        contextVariableName: \"moduleName\",\r\n        propertyNameContainerLevel2: \"module_in_solution_actions\",\r\n        propertyKeyName: \"endpoint_name\",\r\n        propertyKeyValueEn: \"endpoint_name\",\r\n        propertyKeyValueEs: \"endpoint_name\",\r\n      };\r\n      //console.log(\"listEntries\", fld);\r\n      let blankEmpty = {\r\n        keyName: \"\",\r\n        keyValue_en: \"\",\r\n        keyValue_es: \"\",\r\n        arguments_array: [],\r\n      };\r\n      let newList = [];\r\n      if (fld === undefined) {\r\n        // return html`<mwc-list-item></mwc-list-item>`\r\n        return [];\r\n      }\r\n      if (\r\n        fld.addBlankValueOnTop !== undefined &&\r\n        fld.addBlankValueOnTop === true\r\n      ) {\r\n        newList.push(blankEmpty);\r\n      }\r\n      if (fld.valuesFromMasterData !== undefined) {\r\n        let MDentriesArr = this.listTestEntriesFromMasterData(\r\n          fld.valuesFromMasterData\r\n        );\r\n        if (MDentriesArr.length > 0) {\r\n          MDentriesArr.forEach((item) => newList.push(item));\r\n        }\r\n      } else if (fld.valuesFromSelectedItem !== undefined) {\r\n        let MDentriesArr = this.listTestEntriesFromSelectedItem(\r\n          fld.valuesFromSelectedItem\r\n        );\r\n        if (MDentriesArr.length > 0) {\r\n          MDentriesArr.forEach((item) => newList.push(item));\r\n        }\r\n      } else {\r\n        fld.items.forEach((item) => newList.push(item));\r\n      }\r\n      if (\r\n        fld.addBlankValueAtBottom !== undefined &&\r\n        fld.addBlankValueAtBottom === true\r\n      ) {\r\n        newList.push(blankEmpty);\r\n      }\r\n\r\n      // console.log(newList);\r\n      return newList;\r\n      // return html`\r\n      //     ${newList.map((c, i) =>\r\n      //     html`<mwc-list-item value=\"${c.keyName}\" ?selected=${i == 0}>${c[\"keyValue_\" + this.lang]}</mwc-list-item>`\r\n      // )}\r\n      // `\r\n    }\r\n    listTestNotificationsList() {\r\n      let userSession = JSON.parse(sessionStorage.getItem(\"userSession\"))\r\n      this.isProcManagement=userSession.isProcManagement\r\n      if (this.isProcManagement===undefined||this.isProcManagement===false){return}\r\n\r\n      let fld = {};\r\n      fld.addBlankValueOnTop = true;\r\n      fld.valuesFromMasterData = {\r\n        propertyNameContainer: \"modules\",\r\n        filterInFirstLevel: true,\r\n        filterPropertyName: \"module_name\",\r\n        contextVariableName: \"moduleName\",\r\n        propertyNameContainerLevel2: \"module_error_notifications\",\r\n        propertyKeyName: \"error_code\",\r\n        propertyKeyValueEn: \"error_code\",\r\n        propertyKeyValueEs: \"error_code\",\r\n      };\r\n      //console.log(\"listEntries\", fld);\r\n      let blankEmpty = {\r\n        keyName: \"\",\r\n        keyValue_en: \"\",\r\n        keyValue_es: \"\",\r\n        arguments_array: [],\r\n      };\r\n      let newList = [];\r\n      if (fld === undefined) {\r\n        // return html`<mwc-list-item></mwc-list-item>`\r\n        return [];\r\n      }\r\n      if (\r\n        fld.addBlankValueOnTop !== undefined &&\r\n        fld.addBlankValueOnTop === true\r\n      ) {\r\n        newList.push(blankEmpty);\r\n      }\r\n      if (fld.valuesFromMasterData !== undefined) {\r\n        let MDentriesArr = this.listTestEntriesFromMasterData(\r\n          fld.valuesFromMasterData\r\n        );\r\n        if (MDentriesArr.length > 0) {\r\n          MDentriesArr.forEach((item) => newList.push(item));\r\n        }\r\n      } else if (fld.valuesFromSelectedItem !== undefined) {\r\n        let MDentriesArr = this.listTestEntriesFromSelectedItem(\r\n          fld.valuesFromSelectedItem\r\n        );\r\n        if (MDentriesArr.length > 0) {\r\n          MDentriesArr.forEach((item) => newList.push(item));\r\n        }\r\n      } else {\r\n        fld.items.forEach((item) => newList.push(item));\r\n      }\r\n      if (\r\n        fld.addBlankValueAtBottom !== undefined &&\r\n        fld.addBlankValueAtBottom === true\r\n      ) {\r\n        newList.push(blankEmpty);\r\n      }\r\n\r\n      // console.log(newList);\r\n      return newList;\r\n      // return html`\r\n      //     ${newList.map((c, i) =>\r\n      //     html`<mwc-list-item value=\"${c.keyName}\" ?selected=${i == 0}>${c[\"keyValue_\" + this.lang]}</mwc-list-item>`\r\n      // )}\r\n      // `\r\n    }\r\n\r\n    listEntriesForUom(fld, fldName) {\r\n      console.log(\"listEntriesForUom\");\r\n      let blankEmpty = { keyName: \"\", keyValue_en: \"\", keyValue_es: \"\" };\r\n      let defValue = \"\";\r\n      let newList = [];\r\n      if (fld === undefined) {\r\n        return html`<mwc-list-item></mwc-list-item>`;\r\n      }\r\n      if (\r\n        fld.addBlankValueOnTop !== undefined &&\r\n        fld.addBlankValueOnTop === true\r\n      ) {\r\n        newList.push(blankEmpty);\r\n      }\r\n      if (fld.the_default_value !== undefined) {\r\n        if (\r\n          fld.the_default_value.default_value !== undefined &&\r\n          fldObj[keyName].default_value !== null\r\n        ) {\r\n          blankEmpty = {\r\n            keyName: fld.the_default_value.default_value,\r\n            keyValue_en: fld.the_default_value.default_value,\r\n            keyValue_es: fld.default_value.default_value,\r\n          };\r\n          newList.push(blankEmpty);\r\n        }\r\n        if (\r\n          fld.the_default_value.selObjectPropertyName !== undefined &&\r\n          fld.the_default_value.selObjectPropertyName !== null\r\n        ) {\r\n          let val = \"\";\r\n          if (\r\n            this.selectedItems !== undefined &&\r\n            this.selectedItems.length > 0\r\n          ) {\r\n            val =\r\n              this.selectedItems[0][\r\n                fld.the_default_value.selObjectPropertyName\r\n              ];\r\n            const valueArray = val.split(\"|\");\r\n            valueArray.forEach((item) => {\r\n              const blankEmpty = {\r\n                keyName: item,\r\n                keyValue_en: item,\r\n                keyValue_es: item,\r\n              };\r\n              const isDuplicate = newList.some((item) => item.keyName === item);\r\n              if (!isDuplicate) {\r\n                if (\r\n                  this[fldName] !== null &&\r\n                  this[fldName].value.length === 0\r\n                ) {\r\n                  defValue = item;\r\n                  this[fldName].value = item;\r\n                }\r\n                newList.push(blankEmpty);\r\n              }\r\n            });\r\n          }\r\n        }\r\n        if (\r\n          fld.the_default_value.internalVariableObjName !== undefined &&\r\n          fld.the_default_value.internalVariableObjName !== null &&\r\n          fld.internalVariableObjProperty !== undefined &&\r\n          fld.internalVariableObjProperty !== null\r\n        ) {\r\n          let val =\r\n            this[fld.the_default_value.internalVariableObjName][0][\r\n              fld.internalVariableObjProperty\r\n            ];\r\n          blankEmpty = { keyName: val, keyValue_en: val, keyValue_es: val };\r\n          const isDuplicate = newList.some((item) => item.keyName === val);\r\n          if (!isDuplicate) {\r\n            newList.push(blankEmpty);\r\n          }\r\n          //                this[keyName[0]].value=this[fld.internalVariableObjName][0][fld.internalVariableObjProperty]\r\n        }\r\n      }\r\n      if (fld.list_values !== undefined) {\r\n        if (\r\n          fld.list_values.default_value !== undefined &&\r\n          fldObj[keyName].default_value !== null\r\n        ) {\r\n          blankEmpty = {\r\n            keyName: fld.list_values.default_value,\r\n            keyValue_en: fld.list_values.default_value,\r\n            keyValue_es: fld.list_values.default_value,\r\n          };\r\n          newList.push(blankEmpty);\r\n        }\r\n        if (\r\n          fld.list_values.selObjectPropertyName !== undefined &&\r\n          fld.list_values.selObjectPropertyName !== null\r\n        ) {\r\n          let val =\r\n            this.selectedItems[0][fld.list_values.selObjectPropertyName];\r\n          const valueArray = val.split(\"|\");\r\n          valueArray.forEach((item) => {\r\n            const blankEmpty = {\r\n              keyName: item,\r\n              keyValue_en: item,\r\n              keyValue_es: item,\r\n            };\r\n            const isDuplicate = newList.some((item) => item.keyName === item);\r\n            if (!isDuplicate) {\r\n              newList.push(blankEmpty);\r\n            }\r\n          });\r\n        }\r\n        if (\r\n          fld.list_values.internalVariableObjName !== undefined &&\r\n          fld.list_values.internalVariableObjName !== null &&\r\n          fld.internalVariableObjProperty !== undefined &&\r\n          fld.internalVariableObjProperty !== null\r\n        ) {\r\n          let val =\r\n            this[fld.list_values.internalVariableObjName][0][\r\n              fld.internalVariableObjProperty\r\n            ];\r\n          blankEmpty = { keyName: val, keyValue_en: val, keyValue_es: val };\r\n          const isDuplicate = newList.some((item) => item.keyName === val);\r\n          if (!isDuplicate) {\r\n            newList.push(blankEmpty);\r\n          }\r\n        }\r\n      }\r\n      return html`\r\n        ${newList.map(\r\n          (c, i) =>\r\n            html`<mwc-list-item\r\n              value=\"${c.keyName}\"\r\n              defval=\"${defValue}\"\r\n              ?selected=${fld.addBlankValueOnTop !== undefined &&\r\n              fld.addBlankValueOnTop === true &&\r\n              fld.default_value !== undefined\r\n                ? i == 1\r\n                : i == 0}\r\n              >${c[\"keyValue_\" + this.lang]}</mwc-list-item\r\n            >`\r\n        )}\r\n      `;\r\n    }\r\n\r\n    getProcMasterData() {\r\n      if (\r\n        this.isProcManagement === undefined ||\r\n        this.isProcManagement !== true\r\n      ) {\r\n        let userSession = JSON.parse(sessionStorage.getItem(\"userSession\"));\r\n        console.log(\r\n          \"userSession.procedures_list.procedures\",\r\n          userSession.procedures_list.procedures\r\n        );\r\n        let findProc = [];\r\n        if (this.area !== undefined) {\r\n          findProc = userSession.procedures_list.procedures.filter(\r\n            (m) => m.procInstanceName == this.area\r\n          );\r\n        } else {\r\n          findProc = userSession.procedures_list.procedures.filter(\r\n            (m) => m.procInstanceName == this.procInstanceName\r\n          );\r\n        }\r\n        // if (!this.config.local) {\r\n        //   if (findProc.length) {\r\n        //     ProceduresModel[this.procName] = findProc[0].procModel\r\n        //   }\r\n        // }\r\n        //        this.procInstanceModel=ProceduresModel[this.procName]\r\n        if (\r\n          findProc !== undefined &&\r\n          findProc.length > 0 &&\r\n          findProc[0].master_data !== undefined\r\n        ) {\r\n          this.masterData = findProc[0].master_data;\r\n          console.log(\"master data\", this.masterData);\r\n        }\r\n      } else {\r\n        let userSession = JSON.parse(sessionStorage.getItem(\"userSession\"));\r\n        this.masterData = userSession.proc_management_masterdata;\r\n      }\r\n    }\r\n\r\n    listTestEntriesFromMasterData(fldMDDef) {\r\n      this.isProcManagement=true\r\n      this.getProcMasterData();\r\n      return this.buildTestFrontListFromData(fldMDDef, this.masterData);\r\n    }\r\n\r\n    listTestEntriesFromSelectedItem(fldMDDef) {\r\n      let data = [];\r\n\r\n      if (\r\n        fldMDDef !== null &&\r\n        fldMDDef.defval !== undefined &&\r\n        fldMDDef.defval !== null\r\n      ) {\r\n        alert(fldMDDef.defval);\r\n      }\r\n      if (\r\n        fldMDDef !== null &&\r\n        fldMDDef !== undefined &&\r\n        fldMDDef.default_value !== undefined &&\r\n        fldMDDef.default_value !== null\r\n      ) {\r\n        data = fldMDDef.default_value;\r\n      }\r\n      if (\r\n        fldMDDef !== null &&\r\n        fldMDDef !== undefined &&\r\n        fldMDDef.selObjectPropertyName !== undefined &&\r\n        fldMDDef.selObjectPropertyName !== null &&\r\n        fldMDDef !== null\r\n      ) {\r\n        data = this.selectedItems[0][fldMDDef.selObjectPropertyName];\r\n      }\r\n      if (\r\n        fldMDDef !== null &&\r\n        fldMDDef !== undefined &&\r\n        fldMDDef.internalVariableObjName !== undefined &&\r\n        fldMDDef.internalVariableObjName !== null &&\r\n        fldMDDef.internalVariableObjProperty !== undefined &&\r\n        fldMDDef.internalVariableObjProperty !== null\r\n      ) {\r\n        data =\r\n          this[fldMDDef.internalVariableObjName][0][\r\n            fldMDDef.internalVariableObjProperty\r\n          ];\r\n      }\r\n      if (\r\n        fldMDDef !== null &&\r\n        fldMDDef !== undefined &&\r\n        fldMDDef.internalVariableSingleObjName !== undefined &&\r\n        fldMDDef.internalVariableSingleObjName !== null &&\r\n        fldMDDef.internalVariableSingleObjProperty !== undefined &&\r\n        fldMDDef.internalVariableSingleObjProperty !== null\r\n      ) {\r\n        data =\r\n          this[fldMDDef.internalVariableSingleObjName][\r\n            fldMDDef.internalVariableSingleObjProperty\r\n          ];\r\n      }\r\n\r\n      let entries = [];\r\n      if (data !== undefined) {\r\n        data.forEach((item) => {\r\n          console.log(\r\n            \"item\",\r\n            item,\r\n            \"fldMDDef.propertyNameContainer.propertyKeyName\",\r\n            fldMDDef.propertyKeyName\r\n          );\r\n          let blankEmpty = { keyName: \"\", keyValue_en: \"\", keyValue_es: \"\" };\r\n          blankEmpty.keyName = item[fldMDDef.propertyKeyName];\r\n\r\n          let valEn = \"\";\r\n          fldMDDef.propertyKeyValueEn.forEach((item2) => {\r\n            if (valEn.length > 0) {\r\n              valEn = valEn + \"-\";\r\n            }\r\n            valEn = valEn + item[item2];\r\n          });\r\n          blankEmpty.keyValue_en = valEn;\r\n          let valEs = \"\";\r\n          fldMDDef.propertyKeyValueEn.forEach((item2) => {\r\n            if (valEs.length > 0) {\r\n              valEs = valEs + \"-\";\r\n            }\r\n            valEs = valEs + item[item2];\r\n          });\r\n          blankEmpty.keyValue_es = valEs;\r\n          console.log(\"blankEmpty\", blankEmpty);\r\n          entries.push(blankEmpty);\r\n        });\r\n      }\r\n      return entries;\r\n      //return this.buildTestFrontListFromData(fldMDDef, this.selectedProcedureInstance)\r\n    }\r\n\r\n    buildTestFrontListFromData(fldMDDef, data) {\r\n      if (data === undefined) {\r\n        return [];\r\n      }\r\n\r\n      if (fldMDDef==undefined&&(\r\n        this.actionBeingPerformedModel.dialogInfo === undefined ||\r\n        this.actionBeingPerformedModel.dialogInfo.name === undefined ||\r\n        this.actionBeingPerformedModel.dialogInfo.name.toString().toUpperCase() !== \"TESTSCRIPTNEWSTEPDIALOG\")\r\n      ) {\r\n        return false;\r\n      }\r\n      let userSession = JSON.parse(sessionStorage.getItem(\"userSession\"))\r\n      this.isProcManagement=userSession.isProcManagement\r\n      if (this.isProcManagement===undefined||this.isProcManagement===false){return}\r\n      //console.log(\"masterData\", data);\r\n      //console.log(\"actionBeingPerformedModel\", this.actionBeingPerformedModel);\r\n      let entries = [];\r\n\r\n      if (data[fldMDDef.propertyNameContainer] === undefined) {\r\n        alert('Property ' +fldMDDef.propertyNameContainer +' not found in Master Data');\r\n        return entries;\r\n      }\r\n      if (\r\n        fldMDDef.filterInFirstLevel === undefined ||\r\n        fldMDDef.filterInFirstLevel !== true\r\n      ) {\r\n        data[fldMDDef.propertyNameContainer].forEach((item) => {\r\n          // console.log('item', item, 'fldMDDef.propertyNameContainer.propertyKeyName', fldMDDef.propertyKeyName)\r\n          let blankEmpty = {\r\n            keyName: \"\",\r\n            keyValue_en: \"\",\r\n            keyValue_es: \"\",\r\n            arguments_array: [],\r\n          };\r\n          blankEmpty.keyName = item[fldMDDef.propertyKeyName];\r\n          blankEmpty.keyValue_en = item[fldMDDef.propertyKeyValueEn]!==undefined? item[fldMDDef.propertyKeyValueEn]: item[fldMDDef.propertyKeyName];\r\n          blankEmpty.keyValue_es = item[fldMDDef.propertyKeyValueEs]!==undefined? item[fldMDDef.propertyKeyValueEs]: item[fldMDDef.propertyKeyName];\r\n          blankEmpty.arguments_array = item.arguments_array;\r\n          //console.log('blankEmpty', blankEmpty)\r\n          entries.push(blankEmpty);\r\n        });\r\n      } else {\r\n        // if ((fldMDDef.elementName===undefined||fldMDDef.elementName===null)&&\r\n        //     (fldMDDef.propertyNameContainerLevelfixValue===undefined||fldMDDef.propertyNameContainerLevelfixValue===null)\r\n        //     (fldMDDef.contextVariableName===undefined||fldMDDef.contextVariableName===null)\r\n        //     ((fldMDDef.internalVariableSimpleObjName===undefined||fldMDDef.internalVariableSimpleObjName===null) || (fldMDDef.internalVariableSimpleObjProperty===undefined||fldMDDef.internalVariableSimpleObjProperty===null))\r\n        //     ){\r\n        //     alert('Property elementName or propertyNameContainerLevelfixValue is mandatory when filterInFirstLevel=true. Review model definition')\r\n        //     return entries\r\n        // }\r\n        let filterValue = undefined;\r\n        if (fldMDDef.propertyNameContainerLevelfixValue !== undefined) {\r\n          filterValue = fldMDDef.propertyNameContainerLevelfixValue;\r\n        } else if (fldMDDef.elementName !== undefined) {\r\n          filterValue = this[fldMDDef.elementName].value;\r\n        } else if (fldMDDef.contextVariableName !== undefined) {\r\n          filterValue = this[fldMDDef.contextVariableName];\r\n        } else if (\r\n          fldMDDef.internalVariableSimpleObjName !== undefined &&\r\n          fldMDDef.internalVariableSimpleObjProperty !== undefined\r\n        ) {\r\n          filterValue =\r\n            this[fldMDDef.internalVariableSimpleObjName][\r\n              fldMDDef.internalVariableSimpleObjProperty\r\n            ];\r\n        }\r\n        let filterPropertyName = \"name\";\r\n        if (fldMDDef.filterPropertyName !== undefined) {\r\n          filterPropertyName = fldMDDef.filterPropertyName;\r\n        }\r\n        if (filterValue === undefined) {\r\n          return entries;\r\n        }\r\n        let result = data[fldMDDef.propertyNameContainer].find(\r\n          (item) => item[filterPropertyName] === filterValue\r\n        );\r\n        if (result === undefined) {\r\n          return entries;\r\n        }\r\n        //alert(filterValue)\r\n        // if (fldMDDef.propertyNameContainerLevel2fixValue!==undefined&&fldMDDef.propertyNameContainerLevel3){\r\n        //     entries=getListInLevel3(fldMDDef, result[fldMDDef.propertyNameContainerLevel2])\r\n        //     return entries\r\n        // }\r\n        result[fldMDDef.propertyNameContainerLevel2].forEach((item) => {\r\n          // console.log('item', item, 'fldMDDef.propertyNameContainer.propertyKeyName', fldMDDef.propertyKeyName)\r\n          let blankEmpty = {\r\n            keyName: \"\",\r\n            keyValue_en: \"\",\r\n            keyValue_es: \"\",\r\n            arguments_array: [],\r\n          };\r\n          blankEmpty.keyName = item[fldMDDef.propertyKeyName];\r\n          blankEmpty.keyValue_en = item[fldMDDef.propertyKeyValueEn]!==undefined? item[fldMDDef.propertyKeyValueEn]: item[fldMDDef.propertyKeyName];\r\n          blankEmpty.keyValue_es = item[fldMDDef.propertyKeyValueEs]!==undefined? item[fldMDDef.propertyKeyValueEs]: item[fldMDDef.propertyKeyName];\r\n          blankEmpty.arguments_array = item.arguments_array;\r\n          entries.push(blankEmpty);\r\n        });\r\n        //console.log(\"entries at end\", entries);\r\n        return entries;\r\n      }\r\n      //let blankEmpty={keyName:\"1\", keyValue_en:\"2\", keyValue_es:\"3\"}\r\n      //entries.push(blankEmpty)\r\n      return entries;\r\n    }\r\n    getListInLevel3(fldMDDef, level2Arr) {\r\n      let level3Arr = level2Arr.filter(\r\n        (p) =>\r\n          p[propertyNameContainerLevel2PropertyKeyName] ==\r\n          fldMDDef.propertyNameContainerLevel2fixValue\r\n      );\r\n      level3Arr[fldMDDef.propertyNameContainerLevel3].forEach((item) => {\r\n        console.log(\r\n          \"item\",\r\n          item,\r\n          \"fldMDDef.propertyNameContainer.propertyKeyName\",\r\n          fldMDDef.propertyNameContainerLevel2PropertyKeyName\r\n        );\r\n        let blankEmpty = { keyName: \"\", keyValue_en: \"\", keyValue_es: \"\" };\r\n        blankEmpty.keyName = item[fldMDDef.propertyKeyName];\r\n        blankEmpty.keyValue_en = item[fldMDDef.propertyKeyValueEn];\r\n        blankEmpty.keyValue_es = item[fldMDDef.propertyKeyValueEs];\r\n        console.log(\"blankEmpty\", blankEmpty);\r\n        entries.push(blankEmpty);\r\n      });\r\n    }\r\n    fldDisabled() {\r\n      return false;\r\n    }\r\n\r\n    fieldLabel(fld) {\r\n      let fldLbl = fld[\"label_\" + this.lang];\r\n      if (fld.optional === undefined || fld.optional === false) {\r\n        fldLbl = \"* \" + fldLbl;\r\n      }\r\n      return fldLbl;\r\n    }\r\n\r\n    get text1() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#text1\");\r\n    }\r\n    get text2() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#text2\");\r\n    }\r\n    get text3() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#text3\");\r\n    }\r\n    get text4() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#text4\");\r\n    }\r\n    get text5() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#text5\");\r\n    }\r\n    get text6() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#text6\");\r\n    }\r\n    get text7() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#text7\");\r\n    }\r\n    get text8() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#text8\");\r\n    }\r\n    get text9() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#text9\");\r\n    }\r\n    get text10() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#text10\");\r\n    }\r\n    get checkbox1() {\r\n      return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox1\");\r\n    }\r\n    get checkbox2() {\r\n      return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox2\");\r\n    }\r\n    get checkbox3() {\r\n      return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox3\");\r\n    }\r\n    get checkbox4() {\r\n      return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox4\");\r\n    }\r\n    get checkbox5() {\r\n      return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox5\");\r\n    }\r\n    get checkbox6() {\r\n      return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox6\");\r\n    }\r\n    get checkbox7() {\r\n      return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox7\");\r\n    }\r\n    get checkbox8() {\r\n      return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox8\");\r\n    }\r\n    get checkbox9() {\r\n      return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox9\");\r\n    }\r\n    get checkbox10() {\r\n      return this.shadowRoot.querySelector(\"mwc-checkbox#checkbox10\");\r\n    }\r\n    get date1() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#date1\");\r\n    }\r\n    get date2() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#date2\");\r\n    }\r\n    get date3() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#date3\");\r\n    }\r\n    get date4() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#date4\");\r\n    }\r\n    get date5() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#date5\");\r\n    }\r\n    get date6() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#date6\");\r\n    }\r\n    get date7() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#date7\");\r\n    }\r\n    get date8() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#date8\");\r\n    }\r\n    get date9() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#date9\");\r\n    }\r\n    get date10() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#date10\");\r\n    }\r\n    get datetime1() {\r\n      return this.shadowRoot.querySelector(\"input#datetime1\");\r\n    }\r\n    get datetime2() {\r\n      return this.shadowRoot.querySelector(\"input#datetime2\");\r\n    }\r\n    get datetime3() {\r\n      return this.shadowRoot.querySelector(\"input#datetime3\");\r\n    }\r\n    get datetime4() {\r\n      return this.shadowRoot.querySelector(\"input#datetime4\");\r\n    }\r\n    get datetime5() {\r\n      return this.shadowRoot.querySelector(\"input#datetime5\");\r\n    }\r\n    get datetime6() {\r\n      return this.shadowRoot.querySelector(\"input#datetime6\");\r\n    }\r\n    get datetime7() {\r\n      return this.shadowRoot.querySelector(\"input#datetime7\");\r\n    }\r\n    get datetime8() {\r\n      return this.shadowRoot.querySelector(\"input#datetime8\");\r\n    }\r\n    get datetime9() {\r\n      return this.shadowRoot.querySelector(\"input#datetime9\");\r\n    }\r\n    get datetime10() {\r\n      return this.shadowRoot.querySelector(\"input#datetime10\");\r\n    }\r\n\r\n    get daterange1dateStart() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#daterange1dateStart\");\r\n    }\r\n    get daterange1dateEnd() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#daterange1dateEnd\");\r\n    }\r\n    get daterange2dateStart() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#daterange2dateStart\");\r\n    }\r\n    get daterange2dateEnd() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#daterange2dateEnd\");\r\n    }\r\n    get daterange3dateStart() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#daterange3dateStart\");\r\n    }\r\n    get daterange3dateEnd() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#daterange3dateEnd\");\r\n    }\r\n    get daterange4dateStart() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#daterange4dateStart\");\r\n    }\r\n    get daterange4dateEnd() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#daterange4dateEnd\");\r\n    }\r\n    get daterange5dateStart() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#daterange5dateStart\");\r\n    }\r\n    get daterange5dateEnd() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#daterange5dateEnd\");\r\n    }\r\n\r\n    get number1() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#number1\");\r\n    }\r\n    get number2() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#number2\");\r\n    }\r\n    get number3() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#number3\");\r\n    }\r\n    get number4() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#number4\");\r\n    }\r\n    get number5() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#number5\");\r\n    }\r\n    get number6() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#number6\");\r\n    }\r\n    get number7() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#number7\");\r\n    }\r\n    get number8() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#number8\");\r\n    }\r\n    get number9() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#number9\");\r\n    }\r\n    get number10() {\r\n      return this.shadowRoot.querySelector(\"mwc-textfield#number10\");\r\n    }\r\n\r\n    get list1() {\r\n      return this.shadowRoot.querySelector(\"mwc-select#list1\");\r\n    }\r\n    get list2() {\r\n      return this.shadowRoot.querySelector(\"mwc-select#list2\");\r\n    }\r\n    get list3() {\r\n      return this.shadowRoot.querySelector(\"mwc-select#list3\");\r\n    }\r\n    get list4() {\r\n      return this.shadowRoot.querySelector(\"mwc-select#list4\");\r\n    }\r\n    get list5() {\r\n      return this.shadowRoot.querySelector(\"mwc-select#list5\");\r\n    }\r\n    get list6() {\r\n      return this.shadowRoot.querySelector(\"mwc-select#list6\");\r\n    }\r\n    get list7() {\r\n      return this.shadowRoot.querySelector(\"mwc-select#list7\");\r\n    }\r\n    get list8() {\r\n      return this.shadowRoot.querySelector(\"mwc-select#list8\");\r\n    }\r\n    get list9() {\r\n      return this.shadowRoot.querySelector(\"mwc-select#list9\");\r\n    }\r\n    get list10() {\r\n      return this.shadowRoot.querySelector(\"mwc-select#list10\");\r\n    }\r\n\r\n    get list1SelectedRow() {\r\n      return this.shadowRoot.querySelector(\"mwc-select#list1SelectedRow\");\r\n    }\r\n    get list2SelectedRow() {\r\n      return this.shadowRoot.querySelector(\"mwc-select#list2SelectedRow\");\r\n    }\r\n    get list3SelectedRow() {\r\n      return this.shadowRoot.querySelector(\"mwc-select#list3SelectedRow\");\r\n    }\r\n\r\n    get listMDprocedureUsers() {\r\n      return this.shadowRoot.querySelector(\"mwc-select#listMDprocedureUsers\");\r\n    }\r\n    get listMDSamplerPersonalAreas() {\r\n      return this.shadowRoot.querySelector(\r\n        \"mwc-select#listMDSamplerPersonalAreas\"\r\n      );\r\n    }\r\n    get listMDvariablesSet() {\r\n      return this.shadowRoot.querySelector(\"mwc-select#listMDvariablesSet\");\r\n    }\r\n    get listMDvariables() {\r\n      return this.shadowRoot.querySelector(\"mwc-select#listMDvariables\");\r\n    }\r\n    get listSelectedStudyIndividuals() {\r\n      return this.shadowRoot.querySelector(\r\n        \"mwc-select#listSelectedStudyIndividuals\"\r\n      );\r\n    }\r\n    get listSelectedStudyIndividualSamples() {\r\n      return this.shadowRoot.querySelector(\r\n        \"mwc-select#listSelectedStudyIndividualSamples\"\r\n      );\r\n    }\r\n\r\n    get dynamicElement1() {\r\n      return this.shadowRoot.querySelector(\"#dynamicElement1\");\r\n    }\r\n\r\n    setNumberMask(e, fieldDef) {\r\n      if (\r\n        fieldDef.min_allowed !== undefined &&\r\n        typeof fieldDef.min_allowed == \"number\" &&\r\n        e.target.value < fieldDef.min_allowed\r\n      ) {\r\n        e.target.value = fieldDef.min_allowed;\r\n        this[e.currentTarget.id].value = fieldDef.min_allowed;\r\n        return;\r\n      }\r\n      if (\r\n        fieldDef.max_allowed !== undefined &&\r\n        typeof fieldDef.max_allowed == \"number\" &&\r\n        e.target.value > fieldDef.max_allowed\r\n      ) {\r\n        e.target.value = fieldDef.max_allowed;\r\n        this[e.currentTarget.id].value = fieldDef.max_allowed;\r\n        return;\r\n      }\r\n      // make sure the decimal length <= max_dp when manual input\r\n      if (fieldDef.max_dp !== undefined) {\r\n        let v = e.target.value.split(\".\");\r\n        if (v.length > 1 && v[1].length > fieldDef.max_dp) {\r\n          v[1] = v[1].substring(0, fieldDef.max_dp);\r\n          e.target.value = Number(v.join(\".\"));\r\n          this[e.currentTarget.id].value = Number(v.join(\".\"));\r\n        }\r\n      }\r\n    }\r\n\r\n    fldDefaultValue(fldDef) {\r\n      let curArgName=\"\"\r\n      //console.log('fldDefaultValue', fldDef)\r\n      if (fldDef.default_value) {\r\n        return fldDef.default_value;\r\n      } else if (\r\n        fldDef.internalVariableSimpleObjName &&\r\n        fldDef.internalVariableSimpleObjProperty\r\n      ) {\r\n        if (\r\n          this[fldDef.internalVariableSimpleObjName] === undefined ||\r\n          this[fldDef.internalVariableSimpleObjName][\r\n            fldDef.internalVariableSimpleObjProperty\r\n          ] === undefined\r\n        ) {\r\n          let msg = \"\";\r\n          if (\r\n            this[fldDef.internalVariableSimpleObjName][\r\n              fldDef.internalVariableSimpleObjProperty\r\n            ] === undefined\r\n          ) {\r\n            msg =\r\n              \"The object \" +\r\n              fldDef.internalVariableSimpleObjName +\r\n              \" has no one property called \" +\r\n              fldDef.internalVariableSimpleObjProperty;\r\n            alert(msg);\r\n          } else {\r\n            msg =\r\n              \"there is no object called \" +\r\n              fldDef.internalVariableSimpleObjName +\r\n              \" in this view\";\r\n            alert(msg);\r\n          }\r\n          return \"ERROR: \" + msg;\r\n        }\r\n        return this[fldDef.internalVariableSimpleObjName][\r\n          fldDef.internalVariableSimpleObjProperty\r\n        ];\r\n      } else if (\r\n        fldDef.internalVariableObjName &&\r\n        fldDef.internalVariableObjProperty\r\n      ) {\r\n        if (\r\n          this[fldDef.internalVariableObjName] === undefined ||\r\n          this[fldDef.internalVariableObjName][0][\r\n            fldDef.internalVariableObjProperty\r\n          ] === undefined\r\n        ) {\r\n          let msg = \"\";\r\n          if (\r\n            this[fldDef.internalVariableObjName][0][\r\n              fldDef.internalVariableObjProperty\r\n            ] === undefined\r\n          ) {\r\n            msg =\r\n              \"The object \" +\r\n              fldDef.internalVariableObjName +\r\n              \" has no one property called \" +\r\n              fldDef.internalVariableObjProperty;\r\n            alert(msg);\r\n            //console.log(msg, this[fldDef.internalVariableObjName][0])\r\n          } else {\r\n            msg =\r\n              \"there is no object called \" +\r\n              fldDef.internalVariableObjName +\r\n              \" in this view\";\r\n            alert(msg);\r\n          }\r\n          //    alert('No family selected')\r\n          return \"ERROR: \" + msg;\r\n        }\r\n        return this[fldDef.internalVariableObjName][0][\r\n          fldDef.internalVariableObjProperty\r\n        ];\r\n      } else if (fldDef.element) {\r\n      } else if (fldDef.defaultValue) {\r\n        if (fldDef.isAdhocField !== undefined && fldDef.isAdhocField === true) {\r\n          curArgName = jsonParam[fldDef.argumentName];\r\n          if (curArgName === undefined) {\r\n            curArgName = \"\";\r\n          }\r\n          if (curArgName.length > 0) {\r\n            curArgName = curArgName + \"|\";\r\n          }\r\n          curArgName = curArgName + fldDef.defaultValue;\r\n          if (fldDef.fieldType !== undefined) {\r\n            curArgName = curArgName + \"*\" + fldDef.fieldType;\r\n          }\r\n          return curArgName;\r\n        } else {\r\n          return fldDef.defaultValue; // get value from default value (i.e incubator)\r\n        }\r\n      } else if (fldDef.selObjectPropertyName) {\r\n        return selObject[fldDef.selObjectPropertyName]; // get value from selected item\r\n      } else if (fldDef.targetValue) {\r\n        return targetValue[fldDef.argumentName]; // get value from target element passed\r\n      } else if (fldDef.fixValue) {\r\n        return fldDef.fixValue;\r\n      } else if (fldDef.contextVariableName) {\r\n        return this[fldDef.contextVariableName];\r\n      } else {\r\n        return \"\";\r\n      }\r\n    }\r\n  };\r\n}\r\n","import { html, nothing } from 'lit';\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js';\r\nimport { ButtonsFunctions } from '../Buttons/ButtonsFunctions';\r\nimport { GridFunctions } from \"../grid_with_buttons/GridFunctions\";\r\nimport { FeaturesDynamicFieldValue } from '../../features/dynamicFieldValue';\r\nimport '../MultiSelect';\r\nimport '../grid_with_buttons/gridCellTooltip'\r\n\r\nexport function ReadOnlyTableParts(base) {\r\n    let contextMenu = undefined;\r\n    return class extends FeaturesDynamicFieldValue(GridFunctions(ButtonsFunctions(base))) {\r\n        popupFilterElement(elem, dataArr){\r\n          elem.filterElements=[{\"name\": \"lot_name\", \"type\": \"text\"}, \r\n          {\"name\": \"references\", \"type\": \"multilist\", \"list properties\":\"blablabla\"}]\r\n\r\n        }\r\n        applyFilter(elem, dataArr){\r\n\r\n        }\r\n        setupReadOnlyTable(elem, dataArr, isSecondLevel, directData, theme, parentData) {\r\n            if (elem===undefined){\r\n                return\r\n              }\r\n              parentData=this.selectedItemInView //sessionStorage.getItem('rowSelectedData')\r\n              //console.log('isSecondLevel', isSecondLevel, 'parentData', parentData)\r\n              let tmp=\"\"\r\n              if (elem.theme===undefined){\r\n                tmp = \"TRAZiT-UsersArea\";\r\n              }else{\r\n                tmp = elem.theme;\r\n              }\r\n              if(elem.endPointResponseObject == \"procedure_user_requirements_tree_child\") {\r\n                tmp = sessionStorage.getItem('tableTheme');\r\n              }\r\n              if(typeof(tmp) != \"undefined\") {\r\n                sessionStorage.setItem('tableTheme', tmp);\r\n              }\r\n              if(typeof(tmp) == \"undefined\") {\r\n                tmp = \"TRAZiT-UsersArea\";\r\n                sessionStorage.setItem('tableTheme', tmp);\r\n              }\r\n              const endPointResponseObject = elem.endPointResponseObject;\r\n              const selectedIdx = this.selectedTableIndex[endPointResponseObject];\r\n        \r\n              if (isSecondLevel === undefined) {\r\n                isSecondLevel = false;\r\n              }\r\n              if (directData !== undefined) {\r\n                dataArr = directData;\r\n              } else {\r\n                dataArr = this.getDataFromRoot(elem, dataArr);\r\n              }\r\n              let cleanArr=[]\r\n              if (!this.dataContainsRequiredProperties(elem, dataArr)) {\r\n                return {'theme':theme, 'dataArr':cleanArr, 'tmp':tmp, 'selectedIdx': selectedIdx};\r\n              }\r\n        \r\n              if (dataArr === undefined || !Array.isArray(dataArr)) {\r\n                return {'theme':theme, 'dataArr':cleanArr, 'tmp':tmp, 'selectedIdx': selectedIdx};\r\n              } else {\r\n                if(dataArr.length > 0 && dataArr[0].action_name) {\r\n                  sessionStorage.setItem('steps', JSON.stringify(dataArr))\r\n                }\r\n              }\r\n              return {'theme':theme, 'dataArr':dataArr, 'tmp':tmp, 'selectedIdx': selectedIdx};\r\n        }\r\n        \r\n        prepareTableData(elem, dataArr, directData) {\r\n            // ...data preparation logic here...\r\n            return dataArr;\r\n        }\r\n        \r\n        getTableStyles(elem) {\r\n            return html`\r\n            <style>\r\n            * {\r\n              box-sizing: border-box;\r\n            }\r\n  \r\n            .title {\r\n              color: #2989d8;\r\n              font-size: 18px;\r\n              font-weight: bold;\r\n            }\r\n  \r\n            table.TRAZiT-DefinitionArea-table1 thead tr th {\r\n              background-color: #2989d8;\r\n              color: white;\r\n            }\r\n  \r\n            table.TRAZiT-UsersArea thead tr th {\r\n              background-color: #b6d6f3;\r\n              color: rgb(0 0 0 / 55%);\r\n              font-size: 16px;\r\n              font-family: Montserrat;\r\n            }\r\n  \r\n            table {\r\n              border-collapse: collapse;\r\n              width: 100%;\r\n              font-family: Montserrat;\r\n              font-size: 16px;\r\n              border solid 1px rgba(78, 162, 240, 0.69);\r\n            }\r\n  \r\n            table.TRAZiT-UsersArea tr {\r\n              border: solid 1px rgba(78, 162, 240, 0.69); \r\n              border-bottom: 1px solid #dddddd;\r\n            }\r\n  \r\n            tr {\r\n              border: 1px solid #dddddd;\r\n              text-align: center;\r\n              color: #808080;\r\n            }\r\n  \r\n            table.TRAZiT-UsersArea tr:nth-child(even) {\r\n              /* background-color: white; */\r\n            }\r\n  \r\n            table.TRAZiT-UsersArea tr:last-child {\r\n              /* border: none; */\r\n            }\r\n         \r\n            table.TRAZiT-UsersArea thead {\r\n              border-bottom: 1px solid #dddddd;\r\n            }\r\n  \r\n            tr:nth-child(even) {\r\n              background-color: rgba(214, 233, 248, 0.37);\r\n            }\r\n  \r\n            table.TRAZiT-DefinitionArea th {\r\n              padding: 5px 5px;\r\n              border: 1px solid #dddddd !important;\r\n            }\r\n  \r\n            td, th {\r\n              padding: 5px 5px;\r\n              border: 1px solid #dddddd !important;\r\n            }\r\n  \r\n            table.TRAZiT-UsersArea td, th {\r\n              border: none !important;\r\n            }\r\n  \r\n            tr {\r\n              cursor: pointer;\r\n            }\r\n  \r\n            table#${elem.endPointResponseObject} tr:hover td {\r\n              background-color: #2989d830 !important;\r\n            }\r\n  \r\n            mwc-icon-button {\r\n              --mdc-icon-button-size: 35px;\r\n              --mdc-icon-size: 25px;\r\n            }\r\n  \r\n            .hidden {\r\n              display: none;\r\n            }\r\n            .selected {\r\n              background: linear-gradient(45deg, #54ccef6e, #03a9f400);\r\n              /* background-color: #148cfa36 !important; */\r\n            }\r\n  \r\n            .js-context-popup {\r\n              background-color: #24C0EB;\r\n              color: white;\r\n              width: 130px;\r\n              position: fixed;\r\n              z-index: 10;\r\n              display:none;\r\n            }\r\n            .js-context-popup div {\r\n              padding: 8px 12px;\r\n              border: 2px solid #03A9F4;\r\n              cursor: pointer;\r\n            }\r\n            .js-context-popup div:first-child {\r\n              border-botton: none !important;\r\n            }\r\n  \r\n            .circle {\r\n              width: 20px;\r\n              height: 20px;\r\n              line-height: 20px;\r\n              text-align: center;\r\n              background-color: #24C0EB;\r\n              border-radius: 50%;\r\n              color: white;\r\n              float: left;\r\n            }\r\n            .green {\r\n              color: green;\r\n            }\r\n            .red { \r\n              color: red;\r\n            }\r\n            .yellow {\r\n              color: orange;\r\n            }\r\n            span.title {\r\n                color: rgb(35, 163, 198);\r\n                margin-top: 10px;\r\n                font-weight: bold;\r\n            }\r\n            span.title.true {\r\n                font-size: 18px;\r\n            }\r\n            span.title.false {\r\n                font-size: 18px;\r\n            }  \r\n            .w3-responsive {\r\n                display: block;\r\n                overflow-x: auto;\r\n              }\r\n              .w3-container,\r\n              .w3-panel {\r\n                padding: 0.01em 4px;\r\n              }\r\n              .w3-panel {\r\n                margin-top: 16px;\r\n                margin-bottom: 16px;\r\n              }\r\n              .w3-container:after,\r\n              .w3-container:before,\r\n              .w3-panel:after,\r\n              .w3-panel:before,\r\n              .w3-row:after,\r\n              .w3-row:before,\r\n              .w3-row-padding:after,\r\n              .w3-row-padding:before,\r\n              .w3-blue,\r\n              .w3-hover-blue:hover {\r\n                color: rgba(\r\n                  7,\r\n                  13,\r\n                  22,\r\n                  0.94\r\n                ) !important;\r\n                background-color: #2196f3 !important;\r\n              }\r\n              .w3-background,\r\n              .w3-hover-blue:hover {\r\n                color: rgba(\r\n                  7,\r\n                  13,\r\n                  22,\r\n                  0.94\r\n                ) !important;\r\n                background-color: #ffdedd !important;\r\n              }\r\n              .title {\r\n                font-size: 8px;\r\n                font-weight: 500;\r\n                letter-spacing: 0;\r\n                line-height: 1.5em;\r\n                padding-bottom: 15px;\r\n                position: relative;\r\n                font-family: Montserrat;\r\n                font-color: rgb(\r\n                  94,\r\n                  145,\r\n                  186\r\n                );\r\n              }                      \r\n            </style>\r\n              \r\n            `;\r\n        }\r\n        \r\n        createTableHeader(elem, parentElement, lang, selectedIdx, handleResetParentFilter) {\r\n            // ...header creation logic here...\r\n            return html`\r\n                <thead>\r\n                <tr>\r\n                ${elem.columns.map((fld, idx) => {\r\n                    if(idx === 0 && parentElement !== null && parentElement !== undefined) {\r\n                        return html` \r\n                        <th>\r\n                            <mwc-icon-button \r\n                            class=\"icon resetBtn\" \r\n                            icon=\"refresh\" \r\n                            @click=${() => handleResetParentFilter(parentElement)}\r\n                            ></mwc-icon-button>\r\n\r\n                            ${fld[\"label_\" + lang]} <span class=\"resize-handle\"></span>\r\n                        </th>\r\n                        `;\r\n                    }\r\n                    return html` <th>${fld[\"label_\" + lang]} <span class=\"resize-handle\"></span></th>`;\r\n                    }\r\n                )}\r\n                ${elem.row_buttons === undefined\r\n                    ? html`<th></th>` \r\n                    : html`\r\n                    <th>\r\n                        ${lang === \"en\" ? \"Actions\" : \"Acciones\"} \r\n                        <span class=\"resize-handle\"></span>\r\n                    </th>\r\n                    `}\r\n                </tr>\r\n                </thead>    \r\n            `;\r\n        }\r\n        _toggleDetail(e, index) {\r\n            e.stopPropagation();\r\n            const detailElement = this.shadowRoot.querySelector(`#detail${index}`);\r\n            if (detailElement) {\r\n              detailElement.toggle(); // Make sure `toggle` is a valid method on your element\r\n            } else {\r\n              console.error(`Element with id 'detail${index}' not found`);\r\n            }\r\n          }\r\n\r\n        \r\n        addViewTitle(elem, alternativeTitle, isSecondLevel){\r\n            //console.log('addViewTitle', elem, alternativeTitle, isSecondLevel)\r\n            return html`                \r\n                ${alternativeTitle !== undefined?html`\r\n                    <p>\r\n                        <span class=\"title ${isSecondLevel}\"\r\n                        >${alternativeTitle}</span\r\n                        >\r\n                    </p>`\r\n                : html`\r\n                    ${elem === undefined || elem.title === undefined\r\n                    ? nothing: html` <p><span class=\"title ${isSecondLevel}\">${elem.title[\"label_\" + this.lang]}</span></p>`}\r\n                `}  \r\n            `\r\n        }\r\n        getActionsButtons(elem, dataArr, selectedItems){\r\n          //console.log('getActionsButtons', dataArr)\r\n            return html`\r\n                <div class=\"layout horizontal center flex wrap\">\r\n                    ${this.getButton(elem, dataArr, selectedItems, true)}\r\n                </div>\r\n            `            \r\n        }\r\n\r\n        dataContainsRequiredProperties(elem, dataArr) {\r\n            //console.log('dataContainsRequiredProperties', elem.mantadoryPropertiesInVariableName, dataArr[0])\r\n            if (dataArr === undefined) {\r\n              return false;\r\n            }\r\n            if (elem.mantadoryPropertiesInVariableName === undefined) {\r\n              return true;\r\n            }\r\n            //let rValue=true\r\n            const rValue = elem.mantadoryPropertiesInVariableName.every((curProp) => {\r\n              if (Array.isArray(dataArr)){\r\n                return dataArr[0]!==undefined && dataArr[0][curProp] !== undefined;\r\n              }else{\r\n                return dataArr[curProp] !== undefined;\r\n              }\r\n            });\r\n            //if (rValue===undefined){return true}\r\n            return rValue;\r\n          }\r\n      \r\n        renderTable(elem, header, body, styles, title, actionButtons, tmp) {\r\n            return html`${styles} ${title} ${actionButtons} \r\n            <div style=\"display: flex; flex-direction: row; text-align: center; align-items: baseline;\">\r\n            <div style=\"display: flex; flex-direction: column; text-align: center;\">  \r\n            <table id=${elem.endPointResponseObject} class=\"styled-table read-only ${tmp}\">\r\n                ${header} \r\n                ${elem.columns === undefined\r\n                ? html`${elem.hideNoDataMessage !== undefined &&\r\n                  elem.hideNoDataMessage\r\n                    ? \"\"\r\n                    : \"No columns defined\"}`\r\n                : html`\r\n                ${body} \r\n            `}            \r\n            </table>\r\n            </div>\r\n            </div>    \r\n            `\r\n            ;\r\n        }        \r\n        createTableBody(elem, dataArr, lang, selectedIdx, handler, handleTableRowClick, parentData) {\r\n            return html`\r\n                <tbody>\r\n                    <div class=\"js-context-popup\"></div>\r\n                    ${dataArr === undefined || !Array.isArray(dataArr) ? \r\n                    html `No Data` : \r\n                    html`${this.tableBodyHavingData(elem, dataArr, lang, selectedIdx, handler, handleTableRowClick, parentData)}`}\r\n                </tbody>\r\n            `;\r\n        }\r\n        \r\n        handleKeyDown(event) {\r\n            if (event.key === 'Escape') {\r\n              contextMenu.style.display = \"none\";\r\n            }\r\n          }\r\n          // handleScroll(event) {\r\n          //   const popup = this.shadowRoot.querySelector(\".js-context-popup\");\r\n          //   contextMenu = popup;\r\n          //   contextMenu.style.display = \"none\";\r\n          // }\r\n          handleOpenContextMenu(event, rowSelected, elem) {\r\n            console.log('elem', elem)\r\n            event.preventDefault();\r\n            const popup = this.shadowRoot.querySelector(\".js-context-popup\");\r\n            contextMenu = popup;\r\n            popup.innerHTML = \"\";\r\n            let menuOptionsArr=[]\r\n            if (elem.rowButtonsAsContextMenu!==undefined&&elem.rowButtonsAsContextMenu===true){\r\n              menuOptionsArr=elem.row_buttons\r\n            }else{\r\n              if (elem.contextmenu_buttons!==undefined){\r\n                menuOptionsArr=elem.contextmenu_buttons\r\n              }\r\n            }\r\n            \r\n            menuOptionsArr.map((item, i) => {\r\n              let newIcon = document.createElement('mwc-icon-button');\r\n              newIcon.setAttribute('icon', item.button.icon);\r\n              newIcon.style.color = \"white\";\r\n      \r\n              let newLabel = document.createElement('label');\r\n              newLabel.textContent = item.button.title[\"label_\"+this.lang]\r\n      \r\n              let newDiv = document.createElement('div');\r\n              newDiv.style.display = \"flex\";\r\n              newDiv.style.flexDirection = \"row\";\r\n              newDiv.style.alignItems =  \"center\";\r\n              newDiv.style.cursor = \"pointer\"\r\n              newDiv.appendChild(newIcon);\r\n              newDiv.appendChild(newLabel);\r\n              newDiv.addEventListener('click', (e) => this.actionMethod(e, item, menuOptionsArr, null, null, rowSelected, false));\r\n      \r\n              popup.appendChild(newDiv);\r\n            })\r\n            popup.addEventListener('click', () => this.contextMenuItemAction(popup));\r\n            popup.style.left = `${event.clientX}px`;\r\n            popup.style.top = `${event.clientY}px`;\r\n            popup.style.display = \"flex\";\r\n            popup.style.flexDirection = \"column\";\r\n            document.body.addEventListener('click', this.closeContextMenu);\r\n          }\r\n          \r\n          closeContextMenu(e) {\r\n            contextMenu.style.display = \"none\";\r\n          }\r\n      \r\n          contextMenuItemAction(e) {\r\n            e.style.display = \"none\";\r\n          }        \r\n        tableBodyHavingData(elem, dataArr, lang, selectedIdx, handler, handleRowClk, parentData){\r\n            //console.log('tableBodyHavingData', 'dataArr', dataArr)\r\n            return html`\r\n                ${dataArr.map((curRow, idx) => {\r\n                return html`\r\n                  <tr\r\n                    @click=${(event) => {\r\n                      if(handler) {\r\n                        if(dataArr[elem.children] && dataArr[elem.children].length > 0) {\r\n                          if (elem.openWhenNoData === undefined || elem.openWhenNoData === false) {\r\n                            handler(event, curRow, elem, idx);\r\n                          }\r\n                        }\r\n                      }\r\n                      this.handleTableRowClick(event, curRow, elem)\r\n                    }}\r\n                    @contextmenu=${(event) => this.handleOpenContextMenu(event, curRow, elem)}\r\n                    class=\"${selectedIdx === idx ? \"selected\" : selectedIdx !== undefined ? \"hidzzzden\" : \"\"}\"\r\n                >                \r\n                ${elem.columns.map((fld, index) =>                     \r\n                    html`\r\n                    <td>\r\n                        ${fld.tooltip !== undefined ? html`\r\n                            <grid-cell-tooltip lang=\"${lang}\" .element=\"${fld}\" .data=\"${curRow}\">                        \r\n                                ${this.cellContentController(elem, fld, curRow, lang, index)}                    \r\n                            </grid-cell-tooltip>\r\n                        `:html`\r\n                            ${this.cellContentController(elem, fld, curRow, lang, index)}\r\n                        `}\r\n                    </td>\r\n                    `\r\n                )}\r\n                ${this.generateRowButtons(elem, fld, curRow, parentData, idx, handler, lang)}\r\n                </tr>\r\n                `})}\r\n            `\r\n        }\r\n\r\n        \r\n\r\n\r\n        cellContentController(elem, fld, data, lang, columnIndex, rowIndex){\r\n          //alert(fld.name+' '+fld.edit)\r\n            let applyOther=true\r\n            if (fld.edit!==undefined&&fld.edit===true){\r\n              applyOther = false;\r\n            } else if (fld.name === \"pretty_spec\" || fld.name === \"reportTitle\") {\r\n                applyOther = false;\r\n            } else if (fld.is_tag_list !== undefined &&fld.is_tag_list === true) {\r\n                applyOther = false;\r\n            } else if (fld.as_progress !== undefined && fld.as_progress === true) {\r\n                applyOther = false;\r\n            } else if (fld.is_icon !== undefined && fld.is_icon === true) {\r\n                applyOther = false;\r\n            } else if (fld.as_paragraph !== undefined && fld.as_paragraph === true) {\r\n                applyOther = false;\r\n            }                  \r\n            return html`\r\n            ${fld.edit!==undefined&&fld.edit===true?\r\n            html`\r\n                ${this.cellEditNumeric(fld, data, lang, columnIndex, rowIndex)}\r\n            `:html`\r\n                ${fld.name === \"pretty_spec\"===\"reportTitle\" ? this.cellIsPrettySpec(fld, data, lang) : nothing}\r\n                ${fld.is_tag_list !== undefined && fld.is_tag_list === true ? this.cellIsTagList(fld, data, lang) : nothing}\r\n                ${fld.as_progress !== undefined && fld.as_progress === true ? this.cellIsAsProgress(fld, data, lang) : nothing}\r\n                ${fld.as_paragraph !== undefined && fld.as_paragraph === true ? this.cellIsParagraph(fld, data, lang) : nothing}\r\n                ${fld.is_icon !== undefined && fld.is_icon === true ? this.cellIsIcon(fld, data, columnIndex) : nothing}\r\n                ${applyOther===true?this.cellIsOther(elem, fld, data, lang, columnIndex) : nothing}\r\n            `}\r\n            `\r\n        }\r\n\r\n        cellEditNumeric(fld, data, lang, columnIndex, rowIndex) {\r\n          const id = `col_${columnIndex}_row_${rowIndex}`; // Changed ID format\r\n          //console.log('Rendering cell:', columnIndex, rowIndex);\r\n          return html`\r\n            <input class=\"enterResultVal\" id=\"${id}\" \r\n              type=\"number\" \r\n              .step=${fld.step !== undefined ? fld.step : ''} \r\n              .min=${fld.min !== undefined ? fld.min : ''} \r\n              .max=${fld.max !== undefined ? fld.max : ''} \r\n              .value=${data[fld.name]} \r\n              @input=${e => this.cellEditSetValidVal(e, data)}\r\n              @keydown=${e => this.cellEditOnKeyDown(e, fld, columnIndex, rowIndex, data)}\r\n              @paste=${e => this.cellEditOnPaste(e, fld, columnIndex, rowIndex, data)}>          \r\n          `;\r\n        }\r\n        \r\n        cellEditOnPaste(event, fld, columnIndex, rowIndex, data) {\r\n          event.preventDefault();\r\n        \r\n          const clipboardData = event.clipboardData || window.clipboardData;\r\n          const pastedData = clipboardData.getData('Text');\r\n        \r\n          console.log('Pasted data:', pastedData);\r\n        \r\n          const rows = pastedData.split('\\n').filter(row => row.trim() !== '');\r\n          \r\n          console.log('Rows:', rows);\r\n        \r\n          rows.forEach((row, index) => {\r\n            const currentRowIndex = rowIndex + index;\r\n            const nextInputId = `col_${columnIndex}_row_${currentRowIndex}`;\r\n            console.log(`Processing input ID: ${nextInputId}`);\r\n            const nextInput = this.shadowRoot.querySelector(`#${nextInputId}`);\r\n        \r\n            if (nextInput) {\r\n              const currentValue = nextInput.value.trim();\r\n              const newValue = row.trim();\r\n        \r\n              if (currentValue !== '') {\r\n                const replace = confirm(`The cell ${nextInputId} is not empty. Replace \"${currentValue}\" with \"${newValue}\"?`);\r\n                if (replace) {\r\n                  console.log(`Replacing value in ${nextInputId}:`, newValue);\r\n                  nextInput.value = newValue;\r\n                  this.cellEditSetValidVal(event, data);\r\n                  this.trazitButtonsMethod(event, true, fld.action, true, 1, event.target, data);\r\n                  this.cellEditMoveToNextRow(columnIndex, rowIndex);\r\n                } else {\r\n                  console.log(`Keeping existing value in ${nextInputId}:`, currentValue);\r\n                }\r\n              } else {\r\n                console.log(`Setting value in empty cell ${nextInputId}:`, newValue);\r\n                nextInput.value = newValue;\r\n                this.cellEditSetValidVal(event, data);\r\n                this.trazitButtonsMethod(event, true, fld.action, true, 1, event.target, data);\r\n                this.cellEditMoveToNextRow(columnIndex, rowIndex);      \r\n              }\r\n            } else {\r\n              console.warn(`Next input with ID ${nextInputId} not found`);\r\n            }\r\n          });\r\n        }\r\n\r\n        \r\n        cellEditSetValidVal(event, data) {\r\n          const input = event.target;\r\n          const value = input.value;\r\n        \r\n          console.log('Validating and setting value:', value);\r\n          // Actualiza tus datos aquí según sea necesario\r\n        }\r\n        \r\n        cellEditOnKeyDown(event, fld, columnIndex, rowIndex, data) {\r\n         // alert('this.cellEditOnKeyDown'+ + event.key)\r\n         // console.log('cellEditOnKeyDown triggered:', event.key, event.code);\r\n          if (event.key === 'Enter' || event.code === 'Enter') {\r\n            event.preventDefault();\r\n            //console.log('Enter key pressed, calling handleKeyDown');\r\n            this.cellEditHandleKeyDown(event, fld, columnIndex, rowIndex, data);\r\n          } else {\r\n            //console.log('Other key pressed:', event.key);\r\n          }\r\n        }\r\n        \r\n        cellEditHandleKeyDown(event, fld, columnIndex, rowIndex, data) {\r\n          //console.log('cellEditHandleKeyDown called');\r\n          this.trazitButtonsMethod(event, true, fld.action, true, 1, event.target, data);\r\n          this.cellEditMoveToNextRow(columnIndex, rowIndex);\r\n        }\r\n        \r\n        cellEditMoveToNextRow(columnIndex, rowIndex) {\r\n          const nextRowIndex = rowIndex + 1;\r\n          const nextInputId = `#col_${columnIndex}_row_${nextRowIndex}`;\r\n          //console.log(`Attempting to focus next input: ${nextInputId}`);\r\n        \r\n          let nextInput = this.shadowRoot.querySelector(nextInputId);\r\n          \r\n          if (!nextInput) {\r\n            //console.log(`Next input not found immediately: ${nextInputId}`);\r\n            setTimeout(() => {\r\n              nextInput = this.shadowRoot.querySelector(nextInputId);\r\n              if (nextInput) {\r\n              //  console.log(`Focusing next input after delay: ${nextInputId}`);\r\n                nextInput.focus();\r\n              } else {\r\n              //  console.warn(`Next input still not found after delay: ${nextInputId}`);\r\n              }\r\n            }, 100);\r\n          } else {\r\n            //console.log(`Focusing next input immediately: ${nextInputId}`);\r\n            nextInput.focus();\r\n          }\r\n        }\r\n                        \r\n        cellIsPrettySpec(fld, data, lang){\r\n            return html`   cellIsPrettySpec             \r\n                    <span style=\"color:green\">${data[\"spec_text_green_area_\" + lang]}</span>\r\n                    <span style=\"color:orange\">${data[\"spec_text_yellow_area_\" + lang]}</span>\r\n                    <span style=\"color:red\">${data[\"spec_text_red_area_\" + lang]}</span>         \r\n            `    \r\n        }\r\n        cellIsTagList(fld,  data){\r\n            let purpose={}\r\n            return html` \r\n                <multi-select .label=${purpose} \r\n                    .props=${fld.properties!==undefined?fld.properties:{\"readOnly\":true, \"displayLabel\":false}} \r\n                    .activeOptions=${data[fld.name]} .options=${{}}> </multi-select>\r\n                ` \r\n        }\r\n        \r\n        cellIsAsProgress(fld, data, lang){\r\n            return html`\r\n              <div class=\"w3-container\">\r\n                <div class=\"w3-background w3-round-xlarge\" title=\"${this.titleLang(fld)}\">\r\n                  <div class=\"w3-container w3-blue w3-round-xlarge\" style=\"width:${data[fld.name]}%\">\r\n                    ${data[fld.name]}%\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <br />\r\n          `            \r\n        }\r\n\r\n        cellIsIcon(fld, data, index){            \r\n            return html` \r\n                ${fld.icon_class ?\r\n                html`                \r\n                    <div class=\"left-area\">\r\n                        <mwc-icon-button class=\"icon ${data[fld.icon_class]}\" icon=\"${data[fld.icon_name]}\" alt=\"${fld.name}\"></mwc-icon-button>\r\n                    </div>\r\n                ` :html `\r\n                    <img src=\"${this.iconRendererSrc(data, fld.name, index, fld)}\" alt=\"${this.iconRendererSrc(data, fld.name, index, fld)}\" style=\"width:20px\">\r\n                `}             \r\n            `\r\n        }\r\n        cellIsOther(elem, fld, data, lang, index){\r\n            return html`\r\n                <div class=\"right-area\">\r\n                <span class=\"text\">\r\n                    ${fld.fix_value_prefix !== undefined ? fld.fix_value_prefix: \"\"}\r\n                </span>\r\n                <span>${ data[fld.name] }</span>\r\n                ${fld.fix_value_suffix !== undefined ? fld.fix_value_suffix : \"\"}\r\n                ${fld.fix_value2_prefix !== undefined ? fld.fix_value2_prefix : \"\"}\r\n                <span>\r\n                    ${fld.name2 !== undefined ? data[fld.name2] : \"\"}\r\n                </span>\r\n                ${fld.fix_value2_suffix !== undefined ? fld.fix_value2_suffix : \"\"}\r\n                ${fld.fix_value3_prefix !== undefined ? fld.fix_value3_prefix : \"\"}\r\n                <span>\r\n                    ${fld.name3 !== undefined ? data[fld.name3] : \"\"}\r\n                    ${fld.fix_value3_suffix !== undefined ? fld.fix_value3_suffix : \"\"}\r\n                </span>                \r\n                </div>                  \r\n            `\r\n        }\r\n        cellIsParagraph(fld, data, lang){\r\n            return html`${unsafeHTML(this.getDynamicData(fld.paragraph, data, lang))}\r\n            `\r\n        }        \r\n        generateRowButtons(elem, curRow, parentData, index, handle, lang) {\r\n            return html`\r\n            <td>\r\n            ${elem.expandInfoSection?html`\r\n            <div class=\"circle\" @click=\"${(e) => this._toggleDetail(e, index)}\" title=\"${lang==='es'?'Información':'Information'}\">i</div>`\r\n            :html``}\r\n            \r\n            ${elem.row_buttons === undefined\r\n                ? html`\r\n                \r\n                    ${curRow[elem.children] && curRow[elem.children].length > 0 ? html `\r\n                        <div class=\"circle\"> \r\n                            ${curRow[elem.children].length} \r\n                        </div>\r\n                        </div>\r\n                    ` : html``}\r\n                ` : \r\n                html`                \r\n                  \r\n                    ${curRow[elem.children] && curRow[elem.children].length > 0 ? html `\r\n                        <div class=\"circle\"> \r\n                          ${curRow[elem.children].length} \r\n                        </div>\r\n                    ` : html``}\r\n                    <div class=\"layout horizontal center flex wrap\">\r\n                      ${this.getButtonForRows(elem.row_buttons, curRow, false, parentData)}\r\n                    </div>\r\n                  \r\n                `}  \r\n                </td>    \r\n            `\r\n        }\r\n        getRowsInfo(elem, curRow, rowIndex, lang, parentData, handler){\r\n          //console.log(rowIndex)\r\n          return html`\r\n              ${elem.columns.map((fld, columnIndex) =>                     \r\n                  html`\r\n                  <td>\r\n                      ${fld.tooltip !== undefined ? html`\r\n                          <grid-cell-tooltip lang=\"${lang}\" .element=\"${fld}\" .data=\"${curRow}\">                        \r\n                              ${this.cellContentController(elem, fld, curRow, lang, columnIndex, rowIndex)}                    \r\n                          </grid-cell-tooltip>\r\n                      `:html`\r\n                          ${this.cellContentController(elem, fld, curRow, lang, columnIndex, rowIndex)}\r\n                      `}\r\n                  </td>\r\n                  `\r\n              )}\r\n              ${this.generateRowButtons(elem, curRow, parentData, rowIndex, handler, lang)}\r\n          `\r\n          }\r\n      \r\n   \r\n    }\r\n}","import { html } from 'lit';\r\nimport { until } from 'lit/directives/until.js';\r\nimport '@material/mwc-list/mwc-list-item';\r\nimport '@material/mwc-select';\r\nimport '@material/mwc-checkbox';\r\nimport '@material/mwc-formfield';\r\nimport {DialogsFunctions} from './DialogsFunctions';\r\nexport function TrazitFormsElements(base) {\r\n  return class extends DialogsFunctions(base) {\r\n    static get properties() {\r\n      return {\r\n        selectedResults: { type: Array },\r\n        enterResults: { type: Array },\r\n        microorganismList: { type: Array },\r\n        selectedAssigns: { type: Array },\r\n        assignList: { type: Array },\r\n        targetValue: { type: Object },\r\n        selectedDialogAction: { type: Object },\r\n        lotDays: { type: Number },\r\n        deactivatedLots: { type: Array },\r\n        openInvests: { type: Array },\r\n        selectedInvestigations: { type: Array },\r\n        capaRequired: { type: Boolean },\r\n        selectedStucks: { type: Array },\r\n        dataForDialog: { type: Object },\r\n        familyList: { type: Array },\r\n        microName: { type: String },\r\n        fromGrid: { type: Boolean },\r\n        fields:{type: Array},\r\n        declineDialog:{type: Object},\r\n        masterData:{type: Object}\r\n      }\r\n    }\r\n\r\n    constructor() {\r\n      super()\r\n      this.lotDays = 7\r\n      this.deactivatedLots = []\r\n      this.microorganismList = []\r\n      this.familyList = []\r\n      this.capaRequired = false\r\n      this.fromGrid = false\r\n      this.fields=[]\r\n      this.actionBeingPerformedModel={}\r\n      this.fieldsShouldBeReset=true\r\n      this.masterData={}\r\n    }\r\n    openThisDialog(actionModel = this.actionBeingPerformedModel){\r\n       if (!actionModel||!actionModel.dialogInfo||!actionModel.dialogInfo.fields){\r\n        //alert(false)\r\n        return false\r\n       }      \r\n       // alert(true)\r\n       this.defaultValue()\r\n       //this.resetFields()\r\n       return true \r\n    }\r\n        \r\n    \r\n    setValidVal(e, fieldDef) {\r\n        console.log('setValidVal', e, 'fieldDef', fieldDef)\r\n        \r\n      if (fieldDef.min_allowed!==undefined && typeof fieldDef.min_allowed == 'number' && e.target.value < fieldDef.min_allowed) {\r\n        e.target.value = fieldDef.min_allowed\r\n        return\r\n      }\r\n      if ( fieldDef.max_allowed!==undefined && typeof fieldDef.max_allowed == 'number' && e.target.value > fieldDef.max_allowed) {\r\n        e.target.value = fieldDef.max_allowed\r\n        return\r\n      }\r\n      // make sure the decimal length <= max_dp when manual input\r\n      if (fieldDef.max_dp!==undefined && fieldDef.max_dp) {\r\n        let v = e.target.value.split(\".\")\r\n        if (v.length > 1 && v[1].length > fieldDef.max_dp) {\r\n          v[1] = v[1].substring(0, fieldDef.max_dp)\r\n          e.target.value = Number(v.join(\".\"))\r\n        }\r\n      }\r\n    }    \r\n    fieldLabel(fld){        \r\n        let fldLbl= fld[\"label_\" + this.lang]\r\n        if (fld.optional===undefined||fld.optional===false){\r\n            fldLbl=\"* \"+fldLbl\r\n        }\r\n        return fldLbl\r\n    }\r\n    isFieldDisabled(fld){        \r\n        if (fld.disabled!==undefined&&fld.disabled===true){\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    fldDefaultValue(fldDef){\r\n        //console.log('fldDefaultValue', 'fldDef', fldDef)\r\n        let curArgName=\"\"\r\n        if (fldDef.default_value){\r\n            return fldDef.default_value\r\n        } else if (fldDef.internalVariableSimpleObjName&&fldDef.internalVariableSimpleObjProperty) {          \r\n            if (this[fldDef.internalVariableSimpleObjName]===undefined||this[fldDef.internalVariableSimpleObjName][fldDef.internalVariableSimpleObjProperty]===undefined){\r\n              let msg=\"\"\r\n              if (this[fldDef.internalVariableSimpleObjName][fldDef.internalVariableSimpleObjProperty]===undefined){\r\n                msg='The object '+fldDef.internalVariableSimpleObjName+' has no one property called '+fldDef.internalVariableSimpleObjProperty\r\n                alert(msg)\r\n              }else{\r\n                msg='there is no object called '+fldDef.internalVariableSimpleObjName+' in this view'\r\n                alert(msg)\r\n              }\r\n              return \"ERROR: \"+msg\r\n            }  \r\n            return this[fldDef.internalVariableSimpleObjName][fldDef.internalVariableSimpleObjProperty]          \r\n        } else if (fldDef.internalVariableObjName&&fldDef.internalVariableObjProperty) {          \r\n            if (this[fldDef.internalVariableObjName]===undefined||this[fldDef.internalVariableObjName][0][fldDef.internalVariableObjProperty]===undefined){\r\n            let msg=\"\"\r\n            if (this[fldDef.internalVariableObjName][0][fldDef.internalVariableObjProperty]===undefined){\r\n                msg='The object '+fldDef.internalVariableObjName+' has no one property called '+fldDef.internalVariableObjProperty\r\n                alert(msg)\r\n                //console.log(msg, this[fldDef.internalVariableObjName][0])\r\n            }else{\r\n                msg='there is no object called '+fldDef.internalVariableObjName+' in this view'\r\n                alert(msg)\r\n            }\r\n        //    alert('No family selected')\r\n            return \"ERROR: \"+msg\r\n            }  \r\n            return this[fldDef.internalVariableObjName][0][fldDef.internalVariableObjProperty]\r\n        \r\n        } else if (fldDef.element) {\r\n        \r\n        } else if (fldDef.defaultValue) {\r\n        if (fldDef.isAdhocField!==undefined&&fldDef.isAdhocField===true){\r\n            curArgName=jsonParam[fldDef.argumentName]\r\n            if (curArgName===undefined){curArgName=''}\r\n            if (curArgName.length>0){curArgName=curArgName+\"|\"}\r\n            curArgName=curArgName+fldDef.defaultValue\r\n            if (fldDef.fieldType!==undefined){\r\n            curArgName=curArgName+\"*\"+fldDef.fieldType\r\n            }\r\n            return curArgName\r\n        }else{\r\n            return fldDef.defaultValue // get value from default value (i.e incubator)\r\n        }\r\n        } else if (fldDef.selObjectPropertyName) {\r\n            return selObject[fldDef.selObjectPropertyName] // get value from selected item\r\n        } else if (fldDef.targetValue) {\r\n            return targetValue[fldDef.argumentName] // get value from target element passed\r\n        } else if (fldDef.fixValue) {\r\n            return fldDef.fixValue\r\n        } else if (fldDef.contextVariableName) {\r\n            return this[fldDef.contextVariableName]\r\n        } else {\r\n            return \"\"\r\n        }\r\n\r\n    }\r\n\r\n    /** Date Template Dialog part  @open=${this.defaultValue()}*/\r\n    genericFormElements(fields, withEnterKey = false, keydownHandler = null) {\r\n        if (fields===undefined){fields=[]}\r\n        // if (this.actionBeingPerformedModel.dialogInfo === undefined) {\r\n        //     //alert('genericFormElements has no dialogInfo')\r\n        //     return nothing\r\n        // }\r\n        // if (this.actionBeingPerformedModel!==undefined&&this.actionBeingPerformedModel.dialogInfo!==undefined&&this.actionBeingPerformedModel.dialogInfo.name === \"genericDialog\"){\r\n        //     let dlgFlds=fields\r\n        //     if (dlgFlds===undefined){\r\n        //         alert('The dialog '+this.actionBeingPerformedModel.dialogInfo.name+' has no fields property for adding the fields, please review.')\r\n        //         return nothing\r\n        //     }\r\n        // }    \r\n\r\n         // @closed=${this.resetFields} this is in use but moved to be executed about to perform the fetchApi \r\n         //     otherwise it is not compatible with actions requiring credentials dialog.\r\n         this.fields=fields\r\n     \r\n    return html`\r\n    <style>\r\n    mwc-textfield {\r\n        border-style : Solid;\r\n        border-color : #999999;\r\n        border-color : rgba(153, 153, 153, 1);\r\n        border-width : 1px;\r\n        border-radius : 7px;\r\n        -moz-border-radius : 7px;\r\n        -webkit-border-radius : 7px;   \r\n        font-family : Montserrat;\r\n        font-weight : bold;\r\n        font-size : 19px;\r\n        background-color :  #FFFFFF;\r\n        background-color : rgb(255, 255, 255);  \r\n        --mdc-text-field-idle-line-color:#148CFA;\r\n        --mdc-text-field-outlined-idle-border-color: #148CFA;\r\n        --mdc-text-field-label-ink-color:  #148CFA;\r\n        --mdc-text-field-focused-label-color: #148CFA;\r\n        --mdc-theme-primary: #0465FB;\r\n      }\r\n      mwc-select {        \r\n        --mdc-theme-primary : rgba(36, 192, 235, 1);\r\n        --mdc-theme-text-primary-on-background : rgba(49, 130, 189, 1);\r\n        --mdc-select-ink-color: rgb(47, 47, 47);\r\n        --mdc-select-dropdown-icon-color:rgba(36, 192, 235, 1);\r\n        --mdc-select-hover-line-color:rgba(36, 192, 235, 1);\r\n        --mdc-notched-outline-border-color: rgba(186, 235, 248, 0.4);\r\n        --mdc-select-disabled-dropdown-icon-color:rgba(36, 192, 235, 1);\r\n\r\n        font-family : Montserrat;\r\n        font-weight : bold;\r\n        font-size : 19px;\r\n      }\r\n      mwc-select.outlined {        \r\n        --mdc-theme-primary : rgba(36, 192, 235, 1);\r\n        --mdc-theme-text-primary-on-background : rgba(49, 130, 189, 1);\r\n        --mdc-select-ink-color: rgba(36, 192, 235, 1);\r\n        font-family : Montserrat;\r\n        font-weight : bold;\r\n        font-size : 19px;\r\n        background-color: 4fcad029;\r\n      } \r\n      mwc-formfield{        \r\n        --mdc-theme-secondary: #1473e6;\r\n      }      \r\n    </style>\r\n        ${!fields ?\r\n            html``: html`              \r\n            ${fields.map((fld, i) =>             \r\n                html`            \r\n                ${!fld.filtertext1 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filtertext1\" type=\"text\" .value=${until(this.fldDefaultValue(fld.filtertext1), '')} label=\"${this.fieldLabel(fld.filtertext1)}\"  ?disabled=${this.isFieldDisabled(fld.filtertext1)} \r\n                        @keypress=${e => e.keyCode == 13 && this.acceptedGenericDialog}></mwc-textfield>\r\n\r\n                    </div>\r\n                `}          \r\n                ${!fld.text1 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"text1\" type=\"text\" .value=${until(this.fldDefaultValue(fld.text1), '')}  label=\"${this.fieldLabel(fld.text1)}\" ?disabled=${this.isFieldDisabled(fld.text1)}\r\n                        @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}          \r\n                ${!fld.filtertext2 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filtertext2\" type=\"text\" .value=${until(this.fldDefaultValue(fld.filtertext2), '')} label=\"${this.fieldLabel(fld.filtertext2)}\" ?disabled=${this.isFieldDisabled(fld.filtertext2)}\r\n                    @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}          \r\n                ${!fld.filtertext3 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filtertext3\" type=\"text\" .value=${until(this.fldDefaultValue(fld.filtertext3), '')} label=\"${this.fieldLabel(fld.filtertext3)}\" ?disabled=${this.isFieldDisabled(fld.filtertext3)}\r\n                        @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}                       \r\n                ${!fld.filtertext4 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filtertext4\" type=\"text\" .value=${until(this.fldDefaultValue(fld.filtertext4), '')} label=\"${this.fieldLabel(fld.filtertext4)}\" ?disabled=${this.isFieldDisabled(fld.filtertext4)}\r\n                    @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}          \r\n                ${!fld.filtertext5 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filtertext5\" type=\"text\" .value=${until(this.fldDefaultValue(fld.filtertext5), '')} label=\"${this.fieldLabel(fld.filtertext5)}\"  ?disabled=${this.isFieldDisabled(fld.filtertext5)}\r\n                    @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}          \r\n                ${!fld.filtertext6 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filtertext6\" type=\"text\" .value=${until(this.fldDefaultValue(fld.filtertext6), '')} label=\"${this.fieldLabel(fld.filtertext6)}\"  ?disabled=${this.isFieldDisabled(fld.filtertext6)}\r\n                    @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}          \r\n                ${!fld.filtertext7 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filtertext7\" type=\"text\" .value=${until(this.fldDefaultValue(fld.filtertext7), '')} label=\"${this.fieldLabel(fld.filtertext7)}\"  ?disabled=${this.isFieldDisabled(fld.filtertext7)}\r\n                    @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}          \r\n                ${!fld.filtertext8 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filtertext8\" type=\"text\" .value=${until(this.fldDefaultValue(fld.filtertext8), '')} label=\"${this.fieldLabel(fld.filtertext8)}\" ?disabled=${this.isFieldDisabled(fld.filtertext8)}\r\n                    @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}          \r\n                ${!fld.filtertext9 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filtertext9\" type=\"text\" .value=${until(this.fldDefaultValue(fld.filtertext9), '')} label=\"${this.fieldLabel(fld.filtertext9)}\" ?disabled=${this.isFieldDisabled(fld.filtertext9)}\r\n                    @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}          \r\n                ${!fld.filtertext10 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filtertext10\" type=\"text\" .value=${until(this.fldDefaultValue(fld.filtertext10), '')} label=\"${this.fieldLabel(fld.filtertext10)}\" ?disabled=${this.isFieldDisabled(fld.filtertext10)}\r\n                    @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}                              \r\n                ${!fld.filternumber1 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filternumber1\" type=\"number\" \r\n                    @input=${e=>this.setValidVal(e, fld)} .value=${this.fldDefaultValue(fld.filternumber1)} label=\"${this.fieldLabel(fld.filternumber1)}\" ?disabled=${this.isFieldDisabled(fld.filternumber1)}\r\n                    @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.filternumber2 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filternumber2\" type=\"number\" @input=${e=>this.setValidVal(e, fld)}\r\n                    .value=${this.fldDefaultValue(fld.filternumber2)}   label=\"${this.fieldLabel(fld.filternumber2)}\" ?disabled=${this.isFieldDisabled(fld.filternumber2)}\r\n                    @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.filternumber3 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filternumber3\" type=\"number\" @input=${e=>this.setValidVal(e, fld)}\r\n                    .value=${this.fldDefaultValue(fld.filternumber3)}   label=\"${this.fieldLabel(fld.filternumber3)}\" ?disabled=${this.isFieldDisabled(fld.filternumber3)}\r\n                    @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.filternumber4 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filternumber4\" type=\"number\" @input=${e=>this.setValidVal(e, fld)}\r\n                    .value=${this.fldDefaultValue(fld.filternumber4)}   label=\"${this.fieldLabel(fld.filternumber4)}\" ?disabled=${this.isFieldDisabled(fld.filternumber4)}\r\n                    @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.filternumber5 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filternumber5\" type=\"number\" @input=${e=>this.setValidVal(e, fld)}\r\n                    .value=${this.fldDefaultValue(fld.filternumber5)}   label=\"${this.fieldLabel(fld.filternumber5)}\" ?disabled=${this.isFieldDisabled(fld.filternumber5)}\r\n                    @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.filternumber6 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filternumber6\" type=\"number\" @input=${e=>this.setValidVal(e, fld)}\r\n                    .value=${this.fldDefaultValue(fld.filternumber6)}  label=\"${this.fieldLabel(fld.filternumber6)}\" ?disabled=${this.isFieldDisabled(fld.filternumber6)}\r\n                    @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.filternumber7 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filternumber7\" type=\"number\" @input=${e=>this.setValidVal(e, fld)}\r\n                    .value=${this.fldDefaultValue(fld.filternumber7)}   label=\"${this.fieldLabel(fld.filternumber7)}\" ?disabled=${this.isFieldDisabled(fld.filternumber7)}\r\n                    @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.filternumber8 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filternumber8\" type=\"number\" @input=${e=>this.setValidVal(e, fld)}\r\n                    .value=${this.fldDefaultValue(fld.filternumber8)}   label=\"${this.fieldLabel(fld.filternumber8)}\" ?disabled=${this.isFieldDisabled(fld.filternumber8)}\r\n                    @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.filternumber9 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filternumber9\" type=\"number\" @input=${e=>this.setValidVal(e, fld)}\r\n                    .value=${this.fldDefaultValue(fld.filternumber9)}   label=\"${this.fieldLabel(fld.filternumber9)}\" ?disabled=${this.isFieldDisabled(fld.filternumber9)}\r\n                    @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.filternumber10 ?\r\n                    html``: html`        \r\n                    <div class=\"layout horizontal flex center-center\">\r\n                    <mwc-textfield class=\"layout flex\" id=\"filternumber10\" type=\"number\" @input=${e=>this.setValidVal(e, fld)}\r\n                    .value=${this.fldDefaultValue(fld.filternumber10)}   label=\"${this.fieldLabel(fld.filternumber10)}\" ?disabled=${this.isFieldDisabled(fld.filternumber10)}\r\n                    @keydown=${withEnterKey ? keydownHandler : nothing} ></mwc-textfield>\r\n                    </div>\r\n                `}   \r\n                ${!fld.filtercheckbox1 ?\r\n                    html``: html`        \r\n                    <mwc-formfield label=\"${this.fieldLabel(fld.filtercheckbox1)}\" >\r\n                        <mwc-checkbox id=\"filtercheckbox1\" ?checked=${this.fldDefaultValue(fld.filtercheckbox1)} ?disabled=${this.isFieldDisabled(fld.filtercheckbox1)}\r\n                        @change=${e => { this.filtercheckbox1.value=this.filtercheckbox1.checked}} value=\"${this.fldDefaultValue(fld.filtercheckbox1)}\"\r\n                        ></mwc-checkbox>\r\n                    </mwc-formfield>\r\n                `}                              \r\n                    ${!fld.filtercheckbox2 ?\r\n                    html``: html`        \r\n                    <mwc-formfield label=\"${this.fieldLabel(fld.filtercheckbox2)}\" >\r\n                        <mwc-checkbox id=\"filtercheckbox2\" ?checked=${this.fldDefaultValue(fld.filtercheckbox2)} ?disabled=${this.isFieldDisabled(fld.filtercheckbox2)}\r\n                        @change=${e => { this.filtercheckbox2.value=this.filtercheckbox2.checked}} value=\"${this.fldDefaultValue(fld.filtercheckbox2)}\"\r\n                    ></mwc-checkbox>\r\n                        </mwc-formfield>\r\n                    `}                              \r\n                    ${!fld.filtercheckbox3 ?\r\n                    html``: html`        \r\n                    <mwc-formfield label=\"${this.fieldLabel(fld.filtercheckbox3)}\" >\r\n                        <mwc-checkbox id=\"filtercheckbox3\" ?checked=${this.fldDefaultValue(fld.filtercheckbox3)} ?disabled=${this.isFieldDisabled(fld.filtercheckbox3)}\r\n                        @change=${e => { this.filtercheckbox3.value=this.filtercheckbox3.checked}} value=\"${this.fldDefaultValue(fld.filtercheckbox3)}\"\r\n                    ></mwc-checkbox>\r\n                        </mwc-formfield>\r\n                    `}                              \r\n                    ${!fld.filtercheckbox4 ?\r\n                    html``: html`        \r\n                    <mwc-formfield label=\"${this.fieldLabel(fld.filtercheckbox4)}\" >\r\n                        <mwc-checkbox id=\"filtercheckbox4\" ?checked=${this.fldDefaultValue(fld.filtercheckbox4)} ?disabled=${this.isFieldDisabled(fld.filtercheckbox4)}\r\n                        @change=${e => { this.filtercheckbox4.value=this.filtercheckbox4.checked}} value=\"${this.fldDefaultValue(fld.filtercheckbox4)}\"\r\n                    ></mwc-checkbox>\r\n                        </mwc-formfield>\r\n                    `}                              \r\n                    ${!fld.filtercheckbox5 ?\r\n                    html``: html`        \r\n                        <mwc-formfield label=\"${this.fieldLabel(fld.filtercheckbox5)}\" >\r\n                        <mwc-checkbox id=\"filtercheckbox5\" ?checked=${this.fldDefaultValue(fld.filtercheckbox5)} @change=${e => { this.filtercheckbox5.value=this.filtercheckbox5.checked}}\r\n                        value=\"${this.fldDefaultValue(fld.filtercheckbox5)}\" ?disabled=${this.isFieldDisabled(fld.filtercheckbox5)}\r\n                    ></mwc-checkbox>\r\n                        </mwc-formfield>\r\n                    `}                              \r\n                    ${!fld.filtercheckbox6 ?\r\n                    html``: html`        \r\n                        <mwc-formfield label=\"${this.fieldLabel(fld.filtercheckbox6)}\" >\r\n                        <mwc-checkbox id=\"filtercheckbox6\" ?checked=${this.fldDefaultValue(fld.filtercheckbox6)} ?disabled=${this.isFieldDisabled(fld.filtercheckbox6)}\r\n                        @change=${e => { this.filtercheckbox6.value=this.filtercheckbox6.checked}} value=\"${this.fldDefaultValue(fld.filtercheckbox6)}\"\r\n                    ></mwc-checkbox>\r\n                        </mwc-formfield>\r\n                    `}                              \r\n                    ${!fld.filtercheckbox7 ?\r\n                    html``: html`        \r\n                        <mwc-formfield label=\"${this.fieldLabel(fld.filtercheckbox7)}\" >\r\n                        <mwc-checkbox id=\"filtercheckbox7\" ?checked=${this.fldDefaultValue(fld.filtercheckbox7)} ?disabled=${this.isFieldDisabled(fld.filtercheckbox7)}\r\n                        @change=${e => { this.filtercheckbox7.value=this.filtercheckbox7.checked}} value=\"${this.fldDefaultValue(fld.filtercheckbox7)}\"\r\n                    ></mwc-checkbox>\r\n                        </mwc-formfield>\r\n                    `}                              \r\n                    ${!fld.filtercheckbox8 ?\r\n                    html``: html`        \r\n                        <mwc-formfield label=\"${this.fieldLabel(fld.filtercheckbox8)}\" >\r\n                        <mwc-checkbox id=\"filtercheckbox8\" ?checked=${this.fldDefaultValue(fld.filtercheckbox8)} ?disabled=${this.isFieldDisabled(fld.filtercheckbox8)}\r\n                        @change=${e => { this.filtercheckbox8.value=this.filtercheckbox8.checked}} value=\"${this.fldDefaultValue(fld.filtercheckbox8)}\"\r\n                    ></mwc-checkbox>\r\n                        </mwc-formfield>\r\n                    `}                              \r\n                    ${!fld.filtercheckbox9 ?\r\n                    html``: html`        \r\n                        <mwc-formfield label=\"${this.fieldLabel(fld.filtercheckbox9)}\" >\r\n                        <mwc-checkbox id=\"filtercheckbox9\" ?checked=${this.fldDefaultValue(fld.filtercheckbox9)} ?disabled=${this.isFieldDisabled(fld.filtercheckbox9)}\r\n                        @change=${e => { this.filtercheckbox9.value=this.filtercheckbox9.checked}} value=\"${this.fldDefaultValue(fld.filtercheckbox9)}\"\r\n                    ></mwc-checkbox>\r\n                        </mwc-formfield>\r\n                    `}                              \r\n                    ${!fld.filtercheckbox10 ?\r\n                    html``: html`        \r\n                        <mwc-formfield label=\"${this.fieldLabel(fld.filtercheckbox10)}\" >\r\n                        <mwc-checkbox id=\"filtercheckbox10\" ?checked=${this.fldDefaultValue(fld.filtercheckbox10)} ?disabled=${this.isFieldDisabled(fld.filtercheckbox10)}\r\n                        @change=${e => { this.filtercheckbox10.value=this.filtercheckbox10.checked}} value=\"${this.fldDefaultValue(fld.filtercheckbox10)}\"\r\n                    ></mwc-checkbox>\r\n                        </mwc-formfield>\r\n                    `}                              \r\n\r\n                    ${!fld.filterdate1 ?html``: html`<mwc-textfield id=\"filterdate1\" label=\"${this.fieldLabel(fld.filterdate1)}\"  ?disabled=${this.isFieldDisabled(fld.filterdate1)} type=\"date\"></mwc-textfield>`}\r\n                    ${!fld.filterdate2 ?html``: html`<mwc-textfield id=\"filterdate2\" label=\"${this.fieldLabel(fld.filterdate2)}\"  ?disabled=${this.isFieldDisabled(fld.filterdate2)} type=\"date\"></mwc-textfield>`}\r\n                    ${!fld.filterdate3 ?html``: html`<mwc-textfield id=\"filterdate3\" label=\"${this.fieldLabel(fld.filterdate3)}\"  ?disabled=${this.isFieldDisabled(fld.filterdate3)} type=\"date\"></mwc-textfield>`}\r\n                    ${!fld.filterdate4 ?html``: html`<mwc-textfield id=\"date4\" label=\"${this.fieldLabel(fld.filterdate4)}\"  ?disabled=${this.isFieldDisabled(fld.filterdate4)} type=\"date\"></mwc-textfield>`}\r\n                    ${!fld.filterdate5 ?html``: html`<mwc-textfield id=\"date5\" label=\"${this.fieldLabel(fld.filterdate5)}\"  ?disabled=${this.isFieldDisabled(fld.filterdate5)} type=\"date\"></mwc-textfield>`}                           \r\n                    ${!fld.filterdate6 ?html``: html`<mwc-textfield id=\"date6\" label=\"${this.fieldLabel(fld.filterdate6)}\"  ?disabled=${this.isFieldDisabled(fld.filterdate6)} type=\"date\"></mwc-textfield>`} \r\n                    ${!fld.filterdate7 ?html``: html`<mwc-textfield id=\"date7\" label=\"${this.fieldLabel(fld.filterdate7)}\"  ?disabled=${this.isFieldDisabled(fld.filterdate7)} type=\"date\"></mwc-textfield>`}\r\n                    ${!fld.filterdate8 ?html``: html`<mwc-textfield id=\"date8\" label=\"${this.fieldLabel(fld.filterdate8)}\"  ?disabled=${this.isFieldDisabled(fld.filterdate8)} type=\"date\"></mwc-textfield>`}\r\n                    ${!fld.filterdate9 ?html``: html`<mwc-textfield id=\"date9\" label=\"${this.fieldLabel(fld.filterdate9)}\"  ?disabled=${this.isFieldDisabled(fld.filterdate9)} type=\"date\"></mwc-textfield>`}\r\n                    ${!fld.filterdate10 ?html``: html`<mwc-textfield id=\"filterdate10\" label=\"${this.fieldLabel(fld.filterdate10)}  ?disabled=${this.isFieldDisabled(fld.filterdate10)}\" type=\"date\"></mwc-textfield>`}\r\n\r\n                    ${!fld.filterdatetime1 ?html``: html`<input id=\"datetime1\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n                    ${!fld.filterdatetime2 ?html``: html`<input id=\"datetime2\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n                    ${!fld.filterdatetime3 ?html``: html`<input id=\"datetime3\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n                    ${!fld.filterdatetime4 ?html``: html`<input id=\"datetime4\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n                    ${!fld.filterdatetime5 ?html``: html`<input id=\"datetime5\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n                    ${!fld.filterdatetime6 ?html``: html`<input id=\"datetime6\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n                    ${!fld.filterdatetime7 ?html``: html`<input id=\"datetime7\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n                    ${!fld.filterdatetime8 ?html``: html`<input id=\"datetime8\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n                    ${!fld.filterdatetime9 ?html``: html`<input id=\"datetime9\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n                    ${!fld.filterdatetime10 ?html``: html`<input id=\"datetime10\" type=\"datetime-local\" dialogInitialFocus>`}   \r\n\r\n                    \r\n                    ${!fld.filterdaterange1 ?\r\n                        html``: html`    \r\n                            <div style=\"display:flex\">    \r\n                            <mwc-textfield id=\"filterdaterange1dateStart\" label=\"${this.fieldLabel(fld.filterdaterange1.filterdateStart)}\" type=\"date\" value=\"${until(this.fldDefaultValue(fld.filterdaterange1.filterdateStart), '')}\"></mwc-textfield>\r\n                            <mwc-textfield id=\"filterdaterange1dateEnd\" label=\"${this.fieldLabel(fld.filterdaterange1.filterdateEnd)}\" type=\"date\" value=\"${until(this.fldDefaultValue(fld.filterdaterange1.filterdateEnd), '')}\"></mwc-textfield>\r\n                            </div>\r\n                        `}                       \r\n                    ${!fld.filterdaterange1 ?\r\n                    html``: html`    \r\n                        <div style=\"display:flex\">    \r\n                        <mwc-textfield id=\"daterange1dateStart\" label=\"${this.fieldLabel(fld.filterdaterange1.filterdateStart)}\" type=\"date\"></mwc-textfield>\r\n                        <mwc-textfield id=\"daterange1dateEnd\" label=\"${this.fieldLabel(fld.filterdaterange1.filterdateEnd)}\" type=\"date\"></mwc-textfield>\r\n                        </div>\r\n                    `}                       \r\n                    ${!fld.filterdaterange2 ?\r\n                    html``: html`    \r\n                        <div style=\"display:flex\">    \r\n                        <mwc-textfield id=\"daterange2dateStart\" label=\"${this.fieldLabel(fld.filterdaterange2.filterdateStart)}\" type=\"date\"></mwc-textfield>\r\n                        <mwc-textfield id=\"daterange2dateEnd\" label=\"${this.fieldLabel(fld.filterdaterange2.filterdateEnd)}\" type=\"date\"></mwc-textfield>\r\n                        </div>\r\n                    `}                       \r\n                    ${!fld.filterdaterange3 ?\r\n                    html``: html`    \r\n                        <div style=\"display:flex\">    \r\n                        <mwc-textfield id=\"daterange3dateStart\" label=\"${this.fieldLabel(fld.filterdaterange3.filterdateStart)}\" type=\"date\"></mwc-textfield>\r\n                        <mwc-textfield id=\"daterange3dateEnd\" label=\"${this.fieldLabel(fld.filterdaterange3.filterdateEnd)}\" type=\"date\"></mwc-textfield>\r\n                        </div>\r\n                    `}                       \r\n                    ${!fld.filterdaterange4 ?\r\n                    html``: html`    \r\n                        <div style=\"display:flex\">    \r\n                        <mwc-textfield id=\"daterange4dateStart\" label=\"${this.fieldLabel(fld.filterdaterange4.filterdateStart)}\" type=\"date\"></mwc-textfield>\r\n                        <mwc-textfield id=\"daterange4dateEnd\" label=\"${this.fieldLabel(fld.filterdaterange4.filterdateEnd)}\" type=\"date\"></mwc-textfield>\r\n                        </div>\r\n                    `}                       \r\n                    ${!fld.filterdaterange5 ?\r\n                    html``: html`    \r\n                        <div style=\"display:flex\">    \r\n                        <mwc-textfield id=\"daterange5dateStart\" label=\"${this.fieldLabel(fld.filterdaterange5.filterdateStart)}\" type=\"date\"></mwc-textfield>\r\n                        <mwc-textfield id=\"daterange5dateEnd\" label=\"${this.fieldLabel(fld.filterdaterange5.filterdateEnd)}\" type=\"date\"></mwc-textfield>\r\n                        </div>\r\n                    `}                                   \r\n\r\n                ${!fld.filterlist1 ?html``: html`        \r\n                    <mwc-select id=\"list1\" label=\"${this.fieldLabel(fld.filterlist1)}\" @selected=${this.valueSelected}  ?disabled=${this.isFieldDisabled(fld.filterlist1)} >\r\n                        ${this.filterlistEntries(fld.filterlist1)}</mwc-select>`}  \r\n                ${!fld.filterlist2 ?html``: html`        \r\n                    <mwc-select id=\"list2\" label=\"${this.fieldLabel(fld.filterlist2)}\" ?disabled=${this.isFieldDisabled(fld.filterlist2)} >\r\n                        ${this.filterlistEntries(fld.filterlist2)}</mwc-select>`}  \r\n                ${!fld.filterlist3 ?html``: html`        \r\n                    <mwc-select id=\"list3\" label=\"${this.fieldLabel(fld.filterlist3)}\" ?disabled=${this.isFieldDisabled(fld.filterlist3)} >\r\n                        ${this.filterlistEntries(fld.filterlist3)}</mwc-select>`}  \r\n                ${!fld.filterlist4 ?html``: html`        \r\n                    <mwc-select id=\"list4\" label=\"${this.fieldLabel(fld.filterlist4)}\"  ?disabled=${this.isFieldDisabled(fld.filterlist4)} >\r\n                        ${this.filterlistEntries(fld.filterlist4)}</mwc-select>`}  \r\n                ${!fld.filterlist5 ?html``: html`        \r\n                    <mwc-select id=\"list5\" label=\"${this.fieldLabel(fld.filterlist5)}\"  ?disabled=${this.isFieldDisabled(fld.filterlist5)} >\r\n                        ${this.filterlistEntries(fld.filterlist5)}</mwc-select>`}  \r\n                ${!fld.filterlist6 ?html``: html`        \r\n                    <mwc-select id=\"list6\" label=\"${this.fieldLabel(fld.filterlist6)}\" ?disabled=${this.isFieldDisabled(fld.filterlist6)} >\r\n                        ${this.filterlistEntries(fld.filterlist6)}</mwc-select>`}  \r\n                ${!fld.filterlist7 ?html``: html`        \r\n                    <mwc-select id=\"list7\" label=\"${this.fieldLabel(fld.filterlist7)}\" ?disabled=${this.isFieldDisabled(fld.filterlist7)} >\r\n                        ${this.filterlistEntries(fld.filterlist7)}</mwc-select>`}  \r\n                ${!fld.filterlist8 ?html``: html`        \r\n                    <mwc-select id=\"list8\" llabel=\"${this.fieldLabel(fld.filterlist8)}\" ?disabled=${this.isFieldDisabled(fld.filterlist8)} >\r\n                        ${this.filterlistEntries(fld.filterlist8)}</mwc-select>`}  \r\n                ${!fld.filterlist9 ?html``: html`        \r\n                    <mwc-select id=\"list9\" label=\"${this.fieldLabel(fld.filterlist9)}\" ?disabled=${this.isFieldDisabled(fld.filterlist9)} >\r\n                        ${this.filterlistEntries(fld.filterlist9)}</mwc-select>`}  \r\n                ${!fld.filterlist10 ?html``: html`        \r\n                    <mwc-select id=\"list10\" label=\"${this.fieldLabel(fld.filterlist10)}\" ?disabled=${this.isFieldDisabled(fld.filterlist10)} >\r\n                        ${this.filterlistEntries(fld.filterlist10)}</mwc-select>`}  \r\n\r\n                `            \r\n            )}   \r\n        `}        \r\n    `\r\n    }\r\n    get dateInput() {return this.shadowRoot.querySelector(\"input#dateInput\")}\r\n    setNewDate() {\r\n      if (this.filterdateInput.value) {\r\n        this.dialogAccept(false)\r\n      }\r\n    }\r\n    declineDialog(){\r\n        this.fieldsShouldBeReset=true\r\n    }\r\n    acceptedGenericDialog(e){\r\n        this.fieldsShouldBeReset=true\r\n        if (this.checkMandatoryFieldsNotEmpty()){\r\n            this.dialogAccept(false)\r\n        }else{\r\n            console.log('Accepted Generic Dialog but mandatories pending then action not performed')\r\n           // alert('mandatories pending')\r\n           e.stopPropagation();\r\n        }\r\n    }\r\n    checkMandatoryFieldsNotEmpty(){                \r\n        //console.log(this.fields)\r\n        let dlgFlds=this.fields\r\n        for (let i=0;i<dlgFlds.length;i++){            \r\n            let fldObj=dlgFlds[i]\r\n            //console.log('checkMandatoryFieldsNotEmpty', fldObj)\r\n            let keyName=Object.keys(fldObj)\r\n            let fldDef=fldObj[keyName[0]]\r\n            if ((fldDef.optional===undefined||\r\n                fldDef.optional===false)&&this[keyName].value.length==0){\r\n                alert('Field '+fldDef[\"label_\"+this.lang]+' is mandatory')\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    defaultValue(){\r\n        if (this.fieldsShouldBeReset===true){\r\n            this.resetFields()\r\n            this.fieldsShouldBeReset=false\r\n        }\r\n        let dlgFlds=fields\r\n        if (dlgFlds===undefined){\r\n            //alert('The dialog '+this.actionBeingPerformedModel.dialogInfo.name+' has no fields property for adding the fields, please review.')\r\n            return\r\n        }\r\n        for (let i=0;i<dlgFlds.length;i++){\r\n            let fldObj=dlgFlds[i]\r\n            let keyName=Object.keys(fldObj)\r\n            \r\n            //if (==null){            \r\n            if (fldObj[keyName].default_value!==undefined&&fldObj[keyName].default_value!==null){\r\n                //if (this[keyName[0]!==null]){\r\n                    this[keyName[0]].value=fldObj[keyName].default_value\r\n                //}\r\n            }\r\n            if (fldObj[keyName].selObjectPropertyName!==undefined&&fldObj[keyName].selObjectPropertyName!==null){\r\n                this[keyName[0]].value=this.selectedItems[0][fldObj[keyName].selObjectPropertyName]\r\n            }\r\n            if (fldObj[keyName].internalVariableObjName!==undefined&&fldObj[keyName].internalVariableObjName!==null&&\r\n                fldObj[keyName].internalVariableObjProperty!==undefined&&fldObj[keyName].internalVariableObjProperty!==null){\r\n                this[keyName[0]].value=this[fldObj[keyName].internalVariableObjName][0][fldObj[keyName].internalVariableObjProperty]\r\n            }\r\n        }\r\n    }    \r\n    resetFields(){           \r\n        //alert('reset Fields now')   \r\n        let dlgFlds=fields\r\n        if (dlgFlds===undefined){\r\n            //alert('The dialog '+this.actionBeingPerformedModel.dialogInfo.name+' has no fields property for adding the fields, please review.')\r\n            return\r\n        }\r\n        for (let i=0;i<dlgFlds.length;i++){\r\n            let fldObj=dlgFlds[i]            \r\n            let keyName=Object.keys(fldObj)\r\n            if (this[keyName]!==null){\r\n               // console.log(keyName[0])\r\n                if (keyName[0].includes('list')){\r\n\r\n                    this[keyName[0]].value=[]\r\n                }else{\r\n                    if (this[keyName]!==undefined&&this[keyName[0]]!==undefined){\r\n                        this[keyName[0]].value=\"\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    valueSelected(e){\r\n        return // The code below is there only for trying to make lists depending on another list, does not work yet\r\n        //alert('ds '+ e.target.id+this[e.target.id].value)\r\n\r\n        // let triggeredElem=fields.filter(p => p == e.target.id)\r\n\r\n        let cleanParams = {}\r\n        // Object.entries(fields).map(([key, value]) => {\r\n        //   if (value != null || value != undefined) {\r\n        //     cleanParams[key] = value\r\n        //   }\r\n        // })\r\n        // console.log('cleanParams', cleanParams)\r\n        let fld =fields[1].filterlist2//(([key, value]) =>{\r\n            //cleanParams=value\r\n        //})\r\n        console.log('fld', fld)\r\n        let thisNewList2=[]\r\n        thisNewList2=this.filterlistEntries(fld)\r\n        console.log('thisNewList2', thisNewList2)\r\n        //alert(fields[e.target.id].valuesFromMasterData.recalculateObjectOnEntrySelected)\r\n        //console.log(e.targetValue)\r\n    }\r\n    listEntries(fld){\r\n        console.log('listEntries')\r\n        let blankEmpty={keyName:\"\", keyValue_en:\"\", keyValue_es:\"\"}\r\n        let newList=[]\r\n        if (fld===undefined){\r\n            return html`<mwc-list-item></mwc-list-item>`\r\n\r\n        }\r\n        if (fld.addBlankValueOnTop!==undefined&&fld.addBlankValueOnTop===true){\r\n            newList.push(blankEmpty)\r\n        }\r\n        if (fld.valuesFromMasterData!==undefined){\r\n            let MDentriesArr=this.filterlistEntriesFromMasterData(fld.valuesFromMasterData)\r\n            if (MDentriesArr.length>0){\r\n                MDentriesArr.forEach(item =>newList.push(item))\r\n            }\r\n        }else{\r\n            fld.items.forEach(item =>newList.push(item))\r\n        }\r\n        if (fld.addBlankValueAtBottom!==undefined&&fld.addBlankValueAtBottom===true){\r\n            newList.push(blankEmpty)\r\n        }\r\n    \r\n        return html`\r\n        ${newList.map((c, i) =>\r\n            html`<mwc-list-item value=\"${c.keyName}\" ?selected=${i == 0}>${c[\"keyValue_\" + this.lang]}</mwc-list-item>`\r\n        )}\r\n        `\r\n    }\r\n    listEntriesFromMasterData(fldMDDef){\r\n        if (this.masterData===undefined){return entries}\r\n        console.log('masterData', this.masterData)\r\n        console.log('actionBeingPerformedModel', this.actionBeingPerformedModel)\r\n        let entries=[]\r\n        \r\n        if (this.masterData[fldMDDef.propertyNameContainer]===undefined){\r\n            alert('Property '+fldMDDef.propertyNameContainer+' not found in Master Data')\r\n            return entries\r\n        }\r\n        if (fldMDDef.filterInFirstLevel===undefined||fldMDDef.filterInFirstLevel!==true){\r\n            this.masterData[fldMDDef.propertyNameContainer].forEach(item =>{\r\n                console.log('item', item, 'fldMDDef.propertyNameContainer.propertyKeyName', fldMDDef.propertyKeyName)\r\n                let blankEmpty={keyName:'', keyValue_en:'', keyValue_es:''}\r\n                blankEmpty.keyName=item[fldMDDef.propertyKeyName]\r\n                blankEmpty.keyValue_en=item[fldMDDef.propertyKeyValueEn]\r\n                blankEmpty.keyValue_es=item[fldMDDef.propertyKeyValueEs]\r\n                console.log('blankEmpty', blankEmpty)\r\n                entries.push(blankEmpty)\r\n            })\r\n        }else{\r\n            if ((fldMDDef.elementName===undefined||fldMDDef.elementName===null)&&(fldMDDef.propertyNameContainerLevelfixValue===undefined||fldMDDef.propertyNameContainerLevelfixValue===null)){\r\n                alert('Property elementName or propertyNameContainerLevelfixValue is mandatory when filterInFirstLevel=true. Review model definition')\r\n                return entries\r\n            }\r\n            let filterValue=undefined\r\n            if (fldMDDef.propertyNameContainerLevelfixValue!==undefined){\r\n                filterValue=fldMDDef.propertyNameContainerLevelfixValue                \r\n            }else{\r\n                filterValue=this[fldMDDef.elementName].value\r\n            }\r\n            if (filterValue===undefined){return entries}\r\n            let result = this.masterData[fldMDDef.propertyNameContainer].find(item => item.name === filterValue);\r\n            if (result===undefined){return entries}\r\n            //alert(filterValue)\r\n            // if (fldMDDef.propertyNameContainerLevel2fixValue!==undefined&&fldMDDef.propertyNameContainerLevel3){\r\n            //     entries=getListInLevel3(fldMDDef, result[fldMDDef.propertyNameContainerLevel2])\r\n            //     return entries\r\n            // }\r\n            result[fldMDDef.propertyNameContainerLevel2].forEach(item =>{\r\n                console.log('item', item, 'fldMDDef.propertyNameContainer.propertyKeyName', fldMDDef.propertyKeyName)\r\n                let blankEmpty={keyName:'', keyValue_en:'', keyValue_es:''}\r\n                blankEmpty.keyName=item[fldMDDef.propertyKeyName]\r\n                blankEmpty.keyValue_en=item[fldMDDef.propertyKeyValueEn]\r\n                blankEmpty.keyValue_es=item[fldMDDef.propertyKeyValueEs]\r\n                console.log('blankEmpty', blankEmpty)\r\n                entries.push(blankEmpty)\r\n            })\r\n            console.log('entries at end', entries)\r\n            return entries\r\n            \r\n        }        \r\n        //let blankEmpty={keyName:\"1\", keyValue_en:\"2\", keyValue_es:\"3\"}\r\n        //entries.push(blankEmpty)\r\n        return entries\r\n    }\r\n    getListInLevel3(fldMDDef, level2Arr){\r\n        let level3Arr = level2Arr.filter(p => p[propertyNameContainerLevel2PropertyKeyName] == fldMDDef.propertyNameContainerLevel2fixValue)\r\n        level3Arr[fldMDDef.propertyNameContainerLevel3].forEach(item =>{\r\n            console.log('item', item, 'fldMDDef.propertyNameContainer.propertyKeyName', fldMDDef.propertyNameContainerLevel2PropertyKeyName)\r\n            let blankEmpty={keyName:'', keyValue_en:'', keyValue_es:''}\r\n            blankEmpty.keyName=item[fldMDDef.propertyKeyName]\r\n            blankEmpty.keyValue_en=item[fldMDDef.propertyKeyValueEn]\r\n            blankEmpty.keyValue_es=item[fldMDDef.propertyKeyValueEs]\r\n            console.log('blankEmpty', blankEmpty)\r\n            entries.push(blankEmpty)\r\n        })\r\n\r\n    }\r\n    fldDisabled(){\r\n        return true\r\n    }   \r\n    \r\n    get filtertext1() {    return this.shadowRoot.querySelector(\"mwc-textfield#filtertext1\")    }    \r\n\r\n    get text1() {    return this.shadowRoot.querySelector(\"mwc-textfield#text1\")    }        \r\n    get filtertext2() {    return this.shadowRoot.querySelector(\"mwc-textfield#filtertext2\")    }        \r\n    get filtertext3() {    return this.shadowRoot.querySelector(\"mwc-textfield#filtertext3\")    }        \r\n    get filtertext4() {    return this.shadowRoot.querySelector(\"mwc-textfield#filtertext4\")    }        \r\n    get filtertext5() {    return this.shadowRoot.querySelector(\"mwc-textfield#filtertext5\")    }        \r\n    get filtertext6() {    return this.shadowRoot.querySelector(\"mwc-textfield#filtertext6\")    }        \r\n    get filtertext7() {    return this.shadowRoot.querySelector(\"mwc-textfield#filtertext7\")    }        \r\n    get filtertext8() {    return this.shadowRoot.querySelector(\"mwc-textfield#filtertext8\")    }        \r\n    get filtertext9() {    return this.shadowRoot.querySelector(\"mwc-textfield#filtertext9\")    }        \r\n    get filtertext10() {    return this.shadowRoot.querySelector(\"mwc-textfield#filtertext10\")    }        \r\n     get filtercheckbox1() {    return this.shadowRoot.querySelector(\"mwc-checkbox#filtercheckbox1\")    }        \r\n    get filtercheckbox2() {    return this.shadowRoot.querySelector(\"mwc-checkbox#filtercheckbox2\")    }        \r\n    get filtercheckbox3() {    return this.shadowRoot.querySelector(\"mwc-checkbox#filtercheckbox3\")    }        \r\n    get filtercheckbox4() {    return this.shadowRoot.querySelector(\"mwc-checkbox#filtercheckbox4\")    }        \r\n    get filtercheckbox5() {    return this.shadowRoot.querySelector(\"mwc-checkbox#filtercheckbox5\")    }        \r\n    get filtercheckbox6() {    return this.shadowRoot.querySelector(\"mwc-checkbox#filtercheckbox6\")    }        \r\n    get filtercheckbox7() {    return this.shadowRoot.querySelector(\"mwc-checkbox#filtercheckbox7\")    }        \r\n    get filtercheckbox8() {    return this.shadowRoot.querySelector(\"mwc-checkbox#filtercheckbox8\")    }        \r\n    get filtercheckbox9() {    return this.shadowRoot.querySelector(\"mwc-checkbox#filtercheckbox9\")    }        \r\n    get filtercheckbox10() {    return this.shadowRoot.querySelector(\"mwc-checkbox#filtercheckbox10\")    }        \r\n    get filterdate1() {    return this.shadowRoot.querySelector(\"mwc-textfield#filterdate1\")    }        \r\n    get filterdate2() {    return this.shadowRoot.querySelector(\"mwc-textfield#filterdate2\")    }    \r\n    get filterdate3() {    return this.shadowRoot.querySelector(\"mwc-textfield#filterdate3\")    }        \r\n    get date4() {    return this.shadowRoot.querySelector(\"mwc-textfield#date4\")    }    \r\n    get date5() {    return this.shadowRoot.querySelector(\"mwc-textfield#date5\")    }        \r\n    get date6() {    return this.shadowRoot.querySelector(\"mwc-textfield#date6\")    }    \r\n    get date7() {    return this.shadowRoot.querySelector(\"mwc-textfield#date7\")    }        \r\n    get date8() {    return this.shadowRoot.querySelector(\"mwc-textfield#date8\")    }    \r\n    get date9() {    return this.shadowRoot.querySelector(\"mwc-textfield#date9\")    }        \r\n    get filterdate10() {    return this.shadowRoot.querySelector(\"mwc-textfield#filterdate10\")    }    \r\n    get datetime1() {    return this.shadowRoot.querySelector(\"input#datetime1\")    }        \r\n    get datetime2() {    return this.shadowRoot.querySelector(\"input#datetime2\")    }    \r\n    get datetime3() {    return this.shadowRoot.querySelector(\"input#datetime3\")    }        \r\n    get datetime4() {    return this.shadowRoot.querySelector(\"input#datetime4\")    }    \r\n    get datetime5() {    return this.shadowRoot.querySelector(\"input#datetime5\")    }        \r\n    get datetime6() {    return this.shadowRoot.querySelector(\"input#datetime6\")    }    \r\n    get datetime7() {    return this.shadowRoot.querySelector(\"input#datetime7\")    }        \r\n    get datetime8() {    return this.shadowRoot.querySelector(\"input#datetime8\")    }    \r\n    get datetime9() {    return this.shadowRoot.querySelector(\"input#datetime9\")    }        \r\n    get datetime10() {    return this.shadowRoot.querySelector(\"input#datetime10\")    }    \r\n    \r\n    get filterdaterange1dateStart() {    return this.shadowRoot.querySelector(\"mwc-textfield#filterdaterange1dateStart\")    }        \r\n    get filterdaterange1dateEnd() {    return this.shadowRoot.querySelector(\"mwc-textfield#filterdaterange1dateEnd\")    }    \r\n\r\n\r\n    get daterange1dateStart() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange1dateStart\")    }        \r\n    get daterange1dateEnd() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange1dateEnd\")    }    \r\n    get daterange2dateStart() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange2dateStart\")    }        \r\n    get daterange2dateEnd() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange2dateEnd\")    }    \r\n    get daterange3dateStart() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange3dateStart\")    }        \r\n    get daterange3dateEnd() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange3dateEnd\")    }    \r\n    get daterange4dateStart() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange4dateStart\")    }        \r\n    get daterange4dateEnd() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange4dateEnd\")    }    \r\n    get daterange5dateStart() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange5dateStart\")    }        \r\n    get daterange5dateEnd() {    return this.shadowRoot.querySelector(\"mwc-textfield#daterange5dateEnd\")    }    \r\n        \r\n    get filternumber1() {    return this.shadowRoot.querySelector(\"mwc-textfield#filternumber1\")    }    \r\n    get filternumber2() {    return this.shadowRoot.querySelector(\"mwc-textfield#filternumber2\")    }    \r\n    get filternumber3() {    return this.shadowRoot.querySelector(\"mwc-textfield#filternumber3\")    }    \r\n    get filternumber4() {    return this.shadowRoot.querySelector(\"mwc-textfield#filternumber4\")    }    \r\n    get filternumber5() {    return this.shadowRoot.querySelector(\"mwc-textfield#filternumber5\")    }    \r\n    get filternumber6() {    return this.shadowRoot.querySelector(\"mwc-textfield#filternumber6\")    }    \r\n    get filternumber7() {    return this.shadowRoot.querySelector(\"mwc-textfield#filternumber7\")    }    \r\n    get filternumber8() {    return this.shadowRoot.querySelector(\"mwc-textfield#filternumber8\")    }    \r\n    get filternumber9() {    return this.shadowRoot.querySelector(\"mwc-textfield#filternumber9\")    }    \r\n    get filternumber10() {    return this.shadowRoot.querySelector(\"mwc-textfield#filternumber10\")    }    \r\n  \r\n    get list1() {    return this.shadowRoot.querySelector(\"mwc-select#list1\")    }\r\n    get list2() {    return this.shadowRoot.querySelector(\"mwc-select#list2\")    }\r\n    get list3() {    return this.shadowRoot.querySelector(\"mwc-select#list3\")    }\r\n    get list4() {    return this.shadowRoot.querySelector(\"mwc-select#list4\")    }\r\n    get list5() {    return this.shadowRoot.querySelector(\"mwc-select#list5\")    }    \r\n    get list6() {    return this.shadowRoot.querySelector(\"mwc-select#list6\")    }    \r\n    get list7() {    return this.shadowRoot.querySelector(\"mwc-select#list7\")    }    \r\n    get list8() {    return this.shadowRoot.querySelector(\"mwc-select#list8\")    }    \r\n    get list9() {    return this.shadowRoot.querySelector(\"mwc-select#list9\")    }    \r\n    get list10() {    return this.shadowRoot.querySelector(\"mwc-select#list10\")    }  \r\n    \r\n    get listMDprocedureUsers() {return this.shadowRoot.querySelector(\"mwc-select#listMDprocedureUsers\")}\r\n    get listMDSamplerPersonalAreas() {return this.shadowRoot.querySelector(\"mwc-select#listMDSamplerPersonalAreas\")}\r\n    get listMDvariablesSet() {return this.shadowRoot.querySelector(\"mwc-select#listMDvariablesSet\")}\r\n    get listMDvariables() {return this.shadowRoot.querySelector(\"mwc-select#listMDvariables\")}\r\n    get listSelectedStudyIndividuals() {return this.shadowRoot.querySelector(\"mwc-select#listSelectedStudyIndividuals\")}\r\n    get listSelectedStudyIndividualSamples() {return this.shadowRoot.querySelector(\"mwc-select#listSelectedStudyIndividualSamples\")}\r\n         \r\n  }\r\n}","import { html, nothing, LitElement } from 'lit';\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js';\r\n\r\nimport { ButtonsFunctions } from \"../Buttons/ButtonsFunctions\";\r\nimport { AuditFunctions } from \"../Audit/AuditFunctions\";\r\nimport \"../Audit/audit-dialog\";\r\n\r\nimport { ModuleEnvMonitClientMethods } from \"../../module_env_monit/ModuleEnvMonitClientMethods\";\r\nimport { TrazitGenericDialogs } from \"../GenericDialogs/TrazitGenericDialogs\";\r\nimport { TrazitReactivateObjectsDialog } from \"../GenericDialogs/TrazitReactivateObjectsDialog\";\r\nimport { TrazitEnterResultWithSpec } from \"../GenericDialogs/TrazitEnterResultWithSpec\";\r\nimport { ModuleEnvMonitDialogsMicroorganism } from \"../../module_env_monit/Dialogs/ModuleEnvMonitDialogsMicroorganism\";\r\nimport { TrazitInvestigationsDialog } from \"../GenericDialogs/TrazitInvestigationsDialog\";\r\nimport { TrazitTestScriptNewStepDialog } from \"../GenericDialogs/TrazitTestScriptNewStepDialog\";\r\nimport { TrazitCredentialsDialogs } from \"../GenericDialogs/TrazitCredentialsDialogs\";\r\n\r\nimport \"@vaadin/vaadin-grid/vaadin-grid\";\r\nimport \"@vaadin/vaadin-grid/vaadin-grid-column\";\r\nimport \"@vaadin/vaadin-grid/vaadin-grid-selection-column\";\r\nimport \"@vaadin/vaadin-grid/vaadin-grid-sort-column\";\r\nimport \"@vaadin/vaadin-grid/vaadin-grid-filter-column\";\r\nimport \"@doubletrade/lit-datatable\";\r\nimport \"@google-web-components/google-chart\";\r\nimport '../MultiSelect';\r\nimport '../grid_with_buttons/gridCellTooltip'\r\nimport '../grid_with_buttons/tableRowDetail';\r\nimport '@material/mwc-button';\r\nimport '@material/mwc-textfield';\r\n\r\nimport { ReadOnlyTableParts } from \"./ReadOnlyTableParts\";\r\n\r\nimport { TrazitFormsElements } from \"../GenericDialogs/TrazitFormsElements\";\r\nimport { GridFunctions } from \"../grid_with_buttons/GridFunctions\";\r\n\r\nimport '../DragDropBox/index';  \r\nimport { FeaturesDynamicFieldValue } from \"../../features/dynamicFieldValue\";\r\n\r\nexport function DataViews(base) {\r\n  let contextMenu = undefined;\r\n  return class extends FeaturesDynamicFieldValue(TrazitTestScriptNewStepDialog(ReadOnlyTableParts(GridFunctions(TrazitFormsElements(\r\n    TrazitCredentialsDialogs(\r\n      AuditFunctions(\r\n        (\r\n          TrazitInvestigationsDialog(\r\n            ModuleEnvMonitDialogsMicroorganism(\r\n              TrazitEnterResultWithSpec(\r\n                TrazitReactivateObjectsDialog(\r\n                  TrazitGenericDialogs(\r\n                    ModuleEnvMonitClientMethods(\r\n                      AuditFunctions(ButtonsFunctions(LitElement))\r\n                    )\r\n                  )\r\n                )\r\n              )\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  ))))) {\r\n    kpiChartFran1(elem, data) {\r\n      if (elem === undefined) { return html`` }\r\n      if (elem.hideNoDataMessage !== undefined && elem.hideNoDataMessage === true && data === undefined) { return html`` }\r\n      if (data === undefined && this.data !== undefined) { data = this.data }\r\n      //console.log('kpiChartFran', 'elem', elem, 'data', this.data)\r\n      return html`\r\n        ${elem.display_chart !== true\r\n          ? nothing\r\n          : html`\r\n              ${this.chartStyle(elem.chart_name)}\r\n              <google-chart\r\n                id=\"${elem.chart_name}\"\r\n                title=\"${elem.chart_title[\"label_\" + this.lang]}\"\r\n                type=\"${elem.chart_type}\"\r\n                .data=\"${this.getChartData(elem, data)}\"\r\n                .options=\"${this.getChartOptions(elem)}\"\r\n                style=\"${elem.chart_style !== undefined\r\n              ? elem.chart_style\r\n              : \"height:400px; width: 100%;\"\r\n            }\r\n              ></google-chart>\r\n            `}\r\n      `;\r\n    }\r\n\r\n    getDataFromRoot(elem, data) {\r\n      if (this.viewModelFromProcModel!==undefined&&this.viewModelFromProcModel?.viewQuery?.dataResponse!==undefined&&this.viewModelFromProcModel?.viewQuery?.dataResponse===\"ArrayInRoot\"){\r\n        return data.queryData?data.queryData:''\r\n      }\r\n      if (elem !== undefined && elem.contextVariableName !== undefined) {\r\n        if (this[elem.contextVariableName] !== undefined) {\r\n          data = this[elem.contextVariableName];\r\n        }\r\n      }\r\n      if (data === null || data === undefined) {\r\n        return undefined;\r\n      }\r\n      if (elem.endPointPropertyArray !== undefined) {\r\n        if (elem.endPointPropertyArray.length === 0) {\r\n          return data;\r\n        }\r\n        if (\r\n          elem.endPointPropertyArray.length === 1 &&\r\n          elem.endPointPropertyArray[0].toUpperCase() === \"ROOT\"\r\n        ) {\r\n          return data;\r\n        }\r\n        //const numObjectsToSkip = elem.endPointPropertyArray.length - 1;\r\n        //const propertyName = elem.endPointPropertyArray[numObjectsToSkip];\r\n        let i = 0;\r\n        let subJSON = {};\r\n        //data = data[elem.endPointPropertyArray[0]][0]\r\n        for (i = 0; i < elem.endPointPropertyArray.length; i++) {\r\n          if (data === null) {\r\n            return undefined;\r\n          }\r\n          let propertyName = elem.endPointPropertyArray[i];\r\n          if (Array.isArray(data[propertyName])) {\r\n            if (i < elem.endPointPropertyArray.length - 1) {\r\n              subJSON = data[propertyName][0];\r\n            } else {\r\n              return data[propertyName];\r\n            }\r\n          } else {\r\n            subJSON = data[propertyName];\r\n          }\r\n          if (typeof subJSON === \"undefined\") {\r\n            return data;\r\n          } else {\r\n            data = subJSON;\r\n          }\r\n        }\r\n        return data;\r\n        if (typeof subJSON === \"undefined\") {\r\n          return undefined;\r\n        } else if (elem.endPointPropertyArray.length % 2 === 0) {\r\n          // If the input array has an even number of elements, skip one more object level before recursing\r\n          return getValueFromNestedJSON(\r\n            subJSON,\r\n            elem.endPointPropertyArray.slice(0, numObjectsToSkip)\r\n          );\r\n        } else {\r\n          // Otherwise, recurse on the sub-JSON with the remaining elem.endPointPropertyArray elements\r\n          return getValueFromNestedJSON(\r\n            subJSON,\r\n            elem.endPointPropertyArray.slice(0, numObjectsToSkip)\r\n          );\r\n        }\r\n      } else {\r\n        if (\r\n          elem.endPointResponseObject !== undefined &&\r\n          elem.endPointResponseObject2 !== undefined\r\n        ) {\r\n          let dataToRet = [];\r\n          dataToRet = data[elem.endPointResponseObject];\r\n          if (dataToRet !== undefined) {\r\n            return dataToRet[elem.endPointResponseObject2];\r\n          } else {\r\n            return [];\r\n          }\r\n        } else {\r\n          if (String(elem.endPointResponseObject).toUpperCase() === \"ROOT\") {\r\n            if (!Array.isArray(data)) {\r\n              let dataArr = [];\r\n              dataArr.push(data);\r\n              return dataArr;\r\n            }\r\n            return data;\r\n          } else {\r\n            return data[elem.endPointResponseObject];\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    jsonViewer(elem, data) {\r\n      // console.log('jsonViewer', 'elem', elem, 'data', data, 'dataToDisplay', data[elem.endPointResponseObject])\r\n      return html`\r\n        <div style=\"position:relative;\">\r\n          ${elem === undefined || elem.title === undefined\r\n          ? nothing\r\n          : html`<span\r\n                style=\"color: rgb(20, 115, 230);font-size: 30px;margin-top: 10px;font-weight: bold;\"\r\n                >${elem.title[\"label_\" + this.lang]}</span\r\n              >`}\r\n          ${elem === undefined || data === undefined\r\n          ? nothing\r\n          : html` <json-viewer style=${elem.style !== undefined ? elem.style : \"padding:0px; padding-left:20px; top:-15px;\"}\r\n                >${JSON.stringify(\r\n            this.getDataFromRoot(elem, data)\r\n          )}</json-viewer\r\n              >`}\r\n        </div>\r\n      `;\r\n    }\r\n    kpiReportTitle(elem, data) {\r\n      //alert(this.filterName)\r\n      if (this.filterName!==undefined&&this.filterName!==''){        \r\n          if (typeof this.filterName !== 'string') {\r\n            throw new Error('filterName must be a string');\r\n          }\r\n          const filterName = String(this.filterName);\r\n\r\n          function isFilterNameDefined(subViewFilter, filterName) { \r\n            if (subViewFilter) {\r\n              for (const filter of subViewFilter) {\r\n                if (filter.hasOwnProperty(filterName)) {\r\n                  return filter[filterName];\r\n                }\r\n              }\r\n            }\r\n            return [];\r\n          }\r\n          let subViewFilter=isFilterNameDefined(elem.subViewFilter, filterName) \r\n          elem=subViewFilter\r\n      }\r\n      return html`    \r\n        <p style=\"text-align: center;\">\r\n          <span style=\"color: rgb(20, 115, 230); font-size: 30px; margin-top: 10px; font-weight: bold;\" id=\"reportTitle\">\r\n            ${elem.title[\"label_\" + this.lang]}\r\n          </span>\r\n        </p>\r\n      `;\r\n    }\r\n    kpiReportTitleLvl2(elem, data, lang) {\r\n      if (elem.title === undefined && (elem.title.text_en === undefined || elem.title.label_en === undefined)) {\r\n        return html``\r\n      }\r\n      if (elem.title.text_en !== undefined) {\r\n        return html`\r\n        <p><span style=\"color: rgb(20, 115, 230);font-size: 24px;margin-top: 10px;font-weight: bold;\" id=\"reportTitle\">            \r\n          ${unsafeHTML(this.getDynamicData(elem.title, data, lang))}\r\n        </p>\r\n        `\r\n      }\r\n      return html`    \r\n          <p><span style=\"color: rgb(20, 115, 230);font-size: 24px;margin-top: 10px;font-weight: bold;\" id=\"reportTitle\">${elem.title[\"label_\" + this.lang]\r\n        }</p>\r\n          `;\r\n    }\r\n\r\n    kpiGrid(elem, data = this.data) {\r\n      //console.log('kpiGrid', elem, \"data\", this.data[elem.elementName])\r\n      let fldsToDisplay = [];\r\n      for (let i = 0; i < elem.fieldsToDisplay.length; i++) {\r\n        if (elem.fieldsToDisplay[i][\"label_\" + this.lang] !== undefined) {\r\n          elem.fieldsToDisplay[i].header =\r\n            elem.fieldsToDisplay[i][\"label_\" + this.lang];\r\n        }\r\n      }\r\n      return html`\r\n        ${!data[elem.elementName] || !elem.fieldsToDisplay\r\n          ? nothing\r\n          : html`\r\n              <lit-datatable\r\n                .data=\"${data[elem.elementName]}\"\r\n                .conf=\"${elem.fieldsToDisplay}\"\r\n              ></lit-datatable>\r\n            `}\r\n      `;\r\n    }\r\n    readOnlyTableByGroupOrig(elem, dataArr, isSecondLevel = false) {\r\n      console.log(\"readOnlyTableByGroup\", elem, dataArr);\r\n      dataArr = this.getDataFromRoot(elem, dataArr);\r\n      console.log(\"Mejori\", dataArr);\r\n      return html`\r\n        <style>\r\n          .table-group-container {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n            gap: 20px;\r\n          }\r\n\r\n          .table-group {\r\n            display: flex;\r\n            flex-direction: column;\r\n            text-align: center;\r\n          }\r\n\r\n          .table-group-header {\r\n            font-size: 1.2rem;\r\n            font-weight: bold;\r\n            margin-bottom: 10px;\r\n          }\r\n        </style>\r\n        <div class=\"table-group-container\">\r\n          ${dataArr === undefined\r\n          ? html`No Data`\r\n          : html`\r\n                ${Object.entries(dataArr).map(\r\n            ([key, value]) =>\r\n              html`\r\n                      ${this.readOnlyTable(\r\n                elem,\r\n                Object.entries(value).map,\r\n                isSecondLevel,\r\n                value,\r\n                key\r\n              )}\r\n                    `\r\n          )}\r\n              `}\r\n        </div>\r\n      `;\r\n    }\r\n    readOnlyTableByGroupAllInOne(elem, dataArr, isSecondLevel) {\r\n      if (isSecondLevel === undefined) {\r\n        isSecondLevel = false;\r\n      }\r\n      dataArr = this.getDataFromRoot(elem, dataArr);\r\n      return html`\r\n        <style>\r\n          .styled-table-bygroup {\r\n            display: -webkit-inline-box;\r\n            margin-top: 0px;\r\n            margin-bottom: 3px;\r\n            color: #4285f4;\r\n            font-size: 1.8vmin;\r\n            border-collapse: collapse;\r\n            margin: 2px 10px;\r\n            font-family: Montserrat;\r\n            /* min-width: 400px; */\r\n            box-shadow: 0 0 20px #44cbe652;\r\n            table-layout: fixed;\r\n            //width: 91%;\r\n          }\r\n          .styled-table-bygroup thead tr {\r\n            background-color: #2989d8;\r\n            color: #ffffff;\r\n            text-align: center;\r\n            border: 1px solid #c2edf9;\r\n          }\r\n          .styled-table-bygroup thead tr headercolumns {\r\n            background-color: 2989d870;\r\n            color: white;\r\n          }\r\n\r\n          .styled-table-bygroup th {\r\n            color: white;\r\n          }\r\n          .styled-table-bygroup tbody tr:hover td {\r\n            color: white;\r\n            background-color: #2989d8;\r\n          }\r\n          .styled-table-bygroup td {\r\n            color: rgba(0, 0, 0, 0.71);\r\n            padding: 8px 15px;\r\n            border: 1px solid #c2edf9;\r\n            word-break: break-all;\r\n            font-weight: bold;\r\n          }\r\n          .styled-table-bygroup tbody tr {\r\n            border-bottom: 1px solid #c2edf9;\r\n          }\r\n          .styled-table-bygroup tbody tr:nth-of-type(even) {\r\n            background-color: #c2f2ff5c;\r\n          }\r\n          .styled-table-bygroup tbody tr:last-of-type {\r\n            border-bottom: 2px solid #009879;\r\n          }\r\n          .styled-table-bygroup tbody tr.active-row {\r\n            font-weight: bold;\r\n            color: #009879;\r\n          }\r\n          span.cardLabel {\r\n            font-weight: bold;\r\n            font-size:16px;\r\n            font-family: Montserrat;\r\n            word-break: auto-phrase;\r\n            color: rgb(41, 137, 216); /* #032bbc; */\r\n          }\r\n          span.cardValue {            \r\n            color: rgba(214, 233, 248, 0.37); \r\n            font-size:16px; \r\n            font-family: Montserrat;\r\n            display:inherit;            \r\n            word-break: auto-phrase;\r\n             /* #009879; */\r\n          }\r\n          span.title {\r\n            color: rgb(35, 163, 198);\r\n            margin-top: 10px;\r\n            font-weight: bold;\r\n          }\r\n          span.title.true {\r\n            font-size: 18px;\r\n          }\r\n          span.title.false {\r\n            font-size: 18px;\r\n          }\r\n        </style>\r\n        <div style=\"display: flex; flex-direction: row; text-align: center;\">\r\n          <div\r\n            style=\"display: flex; flex-direction: column; text-align: center;\"\r\n          >\r\n            ${elem === undefined || elem.title === undefined\r\n          ? nothing\r\n          : html` <p>\r\n                  <span class=\"title ${isSecondLevel}\">${elem.title}</span>\r\n                </p>`}\r\n            <div class=\"layout horizontal center flex wrap\">\r\n              ${this.getButton(elem, dataArr, true)}\r\n            </div>\r\n            ${elem.columns === undefined\r\n          ? html`No columns defined`\r\n          : html`\r\n                  <table class=\"styled-table-bygroup\">\r\n                    ${Object.entries(dataArr)\r\n              .sort()\r\n              .map(\r\n                ([key, value]) =>\r\n                  html`\r\n                  <thead>          \r\n                    <tr>\r\n                    <th style=\"color:#24c0eb; background-color: #d6e9f8; text-transform:uppercase; font-size:16px;\" colspan=\" ${elem.columns.length} \">\r\n                      \r\n                      ${elem.showGroupEntryObjectName !== undefined && elem.showGroupEntryObjectName === true ?\r\n                      html`${key} ${Object.keys(value)[0]}` :\r\n                      html`${key}`\r\n                    }</th>\r\n                    </tr>\r\n                    <tr class=\"headercolumns\">\r\n                      ${elem.columns.map(\r\n                      (fld) =>\r\n                        html`\r\n                            <td style=\"background-color:#7ccee6; color: white;\">\r\n                              ${fld[\"label_\" + this.lang]}\r\n                            </td>\r\n                          `\r\n                    )}                  \r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                  ${value === undefined || !Array.isArray(value)\r\n                      ? html`No Data`\r\n                      : html`\r\n                          ${value.sort().map(\r\n                        (p) =>\r\n                          html`\r\n                                <tr>\r\n                                  ${elem.columns.map(\r\n                            (fld) =>\r\n                              html`\r\n                                        ${fld.name === \"pretty_spec\"\r\n                                  ? html`\r\n                                              <td>\r\n                                                <span style=\"color:green\"\r\n                                                  >${p[\r\n                                    \"spec_text_green_area_\" +\r\n                                    this.lang\r\n                                    ]}</span\r\n                                                >\r\n                                                <span style=\"color:orange\"\r\n                                                  >${p[\r\n                                    \"spec_text_yellow_area_\" +\r\n                                    this.lang\r\n                                    ]}</span\r\n                                                >\r\n                                                <span style=\"color:red\"\r\n                                                  >${p[\r\n                                    \"spec_text_red_area_\" +\r\n                                    this.lang\r\n                                    ]}</span\r\n                                                >\r\n                                              </td>\r\n                                            `\r\n                                  : html`\r\n                                              ${fld.as_progress !== undefined &&\r\n                                      fld.as_progress === true\r\n                                      ? html`\r\n                                                    <style>\r\n                                                      .w3-responsive {\r\n                                                        display: block;\r\n                                                        overflow-x: auto;\r\n                                                      }\r\n                                                      .w3-container,\r\n                                                      .w3-panel {\r\n                                                        padding: 0.01em 4px;\r\n                                                      }\r\n                                                      .w3-panel {\r\n                                                        margin-top: 16px;\r\n                                                        margin-bottom: 16px;\r\n                                                      }\r\n                                                      .w3-container:after,\r\n                                                      .w3-container:before,\r\n                                                      .w3-panel:after,\r\n                                                      .w3-panel:before,\r\n                                                      .w3-row:after,\r\n                                                      .w3-row:before,\r\n                                                      .w3-row-padding:after,\r\n                                                      .w3-row-padding:before,\r\n                                                      .w3-blue,\r\n                                                      .w3-hover-blue:hover {\r\n                                                        color: rgba(\r\n                                                          7,\r\n                                                          13,\r\n                                                          22,\r\n                                                          0.94\r\n                                                        ) !important;\r\n                                                        background-color: #2196f3 !important;\r\n                                                      }\r\n                                                      .w3-background,\r\n                                                      .w3-hover-blue:hover {\r\n                                                        color: rgba(\r\n                                                          7,\r\n                                                          13,\r\n                                                          22,\r\n                                                          0.94\r\n                                                        ) !important;\r\n                                                        background-color: #ffdedd !important;\r\n                                                      }\r\n                                                      .title {\r\n                                                        font-size: 8px;\r\n                                                        font-weight: 500;\r\n                                                        letter-spacing: 0;\r\n                                                        line-height: 1.5em;\r\n                                                        padding-bottom: 15px;\r\n                                                        position: relative;\r\n                                                        font-family: Montserrat;\r\n                                                        font-color: rgb(\r\n                                                          94,\r\n                                                          145,\r\n                                                          186\r\n                                                        );\r\n                                                      }\r\n                                                    </style>\r\n                                                    <td>\r\n                                                      <div class=\"w3-container\">\r\n                                                        <div\r\n                                                          class=\"w3-background w3-round-xlarge\"\r\n                                                          title=\"${this.titleLang(\r\n                                        fld\r\n                                      )}\"\r\n                                                        >\r\n                                                          <div\r\n                                                            class=\"w3-container w3-blue w3-round-xlarge\"\r\n                                                            style=\"width:${p[\r\n                                        fld.name\r\n                                        ]}%\"\r\n                                                          >\r\n                                                            ${p[fld.name]}%\r\n                                                          </div>\r\n                                                        </div>\r\n                                                      </div>\r\n                                                      <br />\r\n                                                    </td>\r\n                                                  `\r\n                                      : html`\r\n                                                    <td>\r\n                                                      ${fld.fix_value_prefix !==\r\n                                          undefined\r\n                                          ? fld.fix_value_prefix\r\n                                          : \"\"}${p[\r\n                                          fld.name\r\n                                          ]}${fld.fix_value_suffix !==\r\n                                            undefined\r\n                                            ? fld.fix_value_suffix\r\n                                            : \"\"}\r\n                                                      ${fld.fix_value2_prefix !==\r\n                                          undefined\r\n                                          ? fld.fix_value2_prefix\r\n                                          : \"\"}${fld.name2 !==\r\n                                            undefined\r\n                                            ? p[fld.name2]\r\n                                            : \"\"}${fld.fix_value2_suffix !==\r\n                                              undefined\r\n                                              ? fld.fix_value2_suffix\r\n                                              : \"\"}\r\n                                                      ${fld.fix_value3_prefix !==\r\n                                          undefined\r\n                                          ? fld.fix_value3_prefix\r\n                                          : \"\"}${fld.name3 !==\r\n                                            undefined\r\n                                            ? p[fld.name3]\r\n                                            : \"\"}${fld.fix_value3_suffix !==\r\n                                              undefined\r\n                                              ? fld.fix_value3_suffix\r\n                                              : \"\"}\r\n                                                    </td>\r\n                                                  `}\r\n                                            `}\r\n                                      `\r\n                          )}\r\n                                </tr>\r\n                              `\r\n                      )}\r\n                        `\r\n                    }\r\n                  </tbody>\r\n                </table>\r\n              `\r\n              )}\r\n                  </table>\r\n                `}\r\n          </div>\r\n        </div>\r\n      `;\r\n    }\r\n\r\n    readOnlyTableByGroup(elem, dataArr, isSecondLevel) {\r\n      if (isSecondLevel === undefined) {\r\n        isSecondLevel = false;\r\n      }\r\n      dataArr = this.getDataFromRoot(elem, dataArr);\r\n      if (dataArr === undefined) {\r\n        return html``;\r\n      }\r\n      return html`\r\n        <style>\r\n          .styled-table-bygroup {\r\n            display: -webkit-inline-box;\r\n            margin-top: 0px;\r\n            margin-bottom: 3px;\r\n            color: #4285f4;\r\n            font-size: 1.8vmin;\r\n            border-collapse: collapse;\r\n            margin: 2px 10px;\r\n            font-family: Montserrat;\r\n            /* min-width: 400px; */\r\n            box-shadow: 0 0 20px #44cbe652;\r\n            table-layout: fixed;\r\n            //width: 91%;\r\n          }\r\n          .styled-table-bygroup thead tr {\r\n            background-color: #2989d8;\r\n            color: #ffffff;\r\n            text-align: center;\r\n            border: 1px solid #c2edf9;\r\n          }\r\n          .styled-table-bygroup thead tr headercolumns {\r\n            background-color: 2989d870;\r\n            color: white;\r\n            font-weight: bold;\r\n          }\r\n\r\n          .styled-table-bygroup th {\r\n            color: white;\r\n          }\r\n          .styled-table-bygroup tbody tr:hover td {\r\n            color: white;\r\n            background-color: #2989d8;\r\n          }\r\n          .styled-table-bygroup td groupheader {\r\n            color: rgba(0, 0, 0, 0.71);\r\n            padding: 8px 15px;\r\n            border: 1px solid #c2edf9;\r\n            word-break: break-all;\r\n            font-weight: bold;\r\n          }\r\n          .styled-table-bygroup td {\r\n            color: rgba(0, 0, 0, 0.71);\r\n            padding: 8px 15px;\r\n            border: 1px solid #c2edf9;\r\n            word-break: break-all;\r\n          }\r\n          .styled-table-bygroup tbody tr {\r\n            border-bottom: 1px solid #c2edf9;\r\n          }\r\n          .styled-table-bygroup tbody tr:nth-of-type(even) {\r\n            background-color: #c2f2ff5c;\r\n          }\r\n          .styled-table-bygroup tbody tr:last-of-type {\r\n            border-bottom: 2px solid #009879;\r\n          }\r\n          .styled-table-bygroup tbody tr.active-row {\r\n            font-weight: bold;\r\n            color: #009879;\r\n          }\r\n          span.cardLabel {\r\n            font-weight: bold;\r\n            color: rgb(41, 137, 216); \r\n            font-family: Montserrat;\r\n            word-break: auto-phrase;\r\n            font-size:16px; \r\n            /* #032bbc; */\r\n          }\r\n          span.cardValue {\r\n            color: rgba(214, 233, 248, 0.37); \r\n            word-break: auto-phrase;\r\n            font-family: Montserrat;\r\n            font-size:16px; \r\n            display:inherit;\r\n            /* #009879; */\r\n          }\r\n          span.title {\r\n            color: rgb(35, 163, 198);\r\n            margin-top: 10px;\r\n            font-weight: bold;\r\n          }\r\n          span.title.true {\r\n            font-size: 18px;\r\n          }\r\n          span.title.false {\r\n            font-size: 18px;\r\n          }\r\n        </style>\r\n        <div style=\"display: flex; flex-direction: column; text-align: center;\">\r\n          ${elem === undefined || elem.title === undefined\r\n          ? nothing\r\n          : html` <p>\r\n                <span class=\"title ${isSecondLevel}\"\r\n                  >${elem.title[\"label_\" + this.lang]}</span\r\n                >\r\n              </p>`}\r\n\r\n          <div\r\n            style=\"display: flex; flex-direction: row; text-align: center; flex-wrap:wrap; \"\r\n          >\r\n            <div class=\"layout horizontal center flex wrap\">\r\n              ${this.getButton(elem, dataArr, true)}\r\n            </div>\r\n            ${elem.columns === undefined\r\n          ? html`No columns defined`\r\n          : html`\r\n                  ${Object.entries(dataArr)\r\n              .sort()\r\n              .map(\r\n                ([key, value]) =>\r\n                  html`\r\n                          <table class=\"styled-table-bygroup\">\r\n                            <thead>\r\n                              <tr>\r\n                                <th\r\n                                  style=\"color:#24c0eb; background-color: #d6e9f8; text-transform:uppercase; font-size:16px;\"\r\n                                  colspan=\" ${elem.columns.length} \"\r\n                                >\r\n                                  ${key}\r\n                                </th>\r\n                              </tr>\r\n                              <tr class=\"headercolumns\">\r\n                                ${elem.columns.map(\r\n                    (fld) =>\r\n                      html`\r\n                                      ${this.fieldsToDiscard(fld) === true\r\n                          ? nothing\r\n                          : html`<td\r\n                                            style=\"background-color:#7ccee6; color: white; font-weight: bold;\"\r\n                                          >\r\n                                            ${fld[\"label_\" + this.lang]}\r\n                                          </td>`}\r\n                                    `\r\n                  )}\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              ${value === undefined || !Array.isArray(value)\r\n                      ? html`No Data`\r\n                      : html`\r\n                                    ${value.sort().map(\r\n                        (p) =>\r\n                          html`\r\n                                          <tr>\r\n                                            ${elem.columns.map(\r\n                            (fld) =>\r\n                              html`\r\n                                                  ${this.fieldsToDiscard(\r\n                                fld\r\n                              ) === true\r\n                                  ? nothing\r\n                                  : html`\r\n                                                        ${fld.name ===\r\n                                      \"pretty_spec\"\r\n                                      ? html`\r\n                                                              <td>\r\n                                                                <span\r\n                                                                  style=\"color:green\"\r\n                                                                  >${p[\r\n                                        \"spec_text_green_area_\" +\r\n                                        this.lang\r\n                                        ]}</span\r\n                                                                >\r\n                                                                <span\r\n                                                                  style=\"color:orange\"\r\n                                                                  >${p[\r\n                                        \"spec_text_yellow_area_\" +\r\n                                        this.lang\r\n                                        ]}</span\r\n                                                                >\r\n                                                                <span\r\n                                                                  style=\"color:red\"\r\n                                                                  >${p[\r\n                                        \"spec_text_red_area_\" +\r\n                                        this.lang\r\n                                        ]}</span\r\n                                                                >\r\n                                                              </td>\r\n                                                            `\r\n                                      : html`\r\n                                                              ${fld.as_progress !==\r\n                                          undefined &&\r\n                                          fld.as_progress ===\r\n                                          true\r\n                                          ? html`\r\n                                                                    <style>\r\n                                                                      .w3-responsive {\r\n                                                                        display: block;\r\n                                                                        overflow-x: auto;\r\n                                                                      }\r\n                                                                      .w3-container,\r\n                                                                      .w3-panel {\r\n                                                                        padding: 0.01em\r\n                                                                          4px;\r\n                                                                      }\r\n                                                                      .w3-panel {\r\n                                                                        margin-top: 16px;\r\n                                                                        margin-bottom: 16px;\r\n                                                                      }\r\n                                                                      .w3-container:after,\r\n                                                                      .w3-container:before,\r\n                                                                      .w3-panel:after,\r\n                                                                      .w3-panel:before,\r\n                                                                      .w3-row:after,\r\n                                                                      .w3-row:before,\r\n                                                                      .w3-row-padding:after,\r\n                                                                      .w3-row-padding:before,\r\n                                                                      .w3-blue,\r\n                                                                      .w3-hover-blue:hover {\r\n                                                                        color: rgba(\r\n                                                                          7,\r\n                                                                          13,\r\n                                                                          22,\r\n                                                                          0.94\r\n                                                                        ) !important;\r\n                                                                        background-color: #2196f3 !important;\r\n                                                                      }\r\n                                                                      .w3-background,\r\n                                                                      .w3-hover-blue:hover {\r\n                                                                        color: rgba(\r\n                                                                          7,\r\n                                                                          13,\r\n                                                                          22,\r\n                                                                          0.94\r\n                                                                        ) !important;\r\n                                                                        background-color: #ffdedd !important;\r\n                                                                      }\r\n                                                                      .title {\r\n                                                                        font-size: 8px;\r\n                                                                        font-weight: 500;\r\n                                                                        letter-spacing: 0;\r\n                                                                        line-height: 1.5em;\r\n                                                                        padding-bottom: 15px;\r\n                                                                        position: relative;\r\n                                                                        font-family: Montserrat;\r\n                                                                        font-color: rgb(\r\n                                                                          94,\r\n                                                                          145,\r\n                                                                          186\r\n                                                                        );\r\n                                                                      }\r\n                                                                    </style>\r\n                                                                    <td>\r\n                                                                      <div\r\n                                                                        class=\"w3-container\"\r\n                                                                      >\r\n                                                                        <div\r\n                                                                          class=\"w3-background w3-round-xlarge\"\r\n                                                                          title=\"${this.titleLang(\r\n                                            fld\r\n                                          )}\"\r\n                                                                        >\r\n                                                                          <div\r\n                                                                            class=\"w3-container w3-blue w3-round-xlarge\"\r\n                                                                            style=\"width:${p[\r\n                                            fld\r\n                                              .name\r\n                                            ]}%\"\r\n                                                                          >\r\n                                                                            ${p[\r\n                                            fld\r\n                                              .name\r\n                                            ]}%\r\n                                                                          </div>\r\n                                                                        </div>\r\n                                                                      </div>\r\n                                                                      <br />\r\n                                                                    </td>\r\n                                                                  `\r\n                                          : html`\r\n                                                                    <td>\r\n                                                                      ${fld.fix_value_prefix !==\r\n                                              undefined\r\n                                              ? fld.fix_value_prefix\r\n                                              : \"\"}${p[\r\n                                              fld.name\r\n                                              ]}${fld.fix_value_suffix !==\r\n                                                undefined\r\n                                                ? fld.fix_value_suffix\r\n                                                : \"\"}\r\n                                                                      ${fld.fix_value2_prefix !==\r\n                                              undefined\r\n                                              ? fld.fix_value2_prefix\r\n                                              : \"\"}${fld.name2 !==\r\n                                                undefined\r\n                                                ? p[\r\n                                                fld\r\n                                                  .name2\r\n                                                ]\r\n                                                : \"\"}${fld.fix_value2_suffix !==\r\n                                                  undefined\r\n                                                  ? fld.fix_value2_suffix\r\n                                                  : \"\"}\r\n                                                                      ${fld.fix_value3_prefix !==\r\n                                              undefined\r\n                                              ? fld.fix_value3_prefix\r\n                                              : \"\"}${fld.name3 !==\r\n                                                undefined\r\n                                                ? p[\r\n                                                fld\r\n                                                  .name3\r\n                                                ]\r\n                                                : \"\"}${fld.fix_value3_suffix !==\r\n                                                  undefined\r\n                                                  ? fld.fix_value3_suffix\r\n                                                  : \"\"}\r\n                                                                    </td>\r\n                                                                  `}\r\n                                                            `}\r\n                                                      `}\r\n                                                `\r\n                          )}\r\n                                          </tr>\r\n                                        `\r\n                      )}\r\n                                  `}\r\n                            </tbody>\r\n                          </table>\r\n                        `\r\n              )}\r\n                `}\r\n          </div>\r\n        </div>\r\n      `;\r\n    }\r\n\r\n    handleTableRowClick(event, rowSelected, elem) {\r\n      function isEqual(obj1, obj2) {\r\n        return JSON.stringify(obj1) === JSON.stringify(obj2);\r\n      }\r\n      // Check if rowSelected exists in selectedItem and remove it if found\r\n      let rowIndex=-1\r\n      if (this.selectedItems!==undefined){\r\n        rowIndex = this.selectedItems.findIndex(item => JSON.stringify(item) === JSON.stringify(rowSelected));\r\n      }\r\n      if (rowIndex !== -1) {\r\n        this.selectedItems.splice(rowIndex, 1);\r\n      }else{\r\n        if (elem.allowMultiSelection===undefined||elem.allowMultiSelection===false){\r\n          this.selectedItems=[]\r\n        }\r\n        this.selectedItems.push(rowSelected)\r\n      }\r\n\r\n      // Check if rowSelected exists in selectedItem and remove it if found\r\n      if (isEqual(this.selectedItem, rowSelected)) {\r\n        this.selectedItem = {}; // Clear selectedItem if they are the same\r\n      } else {\r\n        this.selectedItem=rowSelected\r\n      }\r\n      if (rowSelected[elem.children] == 0) {\r\n        if (elem.openWhenNoData === undefined || elem.openWhenNoData === false) {\r\n          alert(\"There is no data\");\r\n          this.selectedItem = [];\r\n        }\r\n      } else {\r\n        // Set selectedItem to rowSelected if it's not already set\r\n        this.selectedItem = rowSelected;\r\n      }\r\n    \r\n      sessionStorage.setItem('rowSelectedData', JSON.stringify(rowSelected));\r\n      this.render();\r\n      const popup = this.shadowRoot.querySelector(\".js-context-popup\");\r\n      if (!popup.contains(event.target)) {\r\n        popup.style.display = \"none\";\r\n      }\r\n    }\r\n    \r\n\r\n    connectedCallback() {\r\n      super.connectedCallback();\r\n      document.addEventListener('keydown', this.handleKeyDown);\r\n      // window.addEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    disconnectedCallback() {\r\n      super.disconnectedCallback();\r\n      document.removeEventListener('keydown', this.handleKeyDown);\r\n      // window.removeEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n      if (event.key === 'Escape') {\r\n        contextMenu.style.display = \"none\";\r\n      }\r\n    }\r\n    // handleScroll(event) {\r\n    //   const popup = this.shadowRoot.querySelector(\".js-context-popup\");\r\n    //   contextMenu = popup;\r\n    //   contextMenu.style.display = \"none\";\r\n    // }\r\n    handleOpenContextMenu(event, rowSelected, elem) {\r\n      console.log('elem', elem)\r\n      event.preventDefault();\r\n      const popup = this.shadowRoot.querySelector(\".js-context-popup\");\r\n      contextMenu = popup;\r\n      popup.innerHTML = \"\";\r\n      let menuOptionsArr = []\r\n      if (elem.rowButtonsAsContextMenu !== undefined && elem.rowButtonsAsContextMenu === true) {\r\n        menuOptionsArr = elem.row_buttons\r\n      } else {\r\n        if (elem.contextmenu_buttons !== undefined) {\r\n          menuOptionsArr = elem.contextmenu_buttons\r\n        }\r\n      }\r\n\r\n      menuOptionsArr.map((item, i) => {\r\n        let newIcon = document.createElement('mwc-icon-button');\r\n        newIcon.setAttribute('icon', item.button.icon);\r\n        newIcon.style.color = \"white\";\r\n\r\n        let newLabel = document.createElement('label');\r\n        newLabel.textContent = item.button.title[\"label_\" + this.lang]\r\n\r\n        let newDiv = document.createElement('div');\r\n        newDiv.style.display = \"flex\";\r\n        newDiv.style.flexDirection = \"row\";\r\n        newDiv.style.alignItems = \"center\";\r\n        newDiv.style.cursor = \"pointer\"\r\n        newDiv.appendChild(newIcon);\r\n        newDiv.appendChild(newLabel);\r\n        newDiv.addEventListener('click', (e) => this.actionMethod(e, item, menuOptionsArr, null, null, rowSelected, false));\r\n\r\n        popup.appendChild(newDiv);\r\n      })\r\n      popup.addEventListener('click', () => this.contextMenuItemAction(popup));\r\n      popup.style.left = `${event.clientX}px`;\r\n      popup.style.top = `${event.clientY}px`;\r\n      popup.style.display = \"flex\";\r\n      popup.style.flexDirection = \"column\";\r\n      document.body.addEventListener('click', this.closeContextMenu);\r\n    }\r\n\r\n    closeContextMenu(e) {\r\n      contextMenu.style.display = \"none\";\r\n    }\r\n\r\n    contextMenuItemAction(e) {\r\n      e.style.display = \"none\";\r\n    }\r\n\r\n    resetFilterIndex(elem) {\r\n      const endPointResponseObject = elem.endPointResponseObject;\r\n      this.selectedTableIndex = {\r\n        ...this.selectedTableIndex,\r\n        [endPointResponseObject]: undefined\r\n      }\r\n\r\n      if (elem.children_definition) {\r\n        const childElement = {\r\n          ...elem.children_definition,\r\n          endPointResponseObject: elem.children // \"_child\"\r\n        };\r\n        this.resetFilterIndex(childElement);\r\n      }\r\n    }\r\n\r\n    parentReadOnlyTable(elem, dataArr, isSecondLevel, directData, alternativeTitle, parentElement, theme, parentData) {\r\n      //console.log('elem', elem, 'dataArr', dataArr, 'parentData', parentData)\r\n      if (directData !== undefined) {\r\n        dataArr = directData;\r\n      } else {\r\n        dataArr = this.getDataFromRoot(elem, dataArr);\r\n      }\r\n      //console.log(elem, dataArr)\r\n      const handleFilter = (event, p, elem, idx) => {\r\n        const endPointResponseObject = elem.endPointResponseObject;\r\n        const isToggling = this.selectedTableIndex[endPointResponseObject] === idx;\r\n        this.resetFilterIndex(elem);\r\n\r\n        if (!isToggling) {\r\n          this.selectedTableIndex = {\r\n            ...this.selectedTableIndex,\r\n            [endPointResponseObject]: idx\r\n          }\r\n        }\r\n      }\r\n\r\n      const handleResetParentFilter = (elem) => {\r\n        this.resetFilterIndex(elem);\r\n      }\r\n\r\n      const childElement = {\r\n        ...elem.children_definition,\r\n        endPointResponseObject: elem.children\r\n      };\r\n\r\n      const endPointResponseObject = elem.endPointResponseObject;\r\n      const selectedIdx = this.selectedTableIndex[endPointResponseObject];\r\n      let childDataArr = undefined\r\n      if (dataArr!==undefined&&dataArr[0]!==undefined){\r\n        childDataArr = selectedIdx !== undefined ? dataArr[selectedIdx][elem.children] : undefined;\r\n        if (parentData === undefined) {\r\n          parentData = selectedIdx !== undefined ? dataArr[0] : undefined;\r\n        }\r\n      }\r\n      return html`\r\n        ${this.readOnlyTable(elem, undefined, isSecondLevel, dataArr, alternativeTitle, handleFilter, handleResetParentFilter, parentElement, theme, parentData)}\r\n        ${childDataArr && childDataArr.length > 0 ? this.parentReadOnlyTable(childElement, undefined, isSecondLevel, childDataArr, alternativeTitle, elem, theme, parentData) : nothing}\r\n      `;\r\n    }\r\n\r\n    rolesAndActions(elem, dataArr, isSecondLevel = false, lang, directData, theme) {\r\n      let tmp = elem.theme\r\n      if (typeof (tmp) == \"undefined\") {\r\n        tmp = \"TRAZiT-UsersArea\";\r\n      }\r\n      //console.log('rolesAndActions', 'elem', elem, 'dataArr', dataArr)\r\n      /*      if (directData !== undefined) {\r\n              dataArr = directData;\r\n            } else {\r\n              dataArr = this.getDataFromRoot(elem, dataArr);\r\n            }\r\n      */\r\n      return html`\r\n        <style>\r\n          table.styled-table-for-rolesandactions th{\r\n            color:gray !important;\r\n          }\r\n\r\n          .title {\r\n            color: #2989d8;\r\n            font-size: 18px;\r\n            font-weight: bold;\r\n          }\r\n\r\n          table.styled-table-for-rolesandactions th, td{\r\n            border: none !important;\r\n          }\r\n\r\n          table.styled-table-for-rolesandactions tr:nth-child(even) {\r\n            background-color: white !important;\r\n          }\r\n\r\n          table.styled-table-for-rolesandactions tr {\r\n            border: none;\r\n            border-bottom: 1px solid #dddddd;\r\n          }\r\n          \r\n          table.styled-table-for-rolesandactions tr:last-child {\r\n            border: none;\r\n          }\r\n\r\n          * {\r\n            box-sizing: border-box;\r\n          }\r\n\r\n        table.TRAZiT-DefinitionArea thead tr th {\r\n          background-color: #2989d8;\r\n          color: white !important;\r\n        }\r\n\r\n        table.TRAZiT-UsersArea thead tr th {\r\n          background-color: white;\r\n          color: gray;\r\n        }\r\n\r\n        table {\r\n          border-collapse: collapse;\r\n          width: 100%;\r\n          font-family: Montserrat;\r\n          font-size: 16px;\r\n        }\r\n\r\n        table.TRAZiT-UsersArea tr {\r\n          border: none; \r\n          border-bottom: 1px solid #dddddd;\r\n        }\r\n\r\n        tr {\r\n          border: 1px solid #dddddd;\r\n          text-align: center;\r\n          color: #808080;\r\n        }\r\n\r\n        table.TRAZiT-UsersArea tr:nth-child(even) {\r\n          background-color: white;\r\n        }\r\n\r\n        table.TRAZiT-UsersArea tr:last-child {\r\n          border: none;\r\n        }\r\n     \r\n        table.TRAZiT-UsersArea thead {\r\n          border-bottom: 1px solid #dddddd;\r\n        }\r\n\r\n        table.TRAZiT-DefinitionArea tr:nth-child(even) {\r\n          background-color: rgba(214, 233, 248, 0.37) !important;\r\n        }\r\n\r\n        table.TRAZiT-DefinitionArea th {\r\n          padding: 5px 5px;\r\n          border: 1px solid #dddddd !important;\r\n        }\r\n\r\n        td, th {\r\n          padding: 5px 5px;\r\n          border: 1px solid #dddddd !important;\r\n        }\r\n\r\n        table.TRAZiT-UsersArea td, th {\r\n          border: none !important;\r\n        }\r\n\r\n        tr {\r\n          cursor: pointer;\r\n        }\r\n\r\n        mwc-icon-button {\r\n        --mdc-icon-button-size: 35px;\r\n        --mdc-icon-size: 25px;\r\n        }\r\n        \r\n        td.absent {\r\n          background-color: #e0121257;\r\n        }\r\n        \r\n        td.present {\r\n          background-color: #5e80003d;\r\n        }\r\n\r\n        table tr:hover td.title1 {\r\n          background-color: #2989d830 !important;\r\n        }\r\n        table td {\r\n          font-size: 16px !important;\r\n          font-family: \"Montserrat\";\r\n        }\r\n        </style>\r\n        <div style=\"display: flex; flex-direction: column; text-align: center;\">\r\n          ${elem === undefined || elem.title === undefined\r\n          ? nothing\r\n          : html` <p>\r\n                <span class=\"title ${isSecondLevel}\"\r\n                  >${elem.title[\"label_\" + this.lang]}</span\r\n                >\r\n              </p>`}\r\n       \r\n          <table class=\"styled-table-for-rolesandactions ${tmp}\" style=\"margin-top:24px;\">\r\n            <thead>\r\n              <tr>\r\n                ${dataArr === undefined || dataArr[0] === undefined\r\n          ? html`${this.lang == \"en\" ? \"Not applicable\" : \"No aplica\"}`\r\n          : html`\r\n                      ${dataArr[0].map(\r\n            (fld) =>\r\n              html`\r\n                            ${typeof fld === \"object\"\r\n                  ? html`${this.fieldsToDiscard(fld) === true\r\n                    ? nothing\r\n                    : html`<th\r\n                                      style=\"text-align: center; color:white; font-weight:normal;\"\r\n                                    >\r\n                                      ${fld.label}\r\n                                    </th>`} `\r\n                  : html`\r\n                                  <th style=\"text-align: center; color:white; font-weight:normal;\">\r\n                                    ${fld}\r\n                                  </th>\r\n                                `}\r\n                          `\r\n          )}\r\n                    `}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              ${dataArr === undefined || dataArr[0] === undefined\r\n          ? nothing\r\n          : html`\r\n                    ${dataArr.map(\r\n            (p, iRow) =>\r\n              html`\r\n                          ${iRow == 0\r\n                  ? nothing\r\n                  : html`\r\n                                <tr>\r\n                                  ${p.map(\r\n                    (fld, iCol) =>\r\n                      html`\r\n                                        ${iCol == 0 || iCol == 1\r\n                          ? html` ${typeof dataArr[0][iCol] ===\r\n                            \"object\"\r\n                            ? html`\r\n                                                  ${this.fieldsToDiscard(\r\n                              dataArr[0][iCol]\r\n                            ) === true\r\n                                ? nothing\r\n                                : html`<td\r\n                                                        class=\"title1\"\r\n                                                        style=\"font-size: 1.6vmin; font-weight: unset; font-family: Montserrat;\"\r\n                                                      >\r\n                                                        ${fld}\r\n                                                      </td>`}\r\n                                                `\r\n                            : html`<td>${fld}</td>`}`\r\n                          : html`\r\n                                              ${fld !== undefined &&\r\n                              fld.length > 0\r\n                              ? html`<td\r\n                                                    class=\"present\"\r\n                                                    title=\"Assigned\"\r\n                                                  >\r\n                                                    ${fld === \"ALL\"\r\n                                  ? this.lang === \"es\"\r\n                                    ? \"TODOS\"\r\n                                    : \"ALL\"\r\n                                  : fld}\r\n                                                  </td>`\r\n                              : html`<td\r\n                                                    class=\"absent\"\r\n                                                    title=\"NOT assigned\"\r\n                                                  ></td>`}\r\n                                            `}\r\n                                      `\r\n                  )}\r\n                                </tr>\r\n                              `}\r\n                        `\r\n          )}\r\n                  `}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      `;\r\n    }\r\n\r\n    kpiCardSomeElementsSingleObject(elem, data) {\r\n\r\n      return html`\r\n        <style>\r\n        .cardItem {\r\n          display: flex;\r\n          flex-direction: row; /* Ensures items are laid out in a row */\r\n          align-items: center; /* Aligns items vertically in the center */\r\n        }\r\n        \r\n        .cardLabel {\r\n          color: blue; /* Set your desired color for the label */\r\n          margin-right: 8px; /* Space between the label and value */\r\n        }\r\n        \r\n        .cardValue {\r\n          color: green; /* Set your desired color for the value */\r\n        }\r\n        \r\n        </style>\r\n        ${this.kpiCardSomeElementsMain(elem, this.getDataFromRoot(elem, data))}          \r\n      `;\r\n    }\r\n    cardExpandSectionForScriptStep(elem, data) {\r\n      let jsonElem = {}\r\n      jsonElem.endPointPropertyArray = [\"ROOT\"]\r\n      jsonElem.style = \"background-color:white;\"\r\n      return html`\r\n        ${this.scriptStepArguments(elem, data)}        \r\n        ${this.jsonViewer(jsonElem, JSON.parse(data.dynamic_data))}\r\n        'tester notes:'${data.tester_notes}\r\n      `;\r\n      //${this.kpiCardSomeElementsMain(elem, data)}\r\n    }\r\n    cardSomeElementsRepititiveObjects(elem, data) {\r\n      //console.log('cardSomeElementsRepititiveObjects', 'elem', elem, 'data', data)\r\n      data = this.getDataFromRoot(elem, data);\r\n      //console.log('cardSomeElementsRepititiveObjects >> getDataFromRoot', 'elem', elem, 'data', data)\r\n      return html`\r\n        ${Array.isArray(data) && data.length > 0\r\n          ? html`\r\n              ${data.map(\r\n            (d) => html` ${this.kpiCardSomeElementsMain(elem, d)} `\r\n          )}\r\n            `\r\n          : nothing}\r\n      `;\r\n    }\r\n\r\n    dataContainsRequiredProperties(elem, dataArr) {\r\n      //console.log('dataContainsRequiredProperties', elem.mantadoryPropertiesInVariableName, dataArr[0])\r\n      if (dataArr === undefined) {\r\n        return false;\r\n      }\r\n      if (elem.mantadoryPropertiesInVariableName === undefined) {\r\n        return true;\r\n      }\r\n      //let rValue=true\r\n      const rValue = elem.mantadoryPropertiesInVariableName.every((curProp) => {\r\n        if (Array.isArray(dataArr)) {\r\n          return dataArr[0] !== undefined && dataArr[0][curProp] !== undefined;\r\n        } else {\r\n          return dataArr[curProp] !== undefined;\r\n        }\r\n      });\r\n      //if (rValue===undefined){return true}\r\n      return rValue;\r\n    }\r\n\r\n    get dialogEl() {\r\n      return this.shadowRoot.querySelector(\"div#dialog-frame\");\r\n    }\r\n    get iframeEl() {\r\n      return this.shadowRoot.querySelector(\"iframe#my-iframe\");\r\n    }\r\n    get videosourceEl() {\r\n      return this.shadowRoot.querySelector(\"source#video-source\");\r\n    }\r\n    //get listMDprocedureUsers() {return this.shadowRoot.querySelector(\"mwc-select#listMDprocedureUsers\")}\r\n    openDialogFrame(e) {\r\n      console.log(e.currentTarget.isvideo);\r\n      this.dialogEl.style.display = \"block\";\r\n      const { width, height } = this.dialogEl.getBoundingClientRect();\r\n      const marginTop = height / 2;\r\n      const marginLeft = width / 2;\r\n      if (\r\n        e.currentTarget.isvideo === undefined ||\r\n        e.currentTarget.isvideo === false\r\n      ) {\r\n        this.iframeEl.src = e.currentTarget.src + \"#toolbar=0\";\r\n      }\r\n      if (\r\n        e.currentTarget.isvideo !== undefined &&\r\n        e.currentTarget.isvideo === true\r\n      ) {\r\n        const mimeUrl = e.currentTarget.src.match(/(?<=src=\")(.*?)(?=\")/)[0];\r\n        this.videosourceEl.src = mimeUrl;\r\n      }\r\n\r\n      console.log(\" window.innerWidth;\", window.innerWidth);\r\n\r\n      this.dialogEl.style.marginTop = `200px`;\r\n      this.dialogEl.style.marginLeft = `316px`;\r\n      if (window.innerWidth < 800) {\r\n        this.dialogEl.style.marginLeft = `100px`;\r\n      }\r\n      this.dialogEl.style.border = \"1px solid rgb(36, 192, 235)\";\r\n      this.dialogEl.style.width = `${window.innerWidth * 0.65}px`;\r\n      //this.dialogEl.style.display = 'block';\r\n    }\r\n\r\n    closeDialogFrame() {\r\n      this.dialogEl.style.display = \"none\";\r\n    }\r\n    keyPressDialogFrame(e) {\r\n      alert(\"key\");\r\n      if (e.key == \"Escape\") {\r\n        this.dialogEl.style.display = \"none\";\r\n      }\r\n      if (e.keyCode == 27) {\r\n        this.dialogEl.style.display = \"none\";\r\n      }\r\n    }\r\n    /**\r\n     * Stop other videos when playing one video\r\n     * @param {*} v the playing video element\r\n     */\r\n    stopOthers(v) {\r\n      let allVids = this.shadowRoot.querySelectorAll(\"video\");\r\n      allVids.forEach((vid) => {\r\n        if (vid.id != v) {\r\n          vid.pause();\r\n        }\r\n      });\r\n    }\r\n    buttonsOnly(elem, data) {\r\n      //console.log('buttonsOnly', 'elem', elem, 'data', data)\r\n      return html`\r\n        ${elem === undefined || elem.title === undefined\r\n          ? nothing\r\n          : html`<span\r\n                style=\"color: rgb(20, 115, 230);font-size: 30px;margin-top: 10px;font-weight: bold;\"\r\n                >${elem.title[\"label_\" + this.lang]}</span\r\n              >`\r\n        }\r\n                <div style=\"flex-basis: auto; width: auto;\">\r\n                  ${this.getButton(elem, data, false)}\r\n                </div>\r\n              </div>\r\n            `;\r\n    }\r\n    kpiCardSomeElementsMain(elem, data) {\r\n      console.log('kpiCardSomeElementsMain', 'elem', elem, 'data', data)\r\n      if (Array.isArray(data) && data.length > 0) {\r\n        data = data[0]\r\n      }\r\n      return html`\r\n        ${elem === undefined || elem.title === undefined\r\n          ? nothing\r\n          : html`<span\r\n              style=\"color: rgb(20, 115, 230);font-size: 30px;margin-top: 10px;font-weight: bold;\"\r\n              >${elem.title[\"label_\" + this.lang]}</span\r\n            >`}\r\n        ${data === undefined\r\n          ? html`${elem.hideNoDataMessage !== undefined &&\r\n            elem.hideNoDataMessage\r\n            ? \"\"\r\n            : \"No columns defined\"}`\r\n          : html`\r\n              <style>\r\n                ul.column-list {\r\n                  -webkit-columns: var(\r\n                    --num-columns,\r\n                    3\r\n                  ); /* Number of columns */\r\n                  -moz-columns: var(--num-columns, 3);\r\n                  columns: var(--num-columns, 3);\r\n                  -webkit-column-gap: 10px; /* Spacing between columns */\r\n                  -moz-column-gap: 10px;\r\n                  column-gap: 10px;\r\n                  list-style-type: none;\r\n                  padding: 0;\r\n                  margin: 0;\r\n                }\r\n                ul.column-list1 {\r\n                  -webkit-columns: 1; /* Number of columns */\r\n                  -moz-columns: 1;\r\n                  columns: 1;\r\n                  -webkit-column-gap: 10px; /* Spacing between columns */\r\n                  -moz-column-gap: 10px;\r\n                  column-gap: 10px;\r\n                  list-style-type: none;\r\n                  padding: 0;\r\n                  margin: 0;\r\n                }\r\n                ul.column-list2 {\r\n                  -webkit-columns: 2; /* Number of columns */\r\n                  -moz-columns: 2;\r\n                  columns: 2;\r\n                  -webkit-column-gap: 10px; /* Spacing between columns */\r\n                  -moz-column-gap: 10px;\r\n                  column-gap: 10px;\r\n                  list-style-type: none;\r\n                  padding: 0;\r\n                  margin: 0;\r\n                }\r\n                ul.column-list3 {\r\n                  -webkit-columns: var(\r\n                    --num-columns,\r\n                    3\r\n                  ); /* Number of columns */\r\n                  -moz-columns: var(--num-columns, 3);\r\n                  columns: var(--num-columns, 3);\r\n                  -webkit-column-gap: 10px; /* Spacing between columns */\r\n                  -moz-column-gap: 10px;\r\n                  column-gap: 10px;\r\n                  list-style-type: none;\r\n                  padding: 0;\r\n                  margin: 0;\r\n                }\r\n                ul.column-list4 {\r\n                  -webkit-columns: 4; /* Number of columns */\r\n                  -moz-columns: 4;\r\n                  columns: 4;\r\n                  -webkit-column-gap: 10px; /* Spacing between columns */\r\n                  -moz-column-gap: 10px;\r\n                  column-gap: 10px;\r\n                  list-style-type: none;\r\n                  padding: 0;\r\n                  margin: 0;\r\n                }\r\n\r\n                ul.column-list li {\r\n                  display: inline-block;\r\n                  width: 100%;\r\n                  margin-bottom: 10px;\r\n                  margin-left: 30px;\r\n                  hyphens: auto;\r\n                  word-break: break-all;\r\n                  left: -17px;\r\n                  position: RELATIVE;\r\n                }\r\n                span.relevantlabel {\r\n                  font-weight: bold;\r\n                  font-size: 16px;\r\n                }\r\n                span.label {\r\n                  font-weight: bold;\r\n                }\r\n                div#mainaddborder {\r\n                  border: 0.72px solid rgba(36, 192, 235, 1);\r\n                  border-radius: 10px;\r\n                  padding: 10px;\r\n                  margin-right: 2px;\r\n                  overflow: hidden;\r\n                  flex-basis: calc(33.33% - 10px);\r\n                  position: relative;                  \r\n                  left: -12px;   \r\n                  align-content: flex-start;               \r\n                }\r\n                iframe {\r\n                  width: 100%;\r\n                  height: 250px;\r\n                  flex: 1;\r\n                }\r\n                /* Dialog styles */\r\n                .dialog {\r\n                  display: none;\r\n                  position: fixed;\r\n                  z-index: 9999;\r\n                  top: 0;\r\n                  left: 0;\r\n                  width: 1000px;\r\n                  height: 600px;\r\n                  background-color: white; /* rgba(0, 0, 0, 0.5); */\r\n                }\r\n\r\n                /* Iframe styles */\r\n                #my-iframe {\r\n                  width: 100%;\r\n                  height: 100%;\r\n                  border: none;\r\n                  flex: 1;\r\n                }\r\n                @keyframes slidein {\r\n                  from {\r\n                    margin-left: 30%;\r\n                  }\r\n                  to {\r\n                    margin-left: 0%;\r\n                  }\r\n                }\r\n                @media (max-width: 460px) {\r\n                }\r\n                iframe::shadow\r\n                  .pdf-viewer::content\r\n                  #controls\r\n                  ::slotted(.SwitchToReadingMode-Small14) {\r\n                  display: none;\r\n                }\r\n                .card-container {\r\n                  display: flex;\r\n                  flex-wrap: wrap;\r\n                }\r\n\r\n                .card {\r\n                  flex: 0 0 calc(33.33% - 20px);\r\n                  margin: 10px;\r\n                  border: 1px solid #ccc;\r\n                  padding: 10px;\r\n                }\r\n\r\n                @media (max-width: 768px) {\r\n                  .card {\r\n                    flex: 0 0 calc(50% - 20px);\r\n                  }\r\n                }\r\n\r\n                @media (max-width: 480px) {\r\n                  .card {\r\n                    flex: 0 0 calc(100% - 20px);\r\n                  }\r\n                }\r\n              </style>\r\n              <div data-index=\"${elem.index}\"\r\n                id=\"main${elem.add_border !== undefined &&\r\n              elem.add_border == true\r\n              ? \"addborder\"\r\n              : \"\"}\"\r\n                class=\"layout vertical flex wrap\"\r\n                style=\"${elem.style !== undefined ? elem.style : \"\"}\"\r\n              >\r\n                <div style=\"flex-basis: auto; width: auto;\">\r\n                  ${this.getButton(elem, data, true)}\r\n                </div>\r\n                <ul\r\n                  style=\"align-items: baseline;\"\r\n                  class=\"column-list${elem.num_columns !== undefined\r\n              ? elem.num_columns\r\n              : \"\"}\"\r\n                >\r\n                ${elem.fieldsToDisplay === undefined ? nothing :\r\n              html`\r\n                  ${elem.fieldsToDisplay.map(\r\n                (fld, i) =>\r\n                  html`\r\n                        ${this.fieldsToDiscard(fld) === true\r\n                      ? nothing\r\n                      : html`                              \r\n                              ${fld.as_ppt !== undefined &&\r\n                          (fld.as_ppt === true || fld.as_video === true)\r\n                          ? html`\r\n                                    <mwc-icon-button\r\n                                      icon=\"fullscreen\"\r\n                                      .isvideo=${data.is_video}\r\n                                      .src=${data[fld.name]}\r\n                                      @click=${this.openDialogFrame}\r\n                                      .fld=${fld}\r\n                                    ></mwc-icon-button>\r\n                                    ${data.is_video === undefined ||\r\n                              data.is_video === false\r\n                              ? html`\r\n                                          <iframe\r\n                                            src=${data[fld.name]}\r\n                                            @click=${this.openDialogFrame}\r\n                                          ></iframe>\r\n                                          <div id=\"dialog-frame\" class=\"dialog\">\r\n                                            <mwc-icon-button\r\n                                              icon=\"fullscreen_exit\"\r\n                                              @click=${this.closeDialogFrame}\r\n                                            ></mwc-icon-button>\r\n                                            <iframe\r\n                                              id=\"my-iframe\"\r\n                                              controls\r\n                                              controlsList=\"nodownload\"\r\n                                            ></iframe>\r\n                                          </div>\r\n                                        `\r\n                              : html`\r\n                            <video id=\"${data[fld.name]\r\n                                }-${i}\" controls slot=\"cover-photo\"\r\n                            @play=${() =>\r\n                                  this.stopOthers(`${data[fld.name]}-${i}`)}>\r\n                            <source type=\"video/mp4\" src=\"${data[fld.name]}\">\r\n                            </video>\r\n<!---\r\n                              <video controls type=\"video/mp4\" src=${data[fld.name]\r\n                                } controlsList=\"nodownload\"oncontextmenu=\"return false\" onselectstart=\"return false\" ondragstart=\"return false\"></video>\r\n                              <div id=\"dialog-frame\" class=\"dialog\">\r\n                              <mwc-icon-button icon=\"fullscreen_exit\" @click=${this.closeDialogFrame\r\n                                }></mwc-icon-button> \r\n                                <video id=\"video-source\" type=\"video/mp4\" controls controlsList=\"nodownload\"oncontextmenu=\"return false\" onselectstart=\"return false\" ondragstart=\"return false\" >\r\n                                </video>-->\r\n                              </div>\r\n                            `}\r\n                                  `\r\n                          : html`\r\n                                ${fld.is_tag_list !== undefined && fld.is_tag_list === true ? html`   \r\n                                <span class=\"cardLabel\" style=\"${elem.styleForLabel !== undefined ? elem.styleForLabel : \"\"}\">${this.fieldLabel(fld)}:</span>\r\n                                <span class=\"cardValue\" style=\"${elem.styleForValue !== undefined ? elem.styleForValue : \"\"}\">\r\n                                  <multi-select .label=${this.purpose} .props=${{ \"readOnly\": true, \"displayLabel\": false }} .activeOptions=${data[fld.name]} .options=${{}}> </multi-select>\r\n                                </span>\r\n                                `: html`                                      \r\n                                    ${fld.as_progress !== undefined &&\r\n                                fld.as_progress === true\r\n                                ? html`\r\n                                          <style>\r\n                                            .w3-responsive {\r\n                                              display: block;\r\n                                              overflow-x: auto;\r\n                                            }\r\n                                            .w3-container,\r\n                                            .w3-panel {\r\n                                              padding: 0.01em 4px;\r\n                                            }\r\n                                            .w3-panel {\r\n                                              margin-top: 16px;\r\n                                              margin-bottom: 16px;\r\n                                              border-radius: 5px;\r\n                                              box-shadow: 0px 0px 5px\r\n                                                rgba(0, 0, 0, 0.1);\r\n                                            }\r\n                                            .w3-container:after,\r\n                                            .w3-container:before,\r\n                                            .w3-panel:after,\r\n                                            .w3-panel:before,\r\n                                            .w3-row:after,\r\n                                            .w3-row:before,\r\n                                            .w3-row-padding:after,\r\n                                            .w3-row-padding:before,\r\n                                            .w3-blue,\r\n                                            .w3-hover-blue:hover {\r\n                                              color: rgba(\r\n                                                7,\r\n                                                13,\r\n                                                22,\r\n                                                0.94\r\n                                              ) !important;\r\n                                              background-color: #2196f3 !important;\r\n                                            }\r\n                                            .w3-background,\r\n                                            .w3-hover-blue:hover {\r\n                                              color: rgba(\r\n                                                7,\r\n                                                13,\r\n                                                22,\r\n                                                0.94\r\n                                              ) !important;\r\n                                              background-color: #ffdedd !important;\r\n                                            }\r\n                                            .title {\r\n                                              font-size: 18px;\r\n                                              font-weight: 500;\r\n                                              letter-spacing: 0;\r\n                                              line-height: 1.5em;\r\n                                              padding-bottom: 15px;\r\n                                              position: relative;\r\n                                              font-family: Montserrat;\r\n                                              font-color: rgb(94, 145, 186);\r\n                                            }\r\n                                            span.cardMainLabel {\r\n                                              font-weight: bold;\r\n                                              color: rgb(41, 137, 216); /* #032bbc; */\r\n                                            }\r\n                                            span.cardMainValue {            \r\n                                              color: rgba(214, 233, 248, 0.37); /* #009879; */\r\n                                            }\r\n                                          </style>\r\n                                          <div class=\"w3-container\">\r\n                                            <div\r\n                                              class=\"w3-background w3-round-xlarge\"\r\n                                              title=\"${this.titleLang(fld)}\"\r\n                                            >\r\n                                              <div\r\n                                                title=\"${this.titleLang(fld)}\"\r\n                                                class=\"w3-container w3-blue w3-round-xlarge\"\r\n                                                style=\"width:${data[fld.name]}%\"\r\n                                              >\r\n                                                ${fld.name}:\r\n                                                ${data[fld.name] ===\r\n                                    undefined ||\r\n                                    data[fld.name].length == 0\r\n                                    ? \"0\"\r\n                                    : data[fld.name]}%\r\n                                              </div>\r\n                                            </div>\r\n                                          </div>\r\n                                          <br />\r\n                                        `\r\n                                : html`\r\n                                          ${this.cardField(fld, data)}                                        \r\n                                        `}\r\n                                  `}\r\n                                `}  \r\n                            `}\r\n                      `\r\n              )}\r\n                `}\r\n                </ul>\r\n              </div>\r\n            `}\r\n      `;\r\n    }\r\n    cardField(fld, data) {\r\n      if (fld.fix_value_suffix !== undefined || fld.name2 !== undefined) {\r\n        if (data[fld.name] === undefined && fld.hideNoDataMessage !== undefined && fld.hideNoDataMessage === true) { return html`` }\r\n        return html`\r\n          <li class=\"cardItem\" style=\"${fld.styleForBlock !== undefined ? fld.styleForBlock : \"\"}\">\r\n            <span class=\"cardLabel\" style=\"${fld.styleForLabel !== undefined ? fld.styleForLabel : \"\"}\">\r\n              ${this.fieldLabel(fld)}:\r\n            </span>\r\n            <span class=\"cardValue\" style=\"${fld.styleForValue !== undefined ? fld.styleForValue : \"\"}\">\r\n              ${data[fld.name]}\r\n              ${fld.fix_value_suffix !== undefined ? fld.fix_value_suffix : \"\"}\r\n              ${fld.fix_value2_prefix !== undefined ? fld.fix_value2_prefix : \"\"}\r\n              ${fld.name2 !== undefined ? data[fld.name2] : \"\"}\r\n              ${fld.fix_value2_suffix !== undefined ? fld.fix_value2_suffix : \"\"}\r\n              ${fld.fix_value3_prefix !== undefined ? fld.fix_value3_prefix : \"\"}\r\n              ${fld.name3 !== undefined ? data[fld.name3] : \"\"}\r\n              ${fld.fix_value3_suffix !== undefined ? fld.fix_value3_suffix : \"\"}\r\n            </span>\r\n          </li>`\r\n        }\r\n      if (fld.paragraph!==undefined){\r\n        let fldValue=unsafeHTML(this.getDynamicData(fld.paragraph, data, this.lang))\r\n        if (fldValue===undefined&&fld.hideNoDataMessage!==undefined&&fld.hideNoDataMessage===true){return html``}\r\n        let fldLabel=this.fieldLabel(fld)\r\n        return html`\r\n        <li class=\"cardItem\" style=\"${fld.styleForBlock !== undefined ? fld.styleForBlock : \"\"}\">\r\n          ${fldLabel===undefined?nothing:html`\r\n            <span class=\"cardLabel\" style=\"${fld.styleForLabel !== undefined ? fld.styleForLabel : \"\"}\">\r\n              ${fldLabel}:\r\n            </span>\r\n          `}\r\n          <span class=\"cardValue\" style=\"${fld.styleForValue !== undefined ? fld.styleForValue : \"\"}\">\r\n            ${fldValue}\r\n          </span>\r\n        </li>        \r\n        `\r\n      }\r\n      if ((data[fld.name] === undefined || data[fld.name].length == 0) && fld.hideNoDataMessage !== undefined && fld.hideNoDataMessage === true) {\r\n        if (fld.KeepJustLabelWhenNoDataMessage !== undefined && fld.KeepJustLabelWhenNoDataMessage === true) {\r\n          return html`\r\n          <li class=\"cardItem\" style=\"${fld.styleForBlock !== undefined ? fld.styleForBlock : \"\"}\">\r\n            <span class=\"cardLabel\" style=\"${fld.styleForLabel !== undefined ? fld.styleForLabel : \"\"}\">\r\n              ${this.fieldLabel(fld)}:\r\n            </span>\r\n          </li>\r\n          `\r\n        } else {\r\n          return html``\r\n        }\r\n      }\r\n      return html`\r\n        <li class=\"cardItem\" style=\"${fld.styleForBlock !== undefined ? fld.styleForBlock : \"\"}\">\r\n          <span class=\"cardLabel\" style=\"${fld.styleForLabel !== undefined ? fld.styleForLabel : \"\"}\">\r\n            ${this.fieldLabel(fld)}:\r\n          </span>          \r\n          <span class=\"cardValue\" style=\"${fld.styleForValue !== undefined ? fld.styleForValue : \"\"}\">\r\n            ${fld.is_icon !== undefined && fld.is_icon === true ?\r\n          html`${this.cellIsIcon(fld, data, undefined)}`\r\n          :\r\n          html`${data[fld.name]}`\r\n        }\r\n          </span>\r\n        </li>\r\n      `\r\n    }\r\n    fieldLabel(fld) {\r\n      if (fld.hideLabel!==undefined&&fld.hideLabel===true){return ''}\r\n      return fld[\"label_\" + this.lang] !== undefined\r\n        ? fld[\"label_\" + this.lang]\r\n        : fld.name;\r\n    }\r\n    dialogs() {\r\n      console.log('DataViews dialogs')\r\n      return html` ${this.credentialsDialog()} ${this.genericFormDialog()}  ${this.reactivateObjectsDialog()}`;\r\n    }\r\n\r\n    loadDialogs() {\r\n      console.log('DataViews loadDialogs')\r\n      return html`\r\n        ${this.credentialsDialog()} ${this.genericFormDialog()}\r\n        ${this.reactivateObjectsDialog()}\r\n        ${this.moduleEnvMonitMicroorganismsDialogAdd()}\r\n        ${this.moduleEnvMonitMicroorganismsDialogRemove()}\r\n        ${this.pointTemplate()} ${this.resultTemplate()}\r\n        ${this.investigationTemplate()}\r\n        ${this.filterName == \"open\"\r\n          ? html`${this.decisionTemplate()}`\r\n          : nothing}\r\n        ${this.decisionTemplate()}\r\n      `;\r\n    }\r\n\r\n    kpiCard(elem, data = this.data, isProcManagement) {\r\n      let myDataArr = [];\r\n      if (Array.isArray(data)) {\r\n        myDataArr = data;\r\n      } else {\r\n        myDataArr.push(data);\r\n      }\r\n\r\n      //console.log('kpiCard', 'elem', elem, 'data', this.data)\r\n      return html`\r\n              ${!data\r\n          ? nothing\r\n          : html`\r\n                      <style>\r\n                        li.cardelement {\r\n                          color: #032bbc;\r\n                        }\r\n                        .card {\r\n                          position: relative;\r\n                          display: inline-block;\r\n                          margin: 10px;\r\n                        }\r\n                        .ribbon {\r\n                          width: 0;\r\n                          height: 0;\r\n                          border-top: 50px solid #f44336;\r\n                          content: \"\";\r\n                        }\r\n                        <div\r\n                          class=\"ribbons\"\r\n                          > <p\r\n                          > New</p\r\n                          > </div\r\n                          > .ribbon::before {\r\n                          width: 0;\r\n                          height: 0;\r\n                          border-left: 60px solid transparent;\r\n                          content: \"\";\r\n                        }\r\n\r\n                        .ribbon p {\r\n                          position: absolute;\r\n                          margin: 0;\r\n                          padding: 5px 15px;\r\n                          color: #fff;\r\n                          transform: rotate(45deg);\r\n                          background-color: #f44336;\r\n                          font-size: 14px;\r\n                          z-index: 9;\r\n                        }\r\n                      </style>\r\n                      <div class=\"layout horizontal flex wrap\">\r\n                        ${myDataArr.map(\r\n            (curData) =>\r\n              html`\r\n                              ${this.loadDialogs()}\r\n                              <div class=\"card\">\r\n                                <sp-card-ext\r\n                                  heading=\"${elem.title === undefined\r\n                  ? \"\"\r\n                  : elem.title[\"label_\" + this.lang] ===\r\n                    undefined\r\n                    ? \"-\"\r\n                    : elem.title[\"label_\" + this.lang]}\"\r\n                                  subheading=\"${elem.subtitle === undefined\r\n                  ? \"\"\r\n                  : elem.subtitle[\"label_\" + this.lang] ===\r\n                    undefined\r\n                    ? \"-\"\r\n                    : elem.subtitle[\"label_\" + this.lang]}\"\r\n                                >\r\n                                  <div slot=\"ribbon\"></div>\r\n                                  <div slot=\"footer\">\r\n                                    <div\r\n                                      class=\"layout horizontal center flex wrap\"\r\n                                    >\r\n                                      ${this.getButton(\r\n                      elem,\r\n                      curData,\r\n                      isProcManagement\r\n                    )}\r\n                                    </div>\r\n                                    ${elem.fieldsToDisplay === undefined\r\n                  ? nothing\r\n                  : elem.fieldsToDisplay.map(\r\n                    (d) =>\r\n                      html`<li class=\"cardelement\">\r\n                                              ${d[\"label_\" + this.lang]}:\r\n                                              ${curData[\r\n                        d.field_name\r\n                        ]}${d.fix_value_suffix !==\r\n                          undefined\r\n                          ? d.fix_value_suffix\r\n                          : \"\"}\r\n                                              ${d.fix_value2_prefix !==\r\n                          undefined\r\n                          ? d.fix_value2_prefix\r\n                          : \"\"}${d.name2 !== undefined\r\n                            ? curData[d.field_name2]\r\n                            : \"\"}${d.fix_value2_suffix !==\r\n                              undefined\r\n                              ? d.fix_value2_suffix\r\n                              : \"\"}\r\n                                              ${d.fix_value3_prefix !==\r\n                          undefined\r\n                          ? d.fix_value3_prefix\r\n                          : \"\"}${d.name3 !== undefined\r\n                            ? curData[d.field_name3]\r\n                            : \"\"}${d.fix_value3_suffix !==\r\n                              undefined\r\n                              ? d.fix_value3_suffix\r\n                              : \"\"}\r\n                                            </li>`\r\n                  )}\r\n                                  </div>\r\n                                </sp-card-ext>\r\n                              </div>\r\n                              <audit-dialog\r\n                                @sign-audit=${this.setAudit}\r\n                                .actionBeingPerformedModel=${this\r\n                  .actionBeingPerformedModel}\r\n                                .filterName=${this.filterName}\r\n                                .lang=${this.lang}\r\n                                .windowOpenable=${this.windowOpenable}\r\n                                .sopsPassed=${this.sopsPassed}\r\n                                .procInstanceName=${this.procInstanceName}\r\n                                .viewName=${this.viewName}\r\n                                .viewModelFromProcModel=${this\r\n                  .viewModelFromProcModel}\r\n                                .selectedItems=${this.selectedItems}\r\n                                .config=${this.config}\r\n                              ></audit-dialog>\r\n                            `\r\n          )}\r\n                      </div>\r\n                    `\r\n        }\r\n              </div>\r\n            `;\r\n    }\r\n    kpiStyleByStringAttribute(elType, elem) {\r\n      let defaultOptions = \"\";\r\n      if ((elType = \"title\")) {\r\n        defaultOptions = \"width:300px;color:blue;\";\r\n      }\r\n      if ((elType = \"div\")) {\r\n        defaultOptions = \"display:flex\";\r\n      }\r\n      let chartObj = this.shadowRoot.querySelector(\r\n        elType + \"#\" + elem.elementName\r\n      );\r\n      let chartOptions = {};\r\n      if (elem.style === undefined) {\r\n        return defaultOptions; //\"color:red;\"\r\n      } else {\r\n        return elem.style;\r\n      }\r\n      return;\r\n    }\r\n    kpiChartFran(elem, data) {\r\n      if (elem === undefined) { return html`` }\r\n\r\n      if (elem.endPointPropertyArray !== undefined) {\r\n        data = this.getDataFromRoot(elem, data);\r\n      }\r\n      if (!((elem.grouper_field_name !== undefined && data[elem.grouper_field_name]) ||\r\n        (elem.counter_field_name !== undefined && data[elem.counter_field_name]))) {\r\n        return html``\r\n      }\r\n\r\n      if (elem.hideNoDataMessage !== undefined && elem.hideNoDataMessage === true && data === undefined) { return html`` }\r\n      if (data === undefined && this.data !== undefined) { data = this.data }\r\n\r\n      //console.log('kpiChartFran', 'elem', elem, 'data', data)\r\n      return html`\r\n        ${elem.display_chart !== true\r\n          ? nothing\r\n          : html`\r\n              ${this.chartStyle(elem.chart_name)}\r\n              <google-chart\r\n                id=\"${elem.chart_name}\"\r\n                title=\"${elem.chart_title[\"label_\" + this.lang]}\"\r\n                type=\"${elem.chart_type}\"\r\n                .data=\"${this.getChartData(elem, data)}\"\r\n                .options=\"${this.getChartOptions(elem)}\"\r\n              ></google-chart>\r\n            `}\r\n      `;\r\n    }\r\n    chartStyle(chartName) {\r\n      let chartObj = this.shadowRoot.querySelector(\"google-chart#\" + chartName);\r\n      if (chartObj !== undefined && chartObj !== null) {\r\n        chartObj.style.setProperty(\"width\", \"1600px\");\r\n      }\r\n      //console.log(\"chartStyle\", \"chartName\", chartName, chartObj);\r\n    }\r\n\r\n    addNumericValue(rule, value) {\r\n      if (rule == undefined) {\r\n        return true;\r\n      }\r\n      if (value == undefined) {\r\n        return false;\r\n      }\r\n      if (rule.min_allowed != undefined) {\r\n        if (value <= rule.min_allowed) {\r\n          return false;\r\n        }\r\n      }\r\n      if (rule.min_allowed_included < undefined) {\r\n        if (value < rule.min_allowed_included) {\r\n          return false;\r\n        }\r\n      }\r\n      if (rule.max_allowed != undefined) {\r\n        if (value >= rule.max_allowed) {\r\n          return false;\r\n        }\r\n      }\r\n      if (rule.max_allowed_included > undefined) {\r\n        if (value > rule.max_allowed_included) {\r\n          return false;\r\n        }\r\n      }\r\n      if (rule.value != undefined) {\r\n        if (rule.value == value) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    getChartData(elem, data) {\r\n      //console.log('getChartData', elem, 'data', data, 'this.data', this.data, 'chartData')\r\n      let chartData = [];\r\n      let fakeData = []\r\n      if (elem.elementName === 'fakeTrendlineExample') {\r\n        fakeData = [\r\n          ['Diameter', 'Age'],\r\n          [8, 37], [4, 19.5], [11, 52], [4, 22], [3, 16.5], [6.5, 32.8], [14, 72]\r\n        ]\r\n        return fakeData\r\n      }\r\n      if (elem.elementName === \"cdatatable\") {\r\n        fakeData = [\r\n          [\"Day\", \"Guardians of the Galaxy\", \"The Avengers\", \"Transformers: Age of Extinction\",],\r\n          [1, 37.8, 80.8, 41.8], [2, 30.9, 69.5, 32.4], [3, 25.4, 57, 25.7], [4, 11.7, 18.8, 10.5],\r\n          [5, 11.9, 17.6, 10.4], [6, 8.8, 13.6, 7.7], [7, 7.6, 12.3, 9.6], [8, 12.3, 29.2, 10.6],\r\n          [9, 16.9, 42.9, 14.8], [10, 12.8, 30.9, 11.6], [11, 5.3, 7.9, 4.7],\r\n          [12, 6.6, 8.4, 5.2], [13, 4.8, 6.3, 3.6], [14, 4.2, 6.2, 3.4],\r\n        ];\r\n        return fakeData;\r\n      }\r\n      if (elem.chartModel === \"methodValidation\") {\r\n        return this.getChartDataForMethodValidation(elem, data)\r\n      }\r\n\r\n      if (data === undefined && this.data !== undefined) { data = this.data }\r\n      //data = this.getDataFromRoot(elem, data);\r\n      if (data === undefined && (elem.chart_name === undefined || data[elem.chart_name] === undefined)) {\r\n        if (this.selectedItem !== undefined) {\r\n          data = this.selectedItem;\r\n        } else {\r\n          if (this.selectedItemInView !== undefined) {\r\n            data = this.selectedItemInView;\r\n          }\r\n        }\r\n      }\r\n      //chartData = [[elem.label_item, elem.label_value]];\r\n\r\n      if (data !== undefined && data[elem.chart_name] !== undefined) {\r\n        let dataForChart = data[elem.chart_name];\r\n\r\n        let seriesArr = [];\r\n        if (Array.isArray(elem.counter_field_name)) {\r\n          seriesArr = elem.counter_field_name;\r\n        } else {\r\n          seriesArr.push(elem.counter_field_name);\r\n        }\r\n\r\n        let curchtHeader = [];\r\n        curchtHeader.push(elem.label_item);\r\n        for (let iSerie = 0; iSerie < seriesArr.length; iSerie++) {\r\n          curchtHeader.push(seriesArr[iSerie]);\r\n        }\r\n        chartData.push(curchtHeader);\r\n        for (let iData = 0; iData < dataForChart.length; iData++) {\r\n          if (!elem.grouper_exclude_items.includes(dataForChart[iData][elem.grouper_field_name])) {\r\n            for (let iSerie = 0; iSerie < seriesArr.length; iSerie) {\r\n              if (\r\n                this.addNumericValue(\r\n                  elem.counterLimits,\r\n                  dataForChart[iData][seriesArr[iSerie]]\r\n                )\r\n              ) {\r\n                let curchtval = [];\r\n                curchtval.push(\r\n                  this.labelPossibleReplacement(\r\n                    elem,\r\n                    dataForChart[iData][elem.grouper_field_name]\r\n                  )\r\n                );\r\n\r\n                for (let iSerie = 0; iSerie < seriesArr.length; iSerie++) {\r\n                  curchtval.push(dataForChart[iData][seriesArr[iSerie]]); // Add each value from seriesArr as a column\r\n                }\r\n                chartData.push(curchtval);\r\n              }\r\n            }\r\n          } // iSerie\r\n        } // iData\r\n      }\r\n      //console.log('getChartData', 'chartData', chartData)\r\n      return chartData;\r\n    }\r\n    labelPossibleReplacement(elem, labelValue) {\r\n      if (elem.label_values_replacement !== undefined) {\r\n        let fld = elem.label_values_replacement[labelValue];\r\n        if (fld !== undefined) {\r\n          return fld[\"label_\" + this.lang];\r\n        }\r\n        //console.log('labelPossibleReplacement', labelValue, 'fld', fld)\r\n      }\r\n      return labelValue;\r\n    }\r\n    getChartDataForMethodValidationFran(elem, data) {\r\n      let chartData = []\r\n      if (data === undefined || elem === undefined) { return chartData }\r\n\r\n      //curchtHeader.push(elem.label_item);\r\n      for (let iSerie = 0; iSerie < data[chartSourceData].length; iSerie++) {\r\n        let curchtHeader = [];\r\n        curchtHeader[0] = data[chartSourceData][xAxisSouceData]\r\n        curchtHeader[1] = data[chartSourceData][sourceData]\r\n        chartData.push(curchtHeader);\r\n      }\r\n      return chartData\r\n    }\r\n\r\n    getChartDataForMethodValidation(elem, data) {\r\n      let chartData = [];\r\n      if (data === undefined || elem === undefined) {\r\n        return chartData;\r\n      }\r\n\r\n      const chartSourceData = data[elem.chartSourceData];\r\n      if (!chartSourceData || !Array.isArray(chartSourceData)) {\r\n        return chartData;\r\n      }\r\n      let curchtHeader = [];\r\n      curchtHeader[0] = elem.xAxisSourceData;\r\n      curchtHeader[1] = elem.sourceData;\r\n      chartData.push(curchtHeader);\r\n      for (let iSerie = 0; iSerie < chartSourceData.length; iSerie++) {\r\n        let curchtHeader = [];\r\n        let currentData = chartSourceData[iSerie];\r\n\r\n        // Make sure xAxisSourceData and sourceData exist in the current data object\r\n        if (currentData[elem.xAxisSourceData] !== undefined && currentData[elem.sourceData] !== undefined) {\r\n          curchtHeader[0] = Number(currentData[elem.xAxisSourceData]);\r\n          curchtHeader[1] = Number(currentData[elem.sourceData]);\r\n          chartData.push(curchtHeader);\r\n        }\r\n      }\r\n\r\n      return chartData;\r\n    }\r\n\r\n    getChartOptions(elem) {\r\n      if (elem.elementName === 'fakeTrendlineExample') {\r\n        return {\r\n          title: 'Age of sugar maples vs. trunk diameter, in inches',\r\n          hAxis: { title: 'Diameter' },\r\n          vAxis: { title: 'Age' },\r\n          legend: 'none',\r\n          trendlines: { 0: {} }    // Draw a trendline for data series 0.\r\n        };\r\n      }\r\n      let defaultChartOptions = {\r\n        width: \"300px\",\r\n        backgroundColor: \"transparent\",\r\n        is3D: true,\r\n      };\r\n      let chartOptions = {};\r\n      if (elem.chart_title !== undefined) {\r\n        chartOptions.title = elem.chart_title[\"label_\" + this.lang];\r\n      }\r\n      if (elem.chartStyle === undefined) {\r\n        Object.entries(defaultChartOptions).map(([key, val]) => {\r\n          //console.log(key, val)\r\n          chartOptions[key] = val;\r\n        });\r\n      } else {\r\n        Object.entries(elem.chartStyle).map(([key, val]) => {\r\n          //console.log(key, val)\r\n          chartOptions[key] = val;\r\n        });\r\n      }\r\n      return chartOptions;\r\n    }\r\n\r\n    kpiCharts(elem) {\r\n      return html`\r\n        <datamining-google-chart-ext\r\n          id=\"chart1\"\r\n          @redrawed=${(e) =>\r\n          this.dispatchEvent(\r\n            new CustomEvent(\"chart-images\", {\r\n              detail: { imgUri: e.target.imageURI },\r\n            })\r\n          )}\r\n          style=\"margin: 5px 5px 30px 8px\"\r\n          type=\"line\"\r\n          options='{\"height\": ${this.chartH}, \"width\": ${this.chartW}}'\r\n        ></datamining-google-chart-ext>\r\n        <datamining-google-chart-ext\r\n          id=\"chart2\"\r\n          @redrawed=${(e) =>\r\n          this.dispatchEvent(\r\n            new CustomEvent(\"chart-images\", {\r\n              detail: { imgUri: e.target.imageURI },\r\n            })\r\n          )}\r\n          style=\"margin: 5px 5px 30px 8px\"\r\n          type=\"line\"\r\n          options='{\"height\": ${this.chartH}, \"width\": ${this.chartW}}'\r\n        ></datamining-google-chart-ext>\r\n      `;\r\n    }\r\n\r\n    EnvMonAirSampleBrowser() {\r\n      if (this.data.sampleFieldToRetrieve === undefined) return html``;\r\n      let header = `Report for the `;\r\n      header += `sample ${this.data.sampleFieldToRetrieve.sample_id}`;\r\n      return html`${this.data.sampleFieldToRetrieve\r\n        ? html`\r\n            <sp-card-ext\r\n              heading=\"Report for the sample\"\r\n              subheading=\"${this.data.sampleFieldToRetrieve.sample_id}\"\r\n            >\r\n              <div slot=\"footer\">\r\n                ${this.data.sampleFieldsToDisplay.map(\r\n          (d) => html`<li class=\"cardItem\">${d.field_name}: ${d.field_value}</li>`\r\n        )}\r\n              </div>\r\n            </sp-card-ext>\r\n            <sp-card-ext heading=\"Stages\" nonSubHeading>\r\n              <div slot=\"footer\" class=\"layout vertical\">\r\n                ${this.data.stages.map(\r\n          (d) =>\r\n            html`\r\n                      ${this.stageTitle(d.current_stage)}\r\n                      ${this.stageTimingCapture(d)}\r\n                      <sp-card-ext\r\n                        heading=\"${d.current_stage}\"\r\n                        ?nonSubHeading=${!d.started_on}\r\n                        subheading=\"${d.started_on}${d.ended_on &&\r\n              ` >> ${d.ended_on}`}\"\r\n                      >\r\n                        <div slot=\"footer\">\r\n                          ${d.current_stage == \"Sampling\"\r\n                ? html`\r\n                                ${d.data.map(\r\n                  (data) =>\r\n                    html`<li class=\"cardItem\">\r\n                                      ${data.field_name}: ${data.field_value}\r\n                                    </li>`\r\n                )}\r\n                              `\r\n                : html`${d.current_stage == \"Incubation\"\r\n                  ? html`\r\n                                    ${d.data.map(\r\n                    (data) =>\r\n                      html`\r\n                                          <sp-card-ext\r\n                                            heading=\"Incubation 1\"\r\n                                            nonSubHeading\r\n                                          >\r\n                                            <div slot=\"footer\">\r\n                                              ${data.incubation_1.map(\r\n                        (f) =>\r\n                          html`${f.field_name\r\n                            ? html`<li class=\"cardItem\">\r\n                                                        ${f.field_name}:\r\n                                                        ${f.field_value}\r\n                                                      </li>`\r\n                            : nothing}`\r\n                      )}\r\n                                            </div>\r\n                                          </sp-card-ext>\r\n                                          <sp-card-ext\r\n                                            heading=\"Incubation 2\"\r\n                                            nonSubHeading\r\n                                          >\r\n                                            <div slot=\"footer\">\r\n                                              ${data.incubation_2.map(\r\n                        (f) =>\r\n                          html`${f.field_name\r\n                            ? html`<li class=\"cardItem\">\r\n                                                        ${f.field_name}:\r\n                                                        ${f.field_value}\r\n                                                      </li>`\r\n                            : nothing}`\r\n                      )}\r\n                                            </div>\r\n                                          </sp-card-ext>\r\n                                        `\r\n                  )}\r\n                                  `\r\n                  : html`${d.current_stage == \"PlateReading\"\r\n                    ? html`\r\n                                        ${d.data.map(\r\n                      (data) =>\r\n                        html`${data.field_name ==\r\n                          \"raw_value\"\r\n                          ? html`<li class=\"cardItem\">\r\n                                                  Number of Colonies:\r\n                                                  ${data.field_value}\r\n                                                </li>`\r\n                          : nothing}`\r\n                    )}\r\n                                      `\r\n                    : html`${d.current_stage ==\r\n                      \"MicroorganismIdentification\"\r\n                      ? html`\r\n                                            ${d.data.map(\r\n                        (data) =>\r\n                          html`${data.field_name ===\r\n                            \"microorganism_count\" ||\r\n                            data.field_name ===\r\n                            \"microorganism_list\"\r\n                            ? html`<li class=\"cardItem\">\r\n                                                      ${data.field_name}:\r\n                                                      ${data.field_value}\r\n                                                    </li>`\r\n                            : nothing}`\r\n                      )}\r\n                                          `\r\n                      : html`\r\n                                            ${d.data.map(\r\n                        (data) =>\r\n                          html`${data.field_name == \"name\"\r\n                            ? html`${data.field_name}:\r\n                                                    ${data.field_value}`\r\n                            : nothing}`\r\n                      )}\r\n                                          `}`}`}`}\r\n                        </div>\r\n                        ${d.current_stage == \"Sampling\"\r\n                ? html`<mwc-icon\r\n                              slot=\"actions\"\r\n                              title=\"Open\"\r\n                              placement=\"bottom-end\"\r\n                              ?hidden=${this.data.sampleFieldToRetrieve\r\n                    .current_stage == \"END\"}\r\n                              @click=${this.openSample}\r\n                              >file_open</mwc-icon\r\n                            >`\r\n                : nothing}\r\n                      </sp-card-ext>\r\n                    `\r\n        )}\r\n              </div>\r\n            </sp-card-ext>\r\n          `\r\n        : html`Sample ID: ${data.sample_id}`}`;\r\n    }\r\n    EnvMonAirSampleReportTitle() {\r\n      return \"Report for the sample \" + this.data.buttonActionInfo.objectId;\r\n    }\r\n    EnvMonAirSampleReportContent() {\r\n      let strContent = `<h2>Summary</h2>`;\r\n      this.data.sampleFieldsToDisplay.forEach((d) => {\r\n        strContent += `<li class=\"cardItem\">${d.field_name}: ${d.field_value}</li>`;\r\n      });\r\n      strContent += `<h2>Stages</h2>`;\r\n      this.data.stages.forEach((d) => {\r\n        strContent += `<table border=\"1\" cellpadding=\"3\" style=\"margin-bottom: 10px; border-collapse: collapse; width: 100%;\"><tr><th>${d.current_stage\r\n          }<br>${d.started_on}${d.ended_on && ` >> ${d.ended_on}`\r\n          }</th></tr><tr><td>`;\r\n        if (d.current_stage == \"Sampling\") {\r\n          d.data.forEach((data) => {\r\n            strContent += `Sampling Date: ${data.sampling_date}`;\r\n          });\r\n        } else if (d.current_stage == \"Incubation\") {\r\n          d.data.forEach((data) => {\r\n            strContent += `<table border=\"1\" cellpadding=\"3\" style=\"border-collapse: collapse; width: 100%;\"><tr><th>Incubation 1</th><th>Incubation 2</th></tr><tr>`;\r\n            strContent += `<td>`;\r\n            data.incubation_1.forEach((f) => {\r\n              if (f.field_name) {\r\n                strContent += `<li class=\"cardItem\">${f.field_name}: ${f.field_value}</li>`;\r\n              }\r\n            });\r\n            strContent += `</td><td>`;\r\n            data.incubation_2.forEach((f) => {\r\n              if (f.field_name) {\r\n                strContent += `<li class=\"cardItem\">${f.field_name}: ${f.field_value}</li>`;\r\n              }\r\n            });\r\n            strContent += `</td></tr></table>`;\r\n          });\r\n        } else if (d.current_stage == \"PlateReading\") {\r\n          d.data.forEach((data) => {\r\n            if (data.field_name == \"raw_value\") {\r\n              strContent += `Number of Colonies: ${data.field_value}`;\r\n            }\r\n          });\r\n        } else if (d.current_stage == \"MicroorganismIdentification\") {\r\n          d.data.forEach((data) => {\r\n            if (data.field_name == \"microorganism_list\") {\r\n              strContent += `Colonies Identified: ${data.field_value}`;\r\n            }\r\n          });\r\n        } else {\r\n          d.data.forEach((data) => {\r\n            strContent += `<li class=\"cardItem\">${data.name}: ${data.items}</li>`;\r\n          });\r\n        }\r\n        strContent += `</td></tr></table>`;\r\n      });\r\n      return strContent;\r\n    }\r\n\r\n    EnvMonAirIncubatorBrowser() {\r\n      return html`${this.data.incubatorFieldToRetrieve\r\n        ? html`\r\n            <div class=\"layout horizontal flex wrap\">\r\n              <sp-card-ext\r\n                heading=\"Report for the incubator\"\r\n                subheading=\"${this.data.incubatorFieldToRetrieve.name}\"\r\n              >\r\n                <div slot=\"footer\">\r\n                  ${this.data.incubatorFieldsToDisplay.map(\r\n          (d) => html`<li class=\"cardItem\">${d.field_name}: ${d.field_value}</li>`\r\n        )}\r\n                </div>\r\n              </sp-card-ext>\r\n              <google-chart-ext\r\n                id=\"chart1\"\r\n                @redrawed=${(e) =>\r\n            this.dispatchEvent(\r\n              new CustomEvent(\"chart-images\", {\r\n                detail: { imgUri: e.target.imageURI },\r\n              })\r\n            )}\r\n                style=\"margin: 5px 5px 30px 8px\"\r\n                type=\"line\"\r\n                options='{\"height\": ${this.chartH}, \"width\": ${this.chartW}}'\r\n              ></google-chart-ext>\r\n            </div>\r\n          `\r\n        : nothing}`;\r\n    }\r\n\r\n    EnvMonAirBatchBrowser() {\r\n      return html`${this.data.batchFieldToRetrieve\r\n        ? html`\r\n            <div class=\"layout horizontal flex wrap\">\r\n              <sp-card-ext\r\n                heading=\"Report for the batch\"\r\n                subheading=\"${this.data.batchFieldToRetrieve.name}\"\r\n              >\r\n                <div slot=\"footer\">\r\n                  ${this.data.batchFieldsToDisplay.map(\r\n          (d) => html`<li class=\"cardItem\">${d.field_name}: ${d.field_value}</li>`\r\n        )}\r\n                </div>\r\n              </sp-card-ext>\r\n              <google-chart-ext\r\n                id=\"chart1\"\r\n                @redrawed=${(e) =>\r\n            this.dispatchEvent(\r\n              new CustomEvent(\"chart-images\", {\r\n                detail: { imgUri: e.target.imageURI },\r\n              })\r\n            )}\r\n                style=\"margin: 5px 5px 30px 8px\"\r\n                type=\"line\"\r\n                options='{\"height\": ${this.chartH}, \"width\": ${this.chartW}}'\r\n              ></google-chart-ext>\r\n            </div>\r\n            <sp-card-ext\r\n              heading=\"Batch Content (${this.data.NUM_SAMPLES} samples)\"\r\n              nonSubHeading\r\n            >\r\n              <div slot=\"footer\" class=\"layout horizontal flex wrap\">\r\n                ${this.data.SAMPLES_ARRAY.map(\r\n              (d, i) =>\r\n                html`${d.sample_id}${i < this.data.SAMPLES_ARRAY.length - 1\r\n                  ? \", \"\r\n                  : \"\"}`\r\n            )}\r\n              </div>\r\n            </sp-card-ext>\r\n          `\r\n        : nothing}`;\r\n    }\r\n\r\n    EnvMonProductionLotBrowser() {\r\n      return html`${this.data.prodLotFieldToRetrieve\r\n        ? html`\r\n            <div class=\"layout horizontal flex wrap\">\r\n              <sp-card-ext\r\n                heading=\"Report for the production lot\"\r\n                subheading=\"${this.data.prodLotFieldToRetrieve.name}\"\r\n              >\r\n                <div slot=\"footer\">\r\n                  ${this.data.prodLotFieldsToDisplay.map(\r\n          (d) => html`<li class=\"cardItem\">${d.field_name}: ${d.field_value}</li>`\r\n        )}\r\n                </div>\r\n              </sp-card-ext>\r\n              <google-chart-ext\r\n                id=\"chart1\"\r\n                @redrawed=${(e) =>\r\n            this.dispatchEvent(\r\n              new CustomEvent(\"chart-images\", {\r\n                detail: { imgUri: e.target.imageURI },\r\n              })\r\n            )}\r\n                style=\"margin: 5px 5px 30px 8px\"\r\n                type=\"line\"\r\n                options='{\"height\": ${this.chartH}, \"width\": ${this.chartW}}'\r\n              ></google-chart-ext>\r\n              <google-chart-ext\r\n                id=\"chart2\"\r\n                @redrawed=${(e) =>\r\n            this.dispatchEvent(\r\n              new CustomEvent(\"chart-images\", {\r\n                detail: { imgUri: e.target.imageURI },\r\n              })\r\n            )}\r\n                style=\"margin: 5px 5px 30px 8px\"\r\n                type=\"line\"\r\n                options='{\"height\": ${this.chartH}, \"width\": ${this.chartW}}'\r\n              ></google-chart-ext>\r\n            </div>\r\n            <div class=\"layout horizontal flex center-justified\">\r\n              <mwc-button\r\n                label=\"Download Sample\"\r\n                @click=${this.downloadSample}\r\n              ></mwc-button>\r\n            </div>\r\n          `\r\n        : nothing}`;\r\n    }\r\n\r\n    stageTitle(currentStage) {\r\n      return html` <h1>${currentStage}</h1> `;\r\n    }\r\n    stageTimingCapture(stageData) {\r\n      return html` <h3>${stageData.started_on} --> ${stageData.ended_on}</h3> `;\r\n    }\r\n\r\n    EnvMonAirIncubatorReportContent(strContent) {\r\n      if (this.data.incubatorFieldsToDisplay) {\r\n        this.data.incubatorFieldsToDisplay.forEach((d) => {\r\n          strContent += `<li class=\"cardItem\">${d.field_name}: ${d.field_value}</li>`;\r\n        });\r\n        //strContent += this.incubatorChartContent()\r\n      }\r\n      return strContent;\r\n    }\r\n    chartContent() {\r\n      let imgs = ``; // ${this.kpiStyleByStringAttribute(\"div\", undefined)}\r\n      this.chartImgs.forEach((img) => {\r\n        imgs += `<img src=\"${img}\" style=\"margin-bottom=10px;\"><br>`;\r\n      });\r\n      return imgs;\r\n    }\r\n    incubatorContentTitle() {\r\n      return (\r\n        \"Report for the incubator \" + this.data.incubatorFieldToRetrieve.name\r\n      );\r\n    }\r\n\r\n    EnvMonAirBatchReportContent(strContent) {\r\n      if (this.sampleData.batchFieldsToDisplay) {\r\n        this.sampleData.batchFieldsToDisplay.forEach((d) => {\r\n          strContent += `<li class=\"cardItem\">${d.field_name}: ${d.field_value}</li>`;\r\n        });\r\n        strContent += this.chartContent();\r\n        let batches = this.sampleData.SAMPLES_ARRAY.map((d) => d.sample_id);\r\n        strContent += `<table border=\"1\" cellpadding=\"3\" style=\"margin: 10px auto; border-collapse: collapse; width: 100%;\"><tr><th>Batch Content (${this.sampleData.NUM_SAMPLES\r\n          } samples)</th></tr><tr><td>${batches.join(\", \")}</td></tr></table>`;\r\n      }\r\n      return strContent;\r\n    }\r\n\r\n    EnvMonProductionLotReportContent(strContent) {\r\n      if (this.data.prodLotFieldsToDisplay) {\r\n        this.data.prodLotFieldsToDisplay.forEach((d) => {\r\n          strContent += `<li class=\"cardItem\">${d.field_name}: ${d.field_value}</li>`;\r\n        });\r\n        strContent += this.chartContent();\r\n        strContent += `<br><table border=\"1\" cellpadding=\"3\" style=\"margin-top: 10px; border-collapse: collapse; width: 100%;\">`;\r\n        strContent += `<tr><th>Sample ID</th><th>Sampling Date</th><th>Sampling Date End</th><th>Raw Value</th></tr>`;\r\n        this.data.sample.forEach((s) => {\r\n          if (s.spec_code) {\r\n            strContent += `<tr><td>${s.sample_id}</td><td>${s.sampling_date\r\n              }</td><td>${s.sampling_date_end}</td><td>${s.raw_value ? s.raw_value : \"\"\r\n              }</td></tr>`;\r\n          }\r\n        });\r\n        strContent += `</table>`;\r\n      }\r\n      return strContent;\r\n    }\r\n    EnvMonProductionLotReportTitle() {\r\n      return (\r\n        \"Report for the Production Lot \" +\r\n        this.data.prodLotFieldToRetrieve.lot_name\r\n      );\r\n    }\r\n\r\n    sampleContent(strContent) {\r\n      if (\r\n        this.data.sampleFieldsToDisplay &&\r\n        this.activeTab.label_en == \"Sample\"\r\n      ) {\r\n        this.data.sampleFieldsToDisplay.forEach((d) => {\r\n          strContent += `<li class=\"cardItem\">${d.field_name}: ${d.field_value}</li>`;\r\n        });\r\n        strContent += `<h2>Stages</h2>`;\r\n        this.data.stages.forEach((d) => {\r\n          strContent += `<table border=\"1\" cellpadding=\"3\" style=\"margin-bottom: 10px; border-collapse: collapse; width: 100%;\"><tr><th>${d.current_stage\r\n            }<br>${d.started_on}${d.ended_on && ` >> ${d.ended_on}`\r\n            }</th></tr><tr><td>`;\r\n          if (d.current_stage == \"Sampling\") {\r\n            d.data.forEach((data) => {\r\n              strContent += `Sampling Date: ${data.sampling_date}`;\r\n            });\r\n          } else if (d.current_stage == \"Incubation\") {\r\n            d.data.forEach((data) => {\r\n              strContent += `<table border=\"1\" cellpadding=\"3\" style=\"border-collapse: collapse; width: 100%;\"><tr><th>Incubation 1</th><th>Incubation 2</th></tr><tr>`;\r\n              strContent += `<td>`;\r\n              data.incubation_1.forEach((f) => {\r\n                if (f.field_name) {\r\n                  strContent += `<li class=\"cardItem\">${f.field_name}: ${f.field_value}</li>`;\r\n                }\r\n              });\r\n              strContent += `</td><td>`;\r\n              data.incubation_2.forEach((f) => {\r\n                if (f.field_name) {\r\n                  strContent += `<li class=\"cardItem\">${f.field_name}: ${f.field_value}</li>`;\r\n                }\r\n              });\r\n              strContent += `</td></tr></table>`;\r\n            });\r\n          } else if (d.current_stage == \"PlateReading\") {\r\n            d.data.forEach((data) => {\r\n              if (data.field_name == \"raw_value\") {\r\n                strContent += `Number of Colonies: ${data.field_value}`;\r\n              }\r\n            });\r\n          } else {\r\n            d.data.forEach((data) => {\r\n              strContent += `<li class=\"cardItem\">${data.name}: ${data.items}</li>`;\r\n            });\r\n          }\r\n          strContent += `</td></tr></table>`;\r\n        });\r\n      }\r\n      return strContent;\r\n    }\r\n    titleLang(colDef) {\r\n      let titleStr = \"\";\r\n      if (colDef.title !== undefined) {\r\n        return colDef.title[\"label_\" + this.lang];\r\n      } else {\r\n        return colDef.name;\r\n      }\r\n      return titleStr;\r\n    }\r\n    fieldsToDiscard(fld) {\r\n      if (fld.is_translation === undefined || fld.is_translation === false) {\r\n        return false;\r\n      }\r\n      if (fld.is_translation === true && fld.name.endsWith(this.lang)) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    }\r\n    get audit() {\r\n      return this.shadowRoot.querySelector(\"audit-dialog\");\r\n    }\r\n\r\n    toggleFilterVisibility(element) {\r\n      const filterDiv = this.shadowRoot.getElementById('smartFilterDiv');\r\n      if (filterDiv.classList.contains('hidden')) {\r\n        filterDiv.classList.remove('hidden');\r\n        filterDiv.classList.add('visible');\r\n      } else {\r\n        filterDiv.classList.remove('visible');\r\n        filterDiv.classList.add('hidden');\r\n      }\r\n    }\r\n\r\n    handleFilter(elem) {\r\n      this.requestUpdate();\r\n    }\r\n\r\n    toggleFilter() {\r\n      let filter = this.shadowRoot.querySelector('.search-container');\r\n      filter.style.display = filter.style.display === 'none' ? 'flex' : 'none';\r\n    }\r\n    \r\n    updateFilterValue(elem, event) {\r\n      const input = event.target;\r\n      const value = input.value;\r\n      const name = input.getAttribute('name');\r\n      if (name) {\r\n          elem.smartFilter.filterValues[name] = value;\r\n      }\r\n  }\r\n      clearFilter(elem, context) {\r\n        let filterContainer = context.shadowRoot.querySelector('.search-container');\r\n        let filterInputs = filterContainer.querySelectorAll('input');\r\n        filterInputs.forEach(elm => {\r\n            elm.value = '';\r\n        });\r\n        elem.smartFilter.filterValues = {};\r\n        this.requestUpdate();\r\n    }\r\n    \r\n    isNumeric(str) {\r\n      if (typeof str != \"string\") return false \r\n      return !isNaN(str) && \r\n             !isNaN(parseFloat(str)) \r\n    }\r\n\r\n    applyFilterToTheData(curDataForThisCard, filterValues) {\r\n      let hasFilters = false;\r\n      const uniqueItemsSet = new Set();\r\n\r\n      for (const key in filterValues) {\r\n          let filterValue = filterValues[key];\r\n          if (filterValue !== null && filterValue !== undefined && String(filterValue).length > 0) {\r\n              hasFilters = true;\r\n\r\n              // Convert filter value to the appropriate type\r\n              const tempNumber = Number(filterValue)\r\n              if (this.isNumeric(filterValue)) {\r\n                  filterValue = Number(filterValue);\r\n              } else if (filterValue.toLowerCase() === 'true' || filterValue.toLowerCase() === 'false') {\r\n                  filterValue = filterValue.toLowerCase() === 'true';\r\n              }\r\n\r\n              if (Array.isArray(curDataForThisCard)) {\r\n                  const filteredItems = curDataForThisCard.filter(item => {\r\n                      if (item[key] !== undefined && item[key] !== null) {\r\n                          const itemValue = item[key];\r\n                          if (typeof itemValue === 'string' && typeof filterValue === 'string') {\r\n                              return itemValue.toLowerCase().includes(filterValue.toLowerCase());\r\n                          } else if (typeof itemValue === 'number' && typeof filterValue === 'number') {\r\n                              return itemValue === filterValue;\r\n                          } else if (typeof itemValue === 'boolean' && typeof filterValue === 'boolean') {\r\n                              return itemValue === filterValue;\r\n                          }\r\n                      }\r\n                      return false;\r\n                  });\r\n                  filteredItems.forEach(item => uniqueItemsSet.add(item));\r\n              }\r\n          }\r\n      }\r\n\r\n      if (!hasFilters) {\r\n          return curDataForThisCard;\r\n      }\r\n      return Array.from(uniqueItemsSet);\r\n  }\r\n\r\n  readOnlyTable(elem, dataArr, isSecondLevel, directData, alternativeTitle, handler, handleResetParentFilter, parentElement, theme, parentData) {\r\n    if (elem === undefined) {\r\n      return;\r\n    }\r\n    parentData = this.selectedItemInView; //sessionStorage.getItem('rowSelectedData')\r\n    let tmp = elem.theme ? elem.theme : \"TRAZiT-UsersArea\";\r\n    if (elem.endPointResponseObject == \"procedure_user_requirements_tree_child\") {\r\n      tmp = sessionStorage.getItem('tableTheme');\r\n    }\r\n    sessionStorage.setItem('tableTheme', tmp);\r\n  \r\n    const endPointResponseObject = elem.endPointResponseObject;\r\n    const selectedIdx = this.selectedTableIndex[endPointResponseObject];\r\n  \r\n    if (isSecondLevel === undefined) {\r\n      isSecondLevel = false;\r\n    }\r\n    if (directData !== undefined) {\r\n      dataArr = directData;\r\n    } else {\r\n      dataArr = this.getDataFromRoot(elem, dataArr);\r\n    }\r\n    if (!this.dataContainsRequiredProperties(elem, dataArr)) {\r\n      return nothing;\r\n    }\r\n  \r\n    if (dataArr === undefined || !Array.isArray(dataArr)) {\r\n      return html``;\r\n    } else {\r\n      if (dataArr.length > 0 && dataArr[0].action_name) {\r\n        sessionStorage.setItem('steps', JSON.stringify(dataArr));\r\n      }\r\n    }\r\n  \r\n    const styles = this.getTableStyles(elem);\r\n    const title = this.addViewTitle(elem, alternativeTitle, isSecondLevel);\r\n    const actionButtons = this.getActionsButtons(elem, dataArr, this.selectedItems);\r\n  \r\n    if(dataArr && elem?.smartFilter?.filterValues && Object.keys(elem?.smartFilter?.filterValues).length != 0){\r\n    //  console.log(dataArr)\r\n    //  console.log(elem.smartFilter.filterValues)\r\n      dataArr=this.applyFilterToTheData(dataArr,elem.smartFilter.filterValues);\r\n    }\r\n  \r\n    // Sorting function\r\n    const sortData = (field, ascending) => {\r\n      dataArr.sort((a, b) => {\r\n        if (a[field] < b[field]) return ascending ? -1 : 1;\r\n        if (a[field] > b[field]) return ascending ? 1 : -1;\r\n        return 0;\r\n      });\r\n      this.requestUpdate(); // Trigger re-render\r\n    };\r\n  \r\n    // Function to check if an item is selected\r\n    const isItemSelected = (item) => {\r\n      return this.selectedItems && this.selectedItems.some(selected => JSON.stringify(selected) === JSON.stringify(item));\r\n    };\r\n  \r\n    // Function to handle select/deselect all\r\n    const handleSelectAll = (event) => {\r\n      if (event.target.checked) {\r\n        this.selectedItems = [...dataArr];\r\n      } else {\r\n        this.selectedItems = [];\r\n      }\r\n      this.requestUpdate();\r\n    };\r\n    let smartFilter= {\t\t\t\t\r\n      \"applyFilterButton\":{\r\n        \"title\":{\r\n        label_en: 'Apply Filter',\r\n        label_es: 'Aplicar Filtro',\r\n        }\r\n      },\r\n      \"clearFilterButton\":{\r\n        \"title\":{\r\n        label_en: 'Clear Filter',\r\n        label_es: 'Limpiar Filtro',\r\n        }\r\n      },\r\n      \"displayFilterButton\":{\r\n        \"title\":{\r\n        label_en: 'Display/Hide Filter',\r\n        label_es: 'Mostrar/Ocultar Filtro',\r\n        }\r\n      }\r\n    }  \r\n    if (elem!==undefined&&elem.smartFilter!==undefined&&elem.smartFilter.applyFilterButton!==undefined&&elem.smartFilter.applyFilterButton.title!==undefined){\r\n      smartFilter.applyFilterButton.title=elem.smartFilter.applyFilterButton.title\r\n    }\r\n    if (elem!==undefined&&elem.smartFilter!==undefined&&elem.smartFilter.clearFilterButton!==undefined&&elem.smartFilter.clearFilterButton.title!==undefined){\r\n      smartFilter.clearFilterButton.title=elem.smartFilter.clearFilterButton.title\r\n    }\r\n    if (elem!==undefined&&elem.smartFilter!==undefined&&elem.smartFilter.displayFilterButton!==undefined&&elem.smartFilter.displayFilterButton.title!==undefined){\r\n      smartFilter.displayFilterButton.title=elem.smartFilter.displayFilterButton.title\r\n    }\r\n    let smartFilterVisible=false\r\n    smartFilterVisible=elem.columns.some(column => column.addToSmartFilter === true);\r\n    return html`\r\n      ${styles}\r\n      <div style=\"display: flex; flex-direction: row; text-align: center; align-items: baseline; width: 100%;\">\r\n        <div style=\"display: flex; flex-direction: column; text-align: center; width: 100%;\">\r\n          ${title}          \r\n          <div class=\"layout horizontal center flex wrap\">            \r\n            ${elem?.smartFilter?.filterValues && smartFilterVisible &&html`               \r\n              <mwc-icon-button id=\"smartfilter\"\ticon=\"filter_alt\"title=\"Filter\" @click=${(e) => this.toggleFilter()}></mwc-icon-button>\r\n            `}\r\n            ${actionButtons}\r\n          </div>\r\n          ${elem.columns === undefined\r\n            ? html`${elem.hideNoDataMessage !== undefined && elem.hideNoDataMessage ? \"\" : \"No columns defined\"}`\r\n            : html`\r\n                <style>\r\n                  * {\r\n                    font-family: 'Montserrat', sans-serif;\r\n                  }\r\n                  .table-container {\r\n                    max-height: 400px; /* Adjust the height as needed */\r\n                    overflow-y: auto;\r\n                    overflow-x: auto;\r\n                    width: 100%;\r\n                  }\r\n                  .styled-table {\r\n                    width: 100%;\r\n                    border-collapse: collapse;\r\n                  }\r\n                  .styled-table thead th {\r\n                    position: sticky;\r\n                    top: 0;\r\n                    background: #fff; /* Adjust background as needed */\r\n                    z-index: 1;\r\n                  }\r\n                  .styled-table th, .styled-table td {\r\n                    padding: 10px;\r\n                    border: 1px solid #ddd;\r\n                    text-align: left;\r\n                  }\r\n                  .styled-table tbody tr:nth-child(even) {\r\n                    background-color: #f2f2f2;\r\n                  }\r\n                  .styled-table tbody tr:hover {\r\n                    background-color: #ddd;\r\n                  }\r\n                  .styled-table tbody tr.selected-row {\r\n                    background-color: #FFDDB3; /* Highlight color for selected rows */\r\n                  }\r\n                  .sort-icons {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    align-items: center;\r\n                  }\r\n                  .sort-icon {\r\n                    cursor: pointer;\r\n                    display: block;\r\n                    width: 0;\r\n                    height: 0;\r\n                    border-left: 7px solid transparent;\r\n                    border-right: 7px solid transparent;\r\n                    margin-left: 5px;\r\n                    position: relative;\r\n                  }\r\n                  .sort-asc {\r\n                    border-bottom: 10px solid #4c7fad;\r\n                  }\r\n                  .sort-desc {\r\n                    border-top: 10px solid #4c7fad;\r\n                  }\r\n                  .sort-icon:hover::after {\r\n                    content: attr(data-tooltip);\r\n                    position: absolute;\r\n                    top: 25px;\r\n                    left: 10px;\r\n                    background: #b6d6f3;\r\n                    color: white;\r\n                    padding: 5px;\r\n                    border-radius: 5px;\r\n                    white-space: nowrap;\r\n                    z-index: 10;\r\n                    font-family: 'Montserrat', sans-serif;\r\n                  }\r\n                  @media screen and (max-width: 768px) {\r\n                    .styled-table th, .styled-table td {\r\n                      padding: 8px;\r\n                      font-size: 14px;\r\n                    }\r\n                  }\r\n                  .search-container {\r\n                    background: #fff;\r\n                    padding: 10px;\r\n                    border-radius: 8px;\r\n                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n                    display: flex;\r\n                    align-items: center;\r\n                    max-width: 100%;\r\n                    margin: 0 auto;\r\n                    margin-left: 10px;\r\n                  }\r\n  \r\n                  .search-input {\r\n                    display: flex;\r\n                    flex-wrap: nowrap;\r\n                    margin-right: 10px;\r\n                    width: 100%;\r\n                  }\r\n  \r\n                  .search-input input {\r\n                    flex: 1;\r\n                    padding: 10px;\r\n                    margin-right: 10px;\r\n                    border: 1px solid #ddd;\r\n                    border-radius: 4px;\r\n                    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);\r\n                    transition: border-color 0.3s, box-shadow 0.3s;\r\n                  }\r\n  \r\n                  .search-input input:focus {\r\n                    outline: none;\r\n                    border-color: #007bff;\r\n                    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1), 0 0 5px rgba(0, 123, 255, 0.3);\r\n                  }\r\n  \r\n                  .search-buttons {\r\n                    display: flex;\r\n                  }\r\n  \r\n                  .search-buttons button {\r\n                    padding: 10px 20px;\r\n                    margin-left: 10px;\r\n                    border: none;\r\n                    border-radius: 4px;\r\n                    cursor: pointer;\r\n                    transition: background-color 0.3s, box-shadow 0.3s;\r\n                  }\r\n  \r\n                  .search-buttons button:hover {\r\n                    background-color: #007bff;\r\n                  }\r\n  \r\n                  .search-buttons button:active {\r\n                    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);\r\n                  }\r\n  \r\n                  .search-buttons .apply-filter {\r\n                    background-color: #007bff;\r\n                    color: white;\r\n                  }\r\n  \r\n                  .search-buttons .clear-filter {\r\n                    background-color: #6c757d;\r\n                    color: white;\r\n                  }\r\n  \r\n                  .toggle-filter {\r\n                    display: flex;\r\n                    width: 120px;\r\n                    background-color: #007bff;\r\n                    color: white;\r\n                    padding: 10px 20px;\r\n                    margin-left: 10px;\r\n                    border: none;\r\n                    border-radius: 4px;\r\n                    cursor: pointer;\r\n                    transition: background-color 0.3s, box-shadow 0.3s;               \r\n                    transition: color 0.3s;\r\n                  }\r\n  \r\n                  .toggle-filter:hover {\r\n                    color: #fff;\r\n                  }\r\n                </style>\r\n                ${elem?.smartFilter?.filterValues && smartFilterVisible &&\r\n                    html`                                         \r\n                    <div class=\"search-container\">\r\n                      <!--  <div class=\"search-input\">\r\n                            ${elem.columns.map(column => html`\r\n                                <input type=\"text\" id=\"${column.name}\" name=\"${column.name}\" placeholder=\"${column.label_en}\">\r\n                            `)}\r\n                        </div> -->\r\n                          <div class=\"search-input\">\r\n                      ${elem.columns.map(column => html`\r\n                        ${column.addToSmartFilter!==undefined&&column.addToSmartFilter===true?html`\r\n                          <input \r\n                              type=\"text\" \r\n                              id=\"${column.name}\" \r\n                              name=\"${column.name}\" \r\n                              placeholder=\"${column.label_en}\"\r\n                              @input=\"${(e) => this.updateFilterValue(elem, e)}\">\r\n                        `:nothing}\r\n                      `)}\r\n                  </div>\r\n                        <div class=\"search-buttons\">\r\n                            <button class=\"apply-filter\" @click=\"${() => this.handleFilter(elem, this)}\">Apply</button>\r\n                            <button class=\"clear-filter\" @click=\"${() => this.clearFilter(elem, this)}\">Clear</button>\r\n                        </div>\r\n                    </div>\r\n                    `\r\n                }\r\n                <div class=\"table-container\">\r\n                  <table data-index=\"${elem.index}\" id=${elem.endPointResponseObject} class=\"styled-table read-only ${tmp}\">\r\n                    <thead>\r\n                      <tr>\r\n                        ${elem.allowMultiSelection ? html`<th><input type=\"checkbox\" @change=${handleSelectAll}></th>` : nothing}\r\n                        ${elem.columns.map((fld, idx) => {\r\n                          const fieldName = fld[\"name\"];\r\n                          if (idx === 0 && parentElement !== null && parentElement !== undefined) {\r\n                            return html`\r\n                              <th>\r\n                                <mwc-icon-button class=\"icon resetBtn\" icon=\"refresh\" @click=${() => handleResetParentFilter(parentElement)}></mwc-icon-button>\r\n                                ${fld[\"label_\" + this.lang]}\r\n                                <span class=\"resize-handle\"></span>\r\n                                <div class=\"sort-icons\">\r\n                                  <span class=\"sort-icon sort-asc\" data-tooltip=\"${this.lang===\"es\"?`Orden ascendente`:`Sort ascending`}\" @click=${() => sortData(fieldName, true)}></span>\r\n                                  <span class=\"sort-icon sort-desc\" data-tooltip=\"${this.lang===\"es\"?`Orden descendente`:`Sort descending`}\" @click=${() => sortData(fieldName, false)}></span>\r\n                                </div>\r\n                              </th>`;\r\n                          }\r\n                          return html`\r\n                            <th>\r\n                              ${fld[\"label_\" + this.lang]}\r\n                              <span class=\"resize-handle\"></span>\r\n                              <div class=\"sort-icons\">\r\n                                <span class=\"sort-icon sort-asc\" data-tooltip=\"${this.lang===\"es\"?`Orden ascendente`:`Sort ascending`}\" @click=${() => sortData(fieldName, true)}></span>\r\n                                <span class=\"sort-icon sort-desc\" data-tooltip=\"${this.lang===\"es\"?`Orden descendente`:`Sort descending`}\" @click=${() => sortData(fieldName, false)}></span>\r\n                              </div>\r\n                            </th>`;\r\n                        })}\r\n                        ${elem.row_buttons === undefined ? nothing : html`<th>${this.lang === \"en\" ? \"Actions\" : \"Acciones\"} <span class=\"resize-handle\"></span></th>`}\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <div class=\"js-context-popup\"></div>\r\n                      ${dataArr === undefined || !Array.isArray(dataArr)\r\n                        ? html`No Data`\r\n                        : html`\r\n                            ${dataArr.map((p, rowIndex) => {\r\n                              const isSelected = isItemSelected(p);\r\n                              return html`\r\n                                <tr\r\n                                  @click=${(event) => {\r\n                                    if (handler) {\r\n                                      if (p[elem.children] && p[elem.children].length > 0) {\r\n                                        if (elem.openWhenNoData === undefined || elem.openWhenNoData === false) {\r\n                                          handler(event, p, elem, rowIndex);\r\n                                        }\r\n                                      }\r\n                                    }\r\n                                    this.handleTableRowClick(event, p, elem);\r\n                                  }}\r\n                                  @contextmenu=${(event) => this.handleOpenContextMenu(event, p, elem)}\r\n                                  class=\"${isSelected ? 'selected-row' : ''}\"\r\n                                >\r\n                                  ${elem.allowMultiSelection ? html`<td><input type=\"checkbox\" ?checked=${isSelected}></td>` : nothing}\r\n                                  ${this.getRowsInfo(elem, p, rowIndex, this.lang, parentData, handler)}\r\n                                </tr>\r\n                                ${elem.expandInfoSection !== undefined\r\n                                  ? html`\r\n                                      <table-row-detail id=\"detail${rowIndex}\" .data=\"${p}\" .elem=\"${elem}\">\r\n                                        <div slot=\"details\"></div>\r\n                                      </table-row-detail>\r\n                                    `\r\n                                  : html``}\r\n                              `;\r\n                            })}\r\n                          `}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              `}\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n  \r\n    dragDropBoxes(elem, data) {\r\n      import('../DragDropBox/drag-box')\r\n      //console.log('elem', elem)\r\n      return html`\r\n      <drag-box .windowOpenable=${true} .sopsPassed=${true} .lang=${this.lang}\r\n      .procInstanceName=\"RandD\" .desktop=${true} .viewName=\"rdprojects\" .filterName=\"rdprojects\" \r\n      .model=${elem} ?ready=\"false\"\r\n      .viewModelFromProcModel=${elem} .config=${this.config}></drag-box>      \r\n  \r\n      `\r\n    }\r\n    dragDropObjects(elem, data) {\r\n      import('../DragDropTable/drag-drop')\r\n      console.log('elem', elem, 'data', data)\r\n      return html`\r\n        <drag-drop .windowOpenable=${this.windowOpenable} .sopsPassed=${this.sopsPassed} .lang=${this.lang}\r\n          .procInstanceName=${this.procName} .desktop=${this.desktop} .viewName=${this.viewName} .filterName=${this.filterName} \r\n          .model=${elem} ?ready=\"true\" .data=${data}\r\n          .viewModelFromProcModel=${elem} .config=${this.config}></drag-drop>      \r\n      `\r\n    }    \r\n    calendar(elem, data) {\r\n      import('../Calendar/index')\r\n      let dataArr = this.getDataFromRoot(elem, data);\r\n      console.log('calendar', 'elem', elem, 'data', data, 'dataArr', dataArr)\r\n\r\n      let events={\"program_calendar\": {\r\n        \"calendar_id\": 1,\r\n        \"program_name\": \"LlenadoViales\",\r\n        \"program_config_version\": 1,\r\n        \"schedule_size_unit\": \"MONTHS\",\r\n        \"schedule_size\": 12,\r\n        \r\n        \"viewCurrentDate\":\"today\",\r\n        \"start_date\": \"2023-11-01\",\r\n\r\n        \"end_date\": \"2024-12-31\",\r\n        \"day_of_week\": \"MONDAY\",\r\n        \"holidays_calendar\": [\r\n          {\r\n            \"id\": 1,\r\n            \"description_en\": \"Spanish labor calendar\",\r\n            \"description_es\": \"Calendario laboral español\",\r\n            \"dates\": [\r\n              {\r\n                \"id\": 1,\r\n                \"date\": \"2023-11-02\",\r\n                \"description_en\": \"King's day\",\r\n                \"description_es\": \"Dia de los Reyes\"\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"program_calendar_recursive_entry\": [\r\n          {\r\n            \"id\": 1,\r\n            \"start_date\": \"2023-01-01\",\r\n            \"end_date\": \"2023-01-31\",\r\n            \"purpose_en\": \"All Fridays on January\",\r\n            \"purpose_es\": \"Todos los viernes de Enero\"\r\n          }\r\n        ],\r\n      }}    \r\n      if (dataArr!==undefined){  \r\n        let holidayDay={created_on:\"2023-11-01\", instrument:\"All saints\", is_holidays:true}\r\n        dataArr.push(holidayDay)\r\n        let holidayDay2={created_on:\"2023-11-16\", instrument:\"Invented holidays\", is_holidays:true}\r\n        dataArr.push(holidayDay2)\r\n        events.program_calendar.dates=dataArr\r\n      }\r\n      let calendarConfig={\r\n        \"datesDateField\":\"created_on\",\r\n        \"eventListsFields\":[\r\n          {\"field\": \"instrument\", \"label_en\": \"Instrument\", \"label_es\": \"Instrumento\"},\r\n          {\"field\": \"event_type\", \"label_en\": \"Event\", \"label_es\": \"Evento\"}\r\n        ],\r\n        \"hoverDateDialog\":{\r\n          \"entryTitleFld\":\"instrument\",\r\n          \"eventListsFields\":[\r\n            {\"field\": \"instrument\", \"label_en\": \"Instrument\", \"label_es\": \"Instrumento\"},\r\n            {\"field\": \"event_type\", \"label_en\": \"Event\", \"label_es\": \"Evento\"}\r\n          ],  \r\n          \"dialogWidth\": \"300px\", // Añade estas líneas\r\n          \"dialogHeight\": \"300px\" // Añade estas líneas        \r\n        }\r\n      }\r\n\r\n      return html`\r\n        <calendar-component .fakeData=${false} .windowOpenable=${this.windowOpenable} .sopsPassed=${this.sopsPassed} .lang=${this.lang}\r\n          .procInstanceName=${this.procName} .desktop=${this.desktop} .viewName=${this.viewName} .filterName=${this.filterName} \r\n          .model=${elem} ?ready=\"true\" .dataAllInOneData=${events}\r\n          .viewModelFromProcModel=${elem} .config=${calendarConfig}></calendar-component>      \r\n      `\r\n    }    \r\n  };\r\n}","import { html } from 'lit';\r\nimport { columnBodyRenderer } from 'lit-vaadin-helpers';\r\nimport {ButtonsFunctions} from '../Buttons/ButtonsFunctions';\r\nexport function GridFunctions(base) {\r\n    return class extends ButtonsFunctions(base) {\r\n\r\n        getTitle(sectionModel = this.viewModelFromProcModel) {\r\n            \r\n            let textToDisplay=this.filterName\r\n            if (this.filterName===undefined||this.filterName==='undefined'){\r\n                textToDisplay=sectionModel.langConfig.title[\"label_\"+this.lang]\r\n            }else{\r\n                if (sectionModel.langConfig&&sectionModel.langConfig.title[this.filterName]) {\r\n                    textToDisplay=sectionModel.langConfig.title[this.filterName][\"label_\"+this.lang]\r\n                }\r\n            }\r\n            if (textToDisplay===undefined||textToDisplay==='undefined'){\r\n                textToDisplay=''\r\n            }\r\n                let viewDisabled=this.disabledByCertification({})\r\n                if (viewDisabled){\r\n                    let title={}\r\n                    title.label_en=\"( Read Only Mode) \"\r\n                    title.label_es=\"( Modo Lectura ) \"\r\n                    return html`\r\n                    <style>\r\n                        h1 .readonly{\r\n                            color: #FF00006B;\r\n                            font-style: oblique;\r\n                        }\r\n                    </style>\r\n                    <h1>${textToDisplay}<span class=\"readonly\"> ${title[\"label_\"+this.lang]}</span></h1>`\r\n                }else{\r\n                    return html`<h1>${textToDisplay}</h1>`\r\n                }\r\n          }\r\n        cleanGrid(){\r\n            this.selectedItems = []\r\n            this.gridItems = []\r\n            this.ready = true\r\n        }\r\n        setGrid(j) {\r\n            //return\r\n            //console.log('setGrid')\r\n            this.selectedItems = []\r\n            this.gridItems = []\r\n            if (this.abstract) {\r\n            this.shadowRoot.querySelectorAll(\"gridmodel-bottomcomp-sampleincubation\").forEach(c => {\r\n                // updating grid of samples_stillIncubationStageAndBothIncubCompleted\r\n                if (c.siGrid) {\r\n                if (j) {\r\n                    if (j.samples_stillIncubationStageAndBothIncubCompleted && j.samples_stillIncubationStageAndBothIncubCompleted.length) {\r\n                    c.stucksList = j.samples_stillIncubationStageAndBothIncubCompleted\r\n                    c.stuckNum = c.stucksList.length\r\n                    c.siGrid.items = j.samples_stillIncubationStageAndBothIncubCompleted\r\n                    } else {\r\n                    c.stucksList = null\r\n                    c.siGrid.items = []\r\n                    }\r\n                } else {\r\n                    c.stucksList = null\r\n                    c.siGrid.items = []\r\n                }\r\n                c.selectedStucks = []\r\n                }\r\n            \r\n                if (j) {\r\n                c.gridItems = c.filteredItems = j[c.model.filter]\r\n                } else {\r\n                c.gridItems = c.filteredItems = []\r\n                }\r\n                this.batchName = null\r\n                c.selectedItems = []\r\n                c.samplesReload = false\r\n                c.requestUpdate()\r\n            })\r\n            } else {\r\n            if (j) {\r\n                this.gridItems = j\r\n            } else {\r\n                this.gridItems = []\r\n            }\r\n            }\r\n        \r\n            this.ready = true\r\n            if (this.sampleState) {\r\n            this.reloadSampleState()\r\n            }\r\n        }\r\n        gridList(viewModelFromProcModel ={}) {\r\n            if (viewModelFromProcModel===undefined){return} \r\n            if (this.gridItems===undefined||this.gridItems.length==0){return       }\r\n            return Object.entries(viewModelFromProcModel.langConfig.gridHeader).map(\r\n                ([key, value], i) => html`\r\n                ${viewModelFromProcModel.langConfig.gridHeader[key].is_icon ?\r\n                    this.iconColumn(key, value, i, viewModelFromProcModel) :\r\n                    this.nonIconColumn(key, value, i, viewModelFromProcModel)\r\n                }\r\n                `\r\n            )\r\n        }\r\n                    \r\n        iconColumn(key, value, i, viewModelFromProcModel) {            \r\n        return html`\r\n            ${this.desktop ?\r\n            html`\r\n                ${i==0 ?\r\n                html`${viewModelFromProcModel.langConfig.gridHeader[key].width ?\r\n                    html`\r\n                    <vaadin-grid-column\r\n                    header=\"${value['label_'+this.lang]}\"\r\n                    ${columnBodyRenderer((sample)=>this.iconRenderer(sample, key, i, viewModelFromProcModel.langConfig.gridHeader[key]))}\r\n                    text-align=\"${viewModelFromProcModel.langConfig.gridHeader[key].align ? viewModelFromProcModel.langConfig.gridHeader[key].align : 'center' }\"\r\n                    width=\"${viewModelFromProcModel.langConfig.gridHeader[key].width}\" resizable\r\n                    ></vaadin-grid-column>\r\n                    ` :\r\n                    html`\r\n                    <vaadin-grid-column\r\n                    header=\"${value['label_'+this.lang]}\"\r\n                    ${columnBodyRenderer((sample)=>this.iconRenderer(sample, key, i, viewModelFromProcModel.langConfig.gridHeader[key]))}\r\n                    text-align=\"${viewModelFromProcModel.langConfig.gridHeader[key].align ? viewModelFromProcModel.langConfig.gridHeader[key].align : 'center' }\"\r\n                    flex-grow=\"0\"\r\n                    ></vaadin-grid-column>\r\n                    `\r\n                }` :\r\n                html`${viewModelFromProcModel.langConfig.gridHeader[key].width ?\r\n                    html`\r\n                    <vaadin-grid-column\r\n                    header=\"${value['label_'+this.lang]}\"\r\n                    ${columnBodyRenderer((sample)=>this.iconRenderer(sample, key, i, viewModelFromProcModel.langConfig.gridHeader[key]))}\r\n                    text-align=\"${viewModelFromProcModel.langConfig.gridHeader[key].align ? viewModelFromProcModel.langConfig.gridHeader[key].align : 'center' }\"\r\n                    width=\"${viewModelFromProcModel.langConfig.gridHeader[key].width}\" resizable\r\n                    ></vaadin-grid-column>\r\n                    ` :\r\n                    html`<vaadin-grid-column\r\n                    header=\"${value['label_'+this.lang]}\"\r\n                    ${columnBodyRenderer((sample)=>this.iconRenderer(sample, key, i, viewModelFromProcModel.langConfig.gridHeader[key]))}\r\n                    text-align=\"${viewModelFromProcModel.langConfig.gridHeader[key].align ? viewModelFromProcModel.langConfig.gridHeader[key].align : 'center' }\"\r\n                    auto-width\r\n                    ></vaadin-grid-column>`\r\n                }`\r\n                } \r\n            ` :\r\n            html`\r\n                <vaadin-grid-column\r\n                header=\"${value['label_'+this.lang]}\"\r\n                ${columnBodyRenderer((sample)=>this.iconRenderer(sample, key, i, viewModelFromProcModel.langConfig.gridHeader[key]))}\r\n                text-align=\"${viewModelFromProcModel.langConfig.gridHeader[key].align ? viewModelFromProcModel.langConfig.gridHeader[key].align : 'center' }\"\r\n                width=\"65px\" resizable\r\n                ></vaadin-grid-column>\r\n            `\r\n            }\r\n        `\r\n        }\r\n        titleLang(colDef){\r\n            let titleStr=''\r\n            if (colDef.title!==undefined){\r\n                return colDef.title[\"label_\"+this.lang]\r\n            }    \r\n            return titleStr\r\n        }\r\n        iconRenderer(sample, keyName, i ,colDef) {\r\n        if (colDef.as_progress!==undefined&&colDef.as_progress){\r\n            return html`\r\n            <style>\r\n            .w3-responsive{display:block;overflow-x:auto}\r\n            .w3-container,.w3-panel{padding:0.01em 4px}.w3-panel{margin-top:16px;margin-bottom:16px}\r\n            .w3-container:after,.w3-container:before,.w3-panel:after,.w3-panel:before,.w3-row:after,.w3-row:before,.w3-row-padding:after,.w3-row-padding:before,\r\n            .w3-blue,.w3-hover-blue:hover{color:rgba(7, 13, 22, 0.94)!important;background-color:#2196F3!important}\r\n            .w3-background,.w3-hover-blue:hover{color:rgba(7, 13, 22, 0.94)!important;background-color:#ffdedd!important}\r\n            .title {\r\n                font-size: 8px; font-weight: 500; letter-spacing: 0;\r\n                line-height: 1.5em; padding-bottom: 15px; position: relative;\r\n                font-family: Montserrat; font-color:rgb(94, 145, 186);\r\n              }\r\n            </style>\r\n            <div class=\"w3-container\" >\r\n                <div class=\"w3-background w3-round-xlarge\" title=\"${this.titleLang(colDef)}\">\r\n                <div class=\"w3-container w3-blue w3-round-xlarge\" style=\"width:${sample[keyName]}%\" >${sample[keyName]}%</div>\r\n                </div>\r\n            </div>\r\n            <br>            \r\n            `\r\n        } \r\n        if (colDef.image_name!==undefined&&String(colDef.image_name).toUpperCase()===\"ACTIVATE_DEACTIVATE\"){\r\n            return html`<img src=\"/images/${sample[keyName]?'activate.svg':'deactivate.svg'}\" style=\"width:20px\">`\r\n        }\r\n        //[{\"value\": \"A\", \"image_name\": \"imagenA\"}, {\"value\": \"B\", \"image_name\": \"imagenB\"}, {\"value\": \"else\", \"image_name\": \"imagenParaElResto\"}]\r\n\r\n        if (this.filterName == \"SampleLogin\") {\r\n            return html`<img src=\"/images/labplanet.png\" style=\"width:20px\">`\r\n        //} else if (String(this.viewName).toUpperCase().includes(\"INSTRUM\")&&sample.on_line!==undefined) {\r\n        //    return html`<img src=\"/images/${sample.on_line?'activate.svg':'deactivate.svg'}\" style=\"width:20px\">`\r\n        } else if (this.viewName == \"EventsInProgress\") {\r\n            return html`<img src=\"/images/inst_ev_type_${sample.event_type!==undefined?sample.event_type.toLowerCase():''}.svg\" style=\"width:20px\">`\r\n        } else if (this.viewName == \"WhiteIpList\") {\r\n            return html`<img src=\"/images/${sample.active?'activate.svg':'deactivate.svg'}\" style=\"width:20px\">`\r\n        } else if (this.viewName == \"BlackIpList\") {\r\n            return html`<img src=\"/images/${sample.active?'activate.svg':'deactivate.svg'}\" style=\"width:20px\">`\r\n        } else if (this.viewName == \"PlatformBusRules\") {\r\n            return html`<img src=\"/images/${sample.disabled?'activate.svg':'deactivate.svg'}\" style=\"width:20px\">`\r\n        } else if (sample[keyName]!==undefined&&sample[keyName]===true) {\r\n            return html`<img src=\"/images/activate.svg\" style=\"width:20px\">`\r\n        } else if (sample[keyName]!==undefined&&sample[keyName]===false) {\r\n            return html`<img src=\"/images/deactivate.svg\" style=\"width:20px\">`\r\n        } else {\r\n            return html`<img src=\"/images/icons/${this.getIconPath(sample[keyName])}\" style=\"width:20px\">`\r\n        }\r\n        }\r\n\r\n        iconRendererSrc(sample, keyName, i ,colDef) {\r\n            //console.log('field:', keyName, 'record value:', sample[keyName])\r\n            if (colDef.as_progress!==undefined&&colDef.as_progress){\r\n                return html`\r\n                <style>\r\n                .w3-responsive{display:block;overflow-x:auto}\r\n                .w3-container,.w3-panel{padding:0.01em 4px}.w3-panel{margin-top:16px;margin-bottom:16px}\r\n                .w3-container:after,.w3-container:before,.w3-panel:after,.w3-panel:before,.w3-row:after,.w3-row:before,.w3-row-padding:after,.w3-row-padding:before,\r\n                .w3-blue,.w3-hover-blue:hover{color:rgba(7, 13, 22, 0.94)!important;background-color:#2196F3!important}\r\n                .w3-background,.w3-hover-blue:hover{color:rgba(7, 13, 22, 0.94)!important;background-color:#ffdedd!important}\r\n                .title {\r\n                    font-size: 8px; font-weight: 500; letter-spacing: 0;\r\n                    line-height: 1.5em; padding-bottom: 15px; position: relative;\r\n                    font-family: Montserrat; font-color:rgb(94, 145, 186);\r\n                  }\r\n                </style>\r\n                <div class=\"w3-container\" >\r\n                    <div class=\"w3-background w3-round-xlarge\" title=\"${this.titleLang(colDef)}\">\r\n                    <div class=\"w3-container w3-blue w3-round-xlarge\" style=\"width:${sample[keyName]}%\" >${sample[keyName]}%</div>\r\n                    </div>\r\n                </div>\r\n                <br>            \r\n                `\r\n            } \r\n            if (colDef.image_name!==undefined&&String(colDef.image_name).toUpperCase()===\"ACTIVATE_DEACTIVATE\"){\r\n                if (sample[keyName]){\r\n                    return '/images/activate.svg'\r\n                }else {\r\n                    return '/images/deactivate.svg'\r\n                }\r\n            }\r\n            if (this.filterName == \"SampleLogin\") {\r\n                return \"/images/labplanet.png\";// style=\"width:20px\">`\r\n            } else if (this.viewName == \"EventsInProgress\") {                \r\n                return \"/images/inst_ev_type_\"+sample.event_type!==undefined?sample.event_type.toLowerCase():''+\".svg\" // style=\"width:20px\">`\r\n            } else if (this.viewName == \"WhiteIpList\") {\r\n                return \"/images/\"+sample.active?'activate.svg':'deactivate.svg'\r\n            } else if (this.viewName == \"BlackIpList\") {\r\n                if (sample.active){\r\n                    return '/images/activate.svg'\r\n                }else {\r\n                    return '/images/deactivate.svg'\r\n                }\r\n\r\n            } else if (this.viewName == \"PlatformBusRules\") {\r\n                if (sample.disabled){\r\n                    return '/images/activate.svg'\r\n                }else {\r\n                    return '/images/deactivate.svg'\r\n                }//\" style=\"width:20px\">`\r\n                //return \"/images/${sample.disabled?'activate.svg':'deactivate.svg'}\" style=\"width:20px\">`\r\n            } else if (sample[keyName]!==undefined&&sample[keyName]===true) {\r\n                return \"/images/activate.svg\" // style=\"width:20px\">`\r\n            } else if (sample[keyName]!==undefined&&sample[keyName]===false) {\r\n                return \"/images/deactivate.svg\" //style=\"width:20px\">`\r\n            } else {\r\n                return \"/images/icons/${this.getIconPath(sample[keyName])}\" //style=\"width:20px\">`\r\n            }\r\n        }\r\n    \r\n        getIconPath(iconName) {\r\n            const iconExtensions = {\r\n                jpg: '.jpg',\r\n                gif: '.gif',\r\n                svg: '.svg',\r\n                // Add more extensions if needed\r\n            };\r\n            const iconFolder = 'icons/';\r\n            if (iconName===undefined){\r\n                return null;\r\n            }\r\n            const iconExtension = iconName.split('.').pop(); // Get the extension from the icon name\r\n            const validExtension = iconExtensions[iconExtension.toLowerCase()];\r\n            if (validExtension) {\r\n                return iconName + validExtension;\r\n            } else {\r\n                console.error('Unsupported icon extension:', iconExtension);\r\n                return null;\r\n            }\r\n        }        \r\n        nonIconColumn(key, value, i, viewModelFromProcModel) {\r\n        return html`${viewModelFromProcModel.langConfig.gridHeader[key].sort ?\r\n            this.sortColumn(key, value, i, viewModelFromProcModel) :\r\n            this.filterColumn(key, value, i, viewModelFromProcModel)\r\n        }`\r\n        }\r\n    \r\n        sortColumn(key, value, i, viewModelFromProcModel) {\r\n        return html`\r\n            ${this.desktop ?\r\n            html`\r\n                ${i==0 ?\r\n                html`${viewModelFromProcModel.langConfig.gridHeader[key].width ?\r\n                    html`<vaadin-grid-sort-column width=\"${viewModelFromProcModel.langConfig.gridHeader[key].width}\" resizable \r\n                    ${columnBodyRenderer((sample)=>this.isConfidential(sample, key, viewModelFromProcModel))}\r\n                    text-align=\"${viewModelFromProcModel.langConfig.gridHeader[key].align ? viewModelFromProcModel.langConfig.gridHeader[key].align : 'end' }\"\r\n                    path=\"${key}\" header=\"${value['label_'+this.lang]}\"></vaadin-grid-sort-column>`:\r\n                    html`<vaadin-grid-sort-column flex-grow=\"0\" \r\n                    ${columnBodyRenderer((sample)=>this.isConfidential(sample, key, viewModelFromProcModel))}\r\n                    text-align=\"${viewModelFromProcModel.langConfig.gridHeader[key].align ? viewModelFromProcModel.langConfig.gridHeader[key].align : 'end' }\"\r\n                    path=\"${key}\" header=\"${value['label_'+this.lang]}\"></vaadin-grid-sort-column>`\r\n                }` :\r\n                html`${viewModelFromProcModel.langConfig.gridHeader[key].width ?\r\n                    html`<vaadin-grid-sort-column \r\n                    ${columnBodyRenderer((sample)=>this.isConfidential(sample, key, viewModelFromProcModel))}\r\n                    width=\"${viewModelFromProcModel.langConfig.gridHeader[key].width}\" resizable path=\"${key}\" header=\"${value['label_'+this.lang]}\"></vaadin-grid-sort-column>` :\r\n                    html`<vaadin-grid-sort-column \r\n                    ${columnBodyRenderer((sample)=>this.isConfidential(sample, key, viewModelFromProcModel))}\r\n                    resizable auto-width path=\"${key}\" header=\"${value['label_'+this.lang]}\"></vaadin-grid-sort-column>`\r\n                }`\r\n                }\r\n            ` :\r\n            html`<vaadin-grid-sort-column width=\"65px\" resizable \r\n                ${columnBodyRenderer((sample)=>this.isConfidential(sample, key, viewModelFromProcModel))}\r\n                text-align=\"${viewModelFromProcModel.langConfig.gridHeader[key].align ? viewModelFromProcModel.langConfig.gridHeader[key].align : 'end' }\"\r\n                path=\"${key}\" header=\"${value['label_'+this.lang]}\"></vaadin-grid-sort-column>`\r\n            }\r\n        `\r\n        }\r\n    \r\n        filterColumn(key, value, i, viewModelFromProcModel) {\r\n           // console.log('filterColumn', key, value, viewModelFromProcModel)\r\n        return html`\r\n            ${this.desktop ?\r\n            html`\r\n                ${i==0 ?\r\n                html`${viewModelFromProcModel.langConfig.gridHeader[key].width ?\r\n                    html`<vaadin-grid-filter-column width=\"${viewModelFromProcModel.langConfig.gridHeader[key].width}\" resizable \r\n                    ${columnBodyRenderer((sample)=>this.isConfidential(sample, key, viewModelFromProcModel))}\r\n                    text-align=\"${viewModelFromProcModel.langConfig.gridHeader[key].align ? viewModelFromProcModel.langConfig.gridHeader[key].align : 'end' }\"\r\n                    path=\"${key}\" header=\"${value['label_'+this.lang]}\"></vaadin-grid-filter-column>`:\r\n                    html`<vaadin-grid-filter-column flex-grow=\"0\" \r\n                    ${columnBodyRenderer((sample)=>this.isConfidential(sample, key, viewModelFromProcModel))}\r\n                    text-align=\"${viewModelFromProcModel.langConfig.gridHeader[key].align ? viewModelFromProcModel.langConfig.gridHeader[key].align : 'end' }\"\r\n                    path=\"${key}\" header=\"${value['label_'+this.lang]}\"></vaadin-grid-filter-column>`\r\n                }` :\r\n                html`${viewModelFromProcModel.langConfig.gridHeader[key].width ?\r\n                    html`<vaadin-grid-filter-column \r\n                    ${columnBodyRenderer((sample)=>this.isConfidential(sample, key, viewModelFromProcModel))}\r\n                    width=\"${viewModelFromProcModel.langConfig.gridHeader[key].width}\" resizable path=\"${key}\" header=\"${value['label_'+this.lang]}\"></vaadin-grid-filter-column>`:\r\n                    html`<vaadin-grid-filter-column \r\n                    ${columnBodyRenderer((sample)=>this.isConfidential(sample, key, viewModelFromProcModel))}\r\n                    resizable auto-width path=\"${key}\" header=\"${value['label_'+this.lang]}\"></vaadin-grid-filter-column>`\r\n                }`\r\n                }\r\n            ` :\r\n            html`<vaadin-grid-filter-column width=\"65px\" resizable \r\n                ${columnBodyRenderer((sample)=>this.isConfidential(sample, key, viewModelFromProcModel))}\r\n                text-align=\"${viewModelFromProcModel.langConfig.gridHeader[key].align ? viewModelFromProcModel.langConfig.gridHeader[key].align : 'end' }\"\r\n                path=\"${key}\" header=\"${value['label_'+this.lang]}\"></vaadin-grid-filter-column>`\r\n            }\r\n        `\r\n        }\r\n    \r\n        isConfidential(sample, key, viewModelFromProcModel) {\r\n        if (viewModelFromProcModel.langConfig.gridHeader[key]===undefined){ \r\n            alert('key='+key)\r\n            //console.log('gridheader', viewModelFromProcModel.langConfig.gridHeader, 'key', key, 'sample', sample)\r\n            return html`${sample[key]}`\r\n        }\r\n        if (viewModelFromProcModel.langConfig.gridHeader[key].confidential_value!==undefined&&viewModelFromProcModel.langConfig.gridHeader[key].confidential_value===true&&sample[key]) {\r\n            return html`*****`\r\n        } else {\r\n            return html`${sample[key]}`\r\n        }\r\n        }\r\n        \r\n    }\r\n}","import { LitElement, html, css } from 'lit';\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js';\r\nimport { FeaturesDynamicFieldValue } from '../../features/dynamicFieldValue';\r\nimport { FeaturesObjectsAndArrays } from '../../features/objectsAndArrays';\r\nclass GridCellTooltip extends FeaturesObjectsAndArrays(FeaturesDynamicFieldValue(LitElement)) {\r\n  static get styles() {\r\n    return css`\r\n      .tooltip {\r\n        display: none;\r\n        position: absolute;\r\n        background-color: #f9f9f9;\r\n        border: 1px solid #d3d3d3;\r\n        border-radius: 4px;\r\n        padding: 10px;\r\n        z-index: 1;\r\n        opacity: 0;\r\n        transition: opacity 0.3s;\r\n        max-width: 200px;\r\n        word-wrap: break-word;\r\n      }\r\n      :host(:hover) .tooltip {\r\n        display: block;\r\n        opacity: 1;\r\n      }\r\n      .tooltip img {\r\n        max-width: 100%;\r\n        height: auto;\r\n      }\r\n      @media screen and (max-width: 600px) {\r\n        .tooltip {\r\n          /* Ajustes específicos para pantallas pequeñas, si son necesarios */\r\n        }\r\n      }\r\n    `;\r\n  }\r\n\r\n    static get properties() {\r\n        return {\r\n            element: {type: Object},\r\n            data: {type: Object},\r\n        };\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.element = {};\r\n        this.data = {};\r\n    }\r\n\r\n    render() {        \r\n        if (this.element===undefined||this.element.tooltip===undefined){return html``}\r\n        //console.log(this.element.tooltip)\r\n        let tooltipArr=this.varObjorArrAsArray(this.element.tooltip)\r\n        return html`\r\n        <slot></slot>\r\n        <div class=\"tooltip\">\r\n            ${tooltipArr.map((curTip, index) => \r\n                html`\r\n                    ${curTip.text ? html`${unsafeHTML(this.getDynamicData(curTip, this.data, this.lang))}`:''}\r\n                    ${curTip.text_en&&this.lang===\"en\" ? html`${unsafeHTML(this.getDynamicData(curTip, this.data, this.lang))}`:''}\r\n                    ${curTip.text_es&&this.lang===\"es\" ? html`${unsafeHTML(this.getDynamicData(curTip, this.data, this.lang))}`:''}\r\n                    ${curTip.field? html`${this.data[curTip.field]}`:''}\r\n                    ${curTip.imageSrc ? html`<img src=\"${this.imageSrc}\" alt=\"Tooltip Image\">` : ''}\r\n            `\r\n            )}\r\n        </div>\r\n        `;\r\n    }\r\n}\r\n\r\ncustomElements.define('grid-cell-tooltip', GridCellTooltip);\r\n","import { LitElement, html, css, nothing } from 'lit';\r\nimport { DataViews } from '../Views/DataViews';\r\nclass TableRowDetail extends DataViews(LitElement) {\r\n  static get styles() {\r\n    return css`\r\n      .detail-row {\r\n        display: none;\r\n      }\r\n      :host([opened]) .detail-row {\r\n        display: table-row;\r\n      }\r\n    `;\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      opened: { type: Boolean, reflect: true },\r\n      idx:  { type: Number},\r\n      lang: { type: String},\r\n      elem: { type: Object},\r\n      data: { type: Object},\r\n    };\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.opened = false;\r\n    this.idx=-1;\r\n    this.elem={}\r\n    this.data={}\r\n  }\r\n\r\n  toggle() {\r\n    this.opened = !this.opened;\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n      <tr class=\"detail-row\">\r\n        <td colspan=\"100%\">            \r\n                <div slot=\"details\">\r\n                    <slot name=\"details\"></slot>\r\n                    ${this.print2LevelsObject(this.elem, this.data)}\r\n                </div>            \r\n        </td>\r\n      </tr>\r\n    `;\r\n  }\r\n\r\n\r\nprint2LevelsObject(elem, data){    \r\n    //console.log(elem.elements)\r\n    if (elem.expandInfoSectionDetail===undefined){return html``}\r\n    return html`    \r\n    ${elem.type===\"reportTitle\" ? this.kpiReportTitle(elem, data) : nothing}\r\n    <div style=\"display: flex; flex-wrap: wrap; padding-left:30px; gap: 10px\">        \r\n      ${elem.expandInfoSectionDetail.elements.map((elem2, i) => {\r\n        return html`\r\n          ${elem2.is_translation===undefined||(elem2.is_translation!==undefined&&elem2.is_translation===true&&elem2.lang!==undefined&&elem2.lang===this.lang) ?\r\n          html`              \r\n            ${elem2.type===\"reportTitle\" ? this.kpiReportTitleLvl2(elem2, data[elem.endPointResponseObject], true) : nothing}\r\n            ${elem2.type===\"card\" ? this.kpiCard(elem2, data[elem2.endPointResponseObject], true) : nothing}\r\n            ${elem2.type===\"cardSomeElementsSingleObject\" ? this.kpiCardSomeElementsSingleObject(elem2, data, true) : nothing}\r\n            ${elem2.type===\"cardSomeElementsRepititiveObjects\" ? this.cardSomeElementsRepititiveObjects(elem2, data, true) : nothing}              \r\n            ${elem2.type===\"cardExpandSectionForScriptStep\" ? this.cardExpandSectionForScriptStep(elem2, data, this.moduleName) : nothing}                    \r\n            ${elem2.type===\"recovery_rate\" ? this.kpiRecoveryRate(elem2, true) : nothing}\r\n            ${elem2.type===\"grid\" ? this.kpiGrid(elem2, data[elem2.endPointResponseObject], true) : nothing}\r\n            ${elem2.type===\"chart\" ? this.kpiChartFran(elem2, true) : nothing}   \r\n\r\n            ${elem2.type===\"jsonViewer\" ? this.jsonViewer(elem2, data, true): nothing}\r\n            ${elem2.type===\"readOnlyTable\" ? this.readOnlyTable(elem2, data, true): nothing}\r\n            ${elem2.type===\"parentReadOnlyTable\" ? this.parentReadOnlyTable(elem2, data, true, undefined, undefined,): nothing}\r\n            ${elem2.type===\"readOnlyTableByGroup\" ? this.readOnlyTableByGroup(elem2, data, true): nothing}\r\n            ${elem2.type===\"readOnlyTableByGroupAllInOne\" ? this.readOnlyTableByGroupAllInOne(elem2, data, true): nothing}\r\n\r\n            ${elem2.type===\"rolesAndActions\"&&elem2.endPointResponseObject2!==undefined&&data[elem2.endPointResponseObject]!==undefined ? \r\n              this.rolesAndActions(elem2, data[elem2.endPointResponseObject][elem2.endPointResponseObject2], true, this.lang) : nothing}\r\n            ${elem2.type===\"rolesAndActions\"&&elem2.endPointResponseObject2===undefined ? \r\n              this.rolesAndActions(elem2, data[elem2.endPointResponseObject], true, this.lang) : nothing}   \r\n\r\n            ${elem2.type===\"coa\" ? this.coa(elem, data[elem.endPointResponseObject], true): nothing}\r\n              \r\n              \r\n            ${(elem2.includeChild===undefined||elem2.includeChild===false) ? nothing :\r\n              html`\r\n                  ${this.kpiCardSomeElementsChild(elem2, data, true)}\r\n            `}              \r\n            ${elem2.type===\"Report\" ? this.ReportController(elem2, true) : nothing}\r\n            ${elem2.type===\"testScripts\" ? this.scripts(elem2, true) : nothing}\r\n            ${elem2.type===\"spectestScripts\" ? this.specScripts(elem, true) : nothing}\r\n            ${elem2.type===\"buttonsOnly\" ? this.buttonsOnly(elem2, data[elem.endPointResponseObject]) : nothing}\r\n            ${elem2.type===\"tree\" ? this.treeElement(elem2, data)   : nothing}\r\n\r\n          `:nothing}\r\n        `\r\n      })} \r\n    </div>\r\n    `\r\n}\r\n\r\n}customElements.define('table-row-detail', TableRowDetail);\r\n","import { html, nothing } from 'lit';\r\nimport { commonLangConfig } from '@trazit/common-core';\r\nimport '@material/mwc-list/mwc-list-item';\r\nimport '@material/mwc-select';\r\nimport '@material/mwc-checkbox';\r\nimport '@material/mwc-formfield';\r\n\r\nexport function ModuleEnvMonitDialogsMicroorganism(base) {\r\nreturn class extends base {\r\n    static get properties() {\r\n        return {\r\n          microorganismList:{type: Array},\r\n          gridDialogItems:{type: Array}\r\n        }\r\n    }\r\n    constructor() {\r\n        super()\r\n        this.microorganismList=[]\r\n        this.gridDialogItems=[]\r\n    }\r\n\r\n//    @opened=${this.getMicroorganismToRemove()}\r\n\r\n    moduleEnvMonitMicroorganismsDialogAdd() {\r\n      // if (this.actionBeingPerformedModel.dialogInfo===undefined||this.actionBeingPerformedModel.dialogInfo.name!==\"microorganismDialogAdd\"){return nothing}\r\n      // console.log('moduleEnvMonitMicroorganismsDialog', 'actionBeingPerformedModel', this.actionBeingPerformedModel)\r\n      return html`\r\n        <tr-dialog id=\"microorganismDialogAdd\" ?open=${this.openAddDialog()}\r\n          @opened=${e => { if (e.target === this.microorganismDialog) this.fromGrid = false }}\r\n          @closing=${e => { if (e.target === this.microorganismDialog) { this.microorganismList = []; this.reload(); } }}\r\n          heading=\"\"\r\n          hideActions=\"\"\r\n          scrimClickAction=\"\">\r\n          ${this.actionBeingPerformedModel.dialogInfo===undefined||this.actionBeingPerformedModel.dialogInfo.name!==\"microorganismDialogAdd\" ? nothing:\r\n          html`\r\n              ${this.selectedItems.length ?\r\n            html`<label slot=\"topLeft\" style=\"font-size:12px\">Sample ID: ${this.selectedItems[0].sample_id}</label>` : nothing\r\n          }\r\n          <div class=\"layout vertical flex\">\r\n            ${this.viewForAdd()}        \r\n          </div>\r\n          `}\r\n        </tr-dialog>\r\n      `\r\n    }\r\n    openAddDialog(){\r\n      //console.log('openAddDialog')\r\n      return this.microorganismList.length>0&&this.actionBeingPerformedModel.dialogInfo!==undefined&&this.actionBeingPerformedModel.dialogInfo.name===\"microorganismDialogAdd\"\r\n\r\n    }\r\nopenRemoveDialog(){\r\n  // !==undefined}&&${this.actionBeingPerformedModel.dialogInfo!==undefined&&${this.actionBeingPerformedModel.dialogInfo.name===\"microorganismDialogRemove\"}&&${this.microorganismList.length}\r\n  return this.microorganismList.length>0&&this.actionBeingPerformedModel.dialogInfo!==undefined&&this.actionBeingPerformedModel.dialogInfo.name===\"microorganismDialogRemove\"\r\n}\r\n    moduleEnvMonitMicroorganismsDialogRemove() {\r\n      // if (this.actionBeingPerformedModel.dialogInfo===undefined||this.actionBeingPerformedModel.dialogInfo.name!==\"microorganismDialogRemove\"){return nothing}\r\n      // console.log('moduleEnvMonitMicroorganismsDialog', 'actionBeingPerformedModel', this.actionBeingPerformedModel)\r\n      return html`\r\n        <tr-dialog id=\"microorganismDialogRemove\" ?open=${this.openRemoveDialog()}\r\n          @opened=${e => { if (e.target === this.microorganismDialog) this.fromGrid = false }}\r\n          @closing=${e => { if (e.target === this.microorganismDialog) { this.microorganismList = []; this.reload(); } }}\r\n          heading=\"\"\r\n          hideActions=\"\"\r\n          scrimClickAction=\"\">\r\n          ${this.actionBeingPerformedModel.dialogInfo===undefined||this.actionBeingPerformedModel.dialogInfo.name!==\"microorganismDialogRemove\" ? nothing:\r\n          html`\r\n              ${this.selectedItems.length ?\r\n            html`<label slot=\"topLeft\" style=\"font-size:12px\">Sample ID: ${this.selectedItems[0].sample_id}</label>` : nothing\r\n          }\r\n          <div class=\"layout vertical flex\">\r\n            ${this.viewForRemove()}        \r\n          </div>\r\n          `}\r\n          </tr-dialog>\r\n      `\r\n    }\r\n\r\n    viewForAdd() {\r\n      if (this.actionBeingPerformedModel===undefined||this.actionBeingPerformedModel.dialogInfo===undefined){return html``}\r\n      if (this.actionBeingPerformedModel.dialogInfo.name!==\"microorganismDialogAdd\"){return html``}\r\n      return html`\r\n        <mwc-textfield id=\"numMicroItems\" label=\"${this.microName||'Microorganism Name'}\" type=\"number\" \r\n          .min=${this.getNumMicroItems()} \r\n          .value=${this.getNumMicroItems()}></mwc-textfield>\r\n        ${this.actionBeingPerformedModel.dialogInfo.fieldText===undefined ? nothing: html`\r\n          <mwc-select id='mAdd' @change=${this.selectMicroItem}>\r\n            <mwc-list-item value=''>-- Microorganism List --</mwc-list-item>\r\n            ${this.microorganismList.map(m =>\r\n              html`<mwc-list-item value=${m.name}>${m.name}</mwc-list-item>`\r\n            )}\r\n          </mwc-select>\r\n          <sp-button id=\"mAddBtn\" size=\"m\" variant=\"cta\" @click=${()=>this.AddOrAdhocMicroorganismAction(false)}>\r\n        \r\n          ${this.actionBeingPerformedModel.dialogInfo.fieldText.addBtn[\"label_\" + this.lang]}</sp-button>\r\n        \r\n          <mwc-textfield id=\"mAddHoc\" label=\"${this.actionBeingPerformedModel.dialogInfo.fieldText.addhocInput['label_' + this.lang]}\"\r\n            @input=${this.inputAddhoc}></mwc-textfield>\r\n          <sp-button id=\"mAddHocBtn\" size=\"m\" variant=\"secondary\" @click=${()=>this.AddOrAdhocMicroorganismAction()}>\r\n            ${this.actionBeingPerformedModel.dialogInfo.fieldText.addhocBtn[\"label_\" + this.lang]}</sp-button>\r\n        `}\r\n        <div id='microGrid'>\r\n          <vaadin-grid theme=\"row-dividers\" multi-sort\r\n            .items=${this.gridDialogItems}\r\n            @active-item-changed=\"${this.selectMicroOrg}\">\r\n            <vaadin-grid-sort-column resizable auto-width path=\"name\" header=\"${this.actionBeingPerformedModel.microorganismHeader.name['label_' + this.lang]}\"></vaadin-grid-sort-column>\r\n            <vaadin-grid-sort-column resizable auto-width path=\"items\" header=\"${this.actionBeingPerformedModel.microorganismHeader.items['label_' + this.lang]}\"></vaadin-grid-sort-column>\r\n          </vaadin-grid>\r\n        </div>\r\n      `\r\n    }\r\n\r\n    selectMicroItem(e) {\r\n      if (!this.fromGrid) {\r\n        this.microGrid.activeItem = null\r\n        this.microGrid.selectedItems = []\r\n        this.microName = e.target.value\r\n        if (this.microName) {\r\n          this.mAddHoc.disabled = true\r\n          this.mAddHocBtn.disabled = true\r\n          this.mAddHoc.value = ''\r\n        } else {\r\n          this.mAddHoc.disabled = false\r\n          this.mAddHocBtn.disabled = false\r\n        }\r\n      }\r\n      this.fromGrid = false\r\n    }\r\n\r\n    inputAddhoc(e) {\r\n      if (!this.fromGrid) {\r\n        this.microGrid.activeItem = null\r\n        this.microGrid.selectedItems = []\r\n        if (this.timeout) {\r\n          clearTimeout(this.timeout);\r\n        }\r\n        let name = e.target.value\r\n        this.timeout = setTimeout(() => {\r\n          this.microName = name\r\n          if (this.microName) {\r\n            this.mAdd.value = ''\r\n            this.mAdd.disabled = true\r\n            this.mAddBtn.disabled = true\r\n          } else {\r\n            this.mAdd.disabled = false\r\n            this.mAddBtn.disabled = false\r\n          }\r\n        }, 300);\r\n      }\r\n      this.fromGrid = false\r\n    }\r\n\r\n    selectMicroOrg(e) {\r\n      console.log('selectMicroOrg')\r\n      this.fromGrid = true\r\n      // reset back the fromGrid because of async process\r\n      const item = e.detail.value;\r\n      // checking opened dialog, whether add or remove\r\n      if (this.mAdd) {\r\n        this.mAddHoc.disabled = false\r\n        this.mAddHocBtn.disabled = false\r\n        this.mAdd.disabled = false\r\n        this.mAddBtn.disabled = false\r\n        if (item) {\r\n          let existItemList = this.microorganismList.filter(m => m.name == item.name)\r\n          if (existItemList.length) {\r\n            this.mAddHoc.disabled = true\r\n            this.mAddHocBtn.disabled = true\r\n            this.mAddHoc.value = ''\r\n            this.mAdd.value = item.name\r\n            this.mAdd.disabled = true\r\n          } else {\r\n            this.mAdd.disabled = true\r\n            this.mAddBtn.disabled = true\r\n            this.mAdd.value = ''\r\n            this.mAddHoc.value = item.name\r\n            this.mAddHoc.disabled = true\r\n          }\r\n        } else {\r\n          this.mAdd.value = ''\r\n          this.mAddHoc.value = ''\r\n        }\r\n      }\r\n      this.microName = item ? item.name : '';\r\n      e.target.selectedItems = item ? [item] : [];\r\n    }\r\n\r\n    getNumMicroItems() {\r\n      let item = this.selectedItems.length&&this.selectedItems[0].microorganism_list_array.filter(m => m.name == this.microName)\r\n      if (item.length) {\r\n        return item[0].items + 1\r\n      } else {\r\n        return 1\r\n      }\r\n    }\r\n\r\n    viewForRemove() {\r\n      if (this.actionBeingPerformedModel===undefined||this.actionBeingPerformedModel.microorganismHeader===undefined){return html``}      \r\n      if (this.actionBeingPerformedModel.dialogInfo.name!==\"microorganismDialogRemove\"){return html``}\r\n      return html`        \r\n        <div id='microGrid'>\r\n          <vaadin-grid theme=\"row-dividers\" all-rows-visible multi-sort\r\n            .items=${this.gridDialogItems}\r\n            @active-item-changed=\"${this.selectMicroOrg}\">\r\n            <vaadin-grid-sort-column resizable auto-width path=\"name\" header=\"${this.actionBeingPerformedModel.microorganismHeader.name['label_' + this.lang]}\"></vaadin-grid-sort-column>\r\n            <vaadin-grid-sort-column resizable auto-width path=\"items\" header=\"${this.actionBeingPerformedModel.microorganismHeader.items['label_' + this.lang]}\"></vaadin-grid-sort-column>\r\n          </vaadin-grid>\r\n        </div>\r\n        ${this.microGrid && this.microGrid.selectedItems.length ?\r\n          html`\r\n            <mwc-textfield id=\"numMicroItems\" min=0 .max=${this.getNumMicroItems() - 2} label=\"${this.microGrid.selectedItems[0].name}\" type=\"number\" .value=${this.getNumMicroItems() - 2}></mwc-textfield>\r\n          ` :\r\n          nothing\r\n        }\r\n        <sp-button size=\"m\" variant=\"cta\" @click=${this.removeSampleMicroorganismAction}>\r\n        ${commonLangConfig.confirmDialogButton[\"label_\" + this.lang]}</sp-button>\r\n      `\r\n    }\r\n\r\n    get microorganismDialogAdd() {return this.shadowRoot.querySelector(\"tr-dialog#microorganismDialogAdd\")}\r\n    get microorganismDialogRemove() {return this.shadowRoot.querySelector(\"tr-dialog#microorganismDialogRemove\")}\r\n    get mAdd() {return this.shadowRoot.querySelector(\"mwc-select#mAdd\")}\r\n    get mAddHoc() {return this.shadowRoot.querySelector(\"mwc-textfield#mAddHoc\")}\r\n    get microItems() {return this.shadowRoot.querySelector(\"mwc-textfield#numMicroItems\")}\r\n    get microGrid() {return this.shadowRoot.querySelector('div#microGrid vaadin-grid')}\r\n    get mAddBtn() {return this.shadowRoot.querySelector(\"sp-button#mAddBtn\")}\r\n    get mAddHocBtn() {return this.shadowRoot.querySelector(\"sp-button#mAddHocBtn\")}\r\n\r\n    AddOrAdhocMicroorganismAction(addhoc=true) {\r\n      if (this.microName) {\r\n        // get value from text input\r\n        let totalItems = Number(this.microItems.value)\r\n        // get value from text input\r\n        if (addhoc) {\r\n          this.selectedDialogAction = this.actionBeingPerformedModel.dialogInfo.action[1]\r\n        // get value from selected item\r\n        } else {\r\n          this.selectedDialogAction = this.actionBeingPerformedModel.dialogInfo.action[0]\r\n        }\r\n        let item = this.gridDialogItems.filter(m => m.name == this.microName)\r\n        if (item.length) {\r\n          item = item[0].items\r\n        } else {\r\n          item = 0\r\n        }\r\n        let numItems = totalItems - item\r\n        this.gridDialogItems.forEach(m => {\r\n          if (m.name != this.microName) {\r\n            totalItems += Number(m.items)\r\n          }\r\n        })\r\n\r\n        if (Number(this.selectedItems[0].raw_value) < totalItems) {\r\n          this.dispatchEvent(new CustomEvent(\"error\", {\r\n            detail: {\r\n              is_error: true,\r\n              message_en: \"This addition would be \" + totalItems + \" what is greater than the reading \" + this.selectedItems[0].raw_value + \" what is not allowed.\",\r\n              message_es: \"Está adición sumaría un total de \" + totalItems + \", mayor a la lectura identificada, \" + this.selectedItems[0].raw_value + \", lo que no es permitido.\"\r\n            },\r\n            bubbles: true,\r\n            composed: true\r\n          }))\r\n          console.log(\"This addition would be \" + totalItems + \" what is greater than the reading \" + this.selectedItems[0].raw_value + \" what is not allowed.\")\r\n          return\r\n        }\r\n        this.targetValue = {\r\n          microorganismName: this.microName,\r\n          numItems: numItems\r\n        }\r\n        this.performActionRequestHavingDialogOrNot(this.selectedDialogAction, this.selectedItems[0], this.targetValue)\r\n      }\r\n    }\r\n    reload() {\r\n      this.resetDialogThings()\r\n    }\r\n    resetDialogThings() {\r\n      this.targetValue = {}\r\n      this.selectedDialogAction = null\r\n    }\r\n    getMicroorganismToAdd() {      \r\n      console.log('getMicroorganismToAdd')\r\n      this.moduleEnvMonitMicroorganismsDialogAdd()\r\n      let queryDefinition=this.actionBeingPerformedModel.dialogInfo.viewQuery\r\n      let APIParams=this.getAPICommonParams(queryDefinition)\r\n      let viewParams=this.jsonParam(queryDefinition, this.selectedItems[0])\r\n      let params = this.config.backendUrl + this.config.frontEndEnvMonitSampleUrl\r\n        + '?' + new URLSearchParams(viewParams) + '&'+ new URLSearchParams(APIParams) \r\n      this.fetchApi(params).then(j => {\r\n        if (j && !j.is_error) {\r\n          this.microName = null\r\n          this.microorganismList = j\r\n          this.gridDialogItems = this.selectedItems[0].microorganism_list_array\r\n          this.fromGrid = false\r\n          this.requestUpdate()\r\n        }\r\n      })\r\n    }\r\n\r\n    addSampleMicroorganism() {\r\n      let queryDefinition=this.actionBeingPerformedModel.action[0]\r\n      //this.sampleState = { action: JSON.stringify(queryDefinition), sample: this.selectedItems[0].sample_id }\r\n      this.targetValue = {\r\n        sampleId: this.selectedItems[0].sample_id,\r\n        microorganismName: this.microGrid.selectedItems[0].name\r\n        //numItems: this.microGrid.selectedItems[0].items - this.microItems.value\r\n      }\r\n      console.log('addSampleMicroorganism', 'targetValue', this.targetValue)      \r\n      let extraParams=this.jsonParam(queryDefinition, this.selectedItems[0], this.targetValue) \r\n      let APIParams=this.getAPICommonParams(queryDefinition)\r\n      let params = this.config.backendUrl + this.config.ApiEnvMonitSampleUrl\r\n        + '?' + new URLSearchParams(this.reqParams) + '&'+ new URLSearchParams(APIParams) + '&'+ new URLSearchParams(extraParams)\r\n      this.fetchApi(params).then(() => {\r\n        this.reload()\r\n      })\r\n    }    \r\n\r\n    getMicroorganismToRemove() {\r\n      console.log('getMicroorganismToRemove')\r\n      this.moduleEnvMonitMicroorganismsDialogRemove()\r\n      let queryDefinition=this.actionBeingPerformedModel.dialogInfo.viewQuery\r\n      let APIParams=this.getAPICommonParams(queryDefinition)      \r\n      this.reqParams.whereFieldsName = \"sample_id\"\r\n      this.reqParams.whereFieldsValue = this.selectedItems[0].sample_id + \"*Integer\"\r\n      let params = this.config.backendUrl + this.config.frontEndEnvMonitSampleUrl\r\n        + '?' + new URLSearchParams(this.reqParams) + '&'+ new URLSearchParams(APIParams) \r\n      this.fetchApi(params).then(j => {\r\n        if (j && !j.is_error) {\r\n          this.microName = null\r\n          this.microorganismList = j\r\n          this.gridDialogItems = this.selectedItems[0].microorganism_list_array\r\n          this[this.actionBeingPerformedModel.dialogInfo.name].show()\r\n          this.requestUpdate()\r\n        }\r\n      })\r\n    }\r\n\r\n    removeSampleMicroorganismAction() {      \r\n      let queryDefinition=this.actionBeingPerformedModel.dialogInfo.action[0]\r\n      //this.sampleState = { action: JSON.stringify(queryDefinition), sample: this.selectedItems[0].sample_id }\r\n      if (!this.microGrid.selectedItems.length) return\r\n      this.targetValue = {}\r\n      this.targetValue = {\r\n        sampleId: this.selectedItems[0].sample_id,\r\n        microorganismName: this.microGrid.selectedItems[0].name,\r\n        numItems: this.microGrid.selectedItems[0].items - this.microItems.value\r\n      }\r\n      this.microItems.hidden = true\r\n      console.log('removeSampleMicroorganismAction 20221013', 'targetValue', this.targetValue, 'queryDefinition', queryDefinition)      \r\n      let APIParams=this.getAPICommonParams(queryDefinition)\r\n      let extraParams=this.jsonParam(queryDefinition, this.selectedItems[0], this.targetValue)  \r\n      let endPointUrl=this.getActionAPIUrl(queryDefinition) \r\n      let params = this.config.backendUrl + endPointUrl\r\n        + '?' + new URLSearchParams(this.reqParams) + '&'+ new URLSearchParams(APIParams)+ '&'+ new URLSearchParams(extraParams)\r\n      this.fetchApi(params).then(() => {\r\n        this.microorganismList = []\r\n        this.microGrid.selectedItems = []\r\n        this.reload()\r\n        this.targetValue = {}\r\n      })\r\n    }\r\n\r\n    removeSampleMicroorganismActionNO() {\r\n      console.log('removeSampleMicroorganismAction')\r\n      // if (!this.microGrid.selectedItems.length) return\r\n      // this.targetValue = {\r\n      //   sampleId: this.selectedItems[0].sample_id,\r\n      //   microorganismName: this.microGrid.selectedItems[0].name,\r\n      //   numItems: this.microGrid.selectedItems[0].items - this.microItems.value\r\n      // }\r\n      // this.microItems.hidden = true\r\n      this.selectedDialogAction = this.actionBeingPerformedModel.dialogInfo.action[0]\r\n      this.actionMethod(this.selectedDialogAction, false)\r\n    }    \r\n    get objectToReactivateName() {return this.shadowRoot.querySelector(\"mwc-select#objectToReactivateName\")}\r\n  \r\n}}","import { html, nothing } from 'lit';\r\nimport { commonLangConfig } from '@trazit/common-core';\r\nimport { ActionsFunctions } from '../components/Actions/ActionsFunctions';\r\nexport function ModuleEnvMonitClientMethods(base) {\r\n    return class extends ActionsFunctions(base) {  \r\n        static get properties() {\r\n            return {\r\n                headerInfo: { type: Object },\r\n                sopsPassed: {type : Boolean},\r\n                prodLotList: { type: Object },\r\n            }\r\n        }\r\n        constructor() {\r\n            super()\r\n            this.sopsPassed=true\r\n            this.headerInfo = JSON.parse(sessionStorage.getItem(\"userSession\")).header_info\r\n            //console.log(this.headerInfo)\r\n            this.prodLotList=[]\r\n        }\r\n        async getProgramList() {\r\n          // alert('getProgramList')\r\n            let queryDefinition=this.viewModelFromProcModel.viewQuery\r\n            this.samplesReload = true\r\n        //    this.templates.programsList = []\r\n            let APIParams=this.getAPICommonParams(queryDefinition)\r\n            let viewParams=this.jsonParam(queryDefinition)\r\n            let params = this.config.backendUrl + this.config.frontEndEnvMonitUrl\r\n                + '?' + new URLSearchParams(APIParams) + '&'+ new URLSearchParams(viewParams)\r\n            await this.fetchApi(params).then(j => {\r\n            if (j && !j.is_error) {\r\n                //if (queryDefinition.subQuery) {\r\n                //this.GetViewData(queryDefinition.subQuery)\r\n                this.templates.programsList = j.programsList\r\n                //}\r\n            }\r\n            })\r\n        }\r\n        logSampleDialog() {\r\n            // alert('logSampleDialog')\r\n            this.GetQueriesForDialog(this.viewModelFromProcModel.langConfig.gridActionOnClick)            \r\n        }\r\n        pointTemplate() {\r\n            // console.log('pointTemplate')\r\n\r\n            if (this.viewModelFromProcModel===undefined||this.viewModelFromProcModel.langConfig===undefined||this.viewModelFromProcModel.langConfig.fieldText===undefined\r\n                ||this.selectedItems===undefined||this.selectedItems[0]===undefined||this.selectedItems[0].card_info===undefined) {\r\n                //alert('genericFormDialog has no dialogInfo')\r\n                return nothing\r\n            }\r\n\r\n            return html`\r\n            <tr-dialog id=\"pointDialog\" .open=${this.selectedItems && this.selectedItems.length && this.sopsPassed}\r\n              @closed=${e => { if (e.target === this.pointDialog) this.grid.activeItem = null }}\r\n              heading=\"\"\r\n              hideActions=\"\"\r\n              scrimClickAction=\"\">            \r\n              <div class=\"layout vertical flex center-justified\">\r\n                <div class=\"layout horizontal justified flex\">\r\n                  <sp-button size=\"m\" variant=\"secondary\" dialogAction=\"accept\">\r\n                    ${commonLangConfig.closeDialogButton[\"label_\" + this.lang]}</sp-button>\r\n                  <sp-button size=\"m\" @click=${this.setLogSample}>${this.viewModelFromProcModel.langConfig.fieldText.logBtn[\"label_\" + this.lang]}</sp-button>\r\n                </div>\r\n                <div class=\"layout horizontal flex around-justified wrap\" style=\"gap: 5px;\">\r\n                  <mwc-select label=\"${this.viewModelFromProcModel.langConfig.fieldText.shift[\"label_\" + this.lang]}\" id=\"shift\">\r\n                    ${this.viewModelFromProcModel.langConfig.fieldText.shift.items.map((c, i) =>\r\n              html`<mwc-list-item value=\"${c.keyName}\" ?selected=${c.keyName == this.headerInfo.shift}>${c[\"keyValue_\" + this.lang]}</mwc-list-item>`\r\n            )}\r\n                  </mwc-select>\r\n                  <mwc-select label=\"${this.viewModelFromProcModel.langConfig.fieldText.lot[\"label_\" + this.lang]}\" id=\"lot\">\r\n                    ${this.prodLotList.map((c, i) =>\r\n              html`<mwc-list-item value=\"${c.lot_name}\" ?selected=${i == 0}>${c.lot_name}</mwc-list-item>`\r\n            )}\r\n                  </mwc-select>\r\n                  ${this.selectedItems.length && this.selectedItems[0].card_info.map(f =>\r\n              html`${(f.name in this.viewModelFromProcModel.langConfig.gridHeader) ?\r\n                // html`<mwc-textfield style=\"width:200px\" ?disabled=${this.viewModelFromProcModel.langConfig.gridHeader[f.name]&&this.viewModelFromProcModel.langConfig.gridHeader[f.name].confidential_value?true:false} label=${this.viewModelFromProcModel.langConfig.gridHeader[f.name]['label_'+this.lang]} name=${f.name} type=${f.type} value=${this.viewModelFromProcModel.langConfig.gridHeader[f.name]&&this.viewModelFromProcModel.langConfig.gridHeader[f.name].confidential_value&&f.value?\"*****\":f.value}></mwc-textfield>` :\r\n                html`<mwc-textfield disabled style=\"width:200px\" label=${this.viewModelFromProcModel.langConfig.gridHeader[f.name]['label_' + this.lang]} name=${f.name} type=${f.type} value=${this.viewModelFromProcModel.langConfig.gridHeader[f.name] && this.viewModelFromProcModel.langConfig.gridHeader[f.name].confidential_value && f.value ? \"*****\" : f.value}></mwc-textfield>` :\r\n                nothing\r\n                }\r\n                    `\r\n            )}\r\n                </div>\r\n              </div>\r\n            </tr-dialog>\r\n            `\r\n          }\r\n      \r\n          get pointDialog() {\r\n            return this.shadowRoot.querySelector(\"tr-dialog#pointDialog\")\r\n          }\r\n      \r\n          get shiftField() {\r\n            return this.shadowRoot.querySelector(\"mwc-select#shift\")\r\n          }\r\n      \r\n          get lotField() {\r\n            return this.shadowRoot.querySelector(\"mwc-select#lot\")\r\n          }\r\n      \r\n          setLogSample(e) {\r\n            this.targetValue = {\r\n              sampleTemplate: this.templates.selectedProgram.sample_config_code,\r\n              sampleTemplateVersion: this.templates.selectedProgram.sample_config_code_version,\r\n              fieldValue: `${this.shiftField.value}*String|${this.lotField.value}*String`\r\n            }\r\n            \r\n            this.trazitNoDialogRequired(this.viewModelFromProcModel.langConfig.gridActionOnClick.dialogInfo.action, this.selectedItems[0], this.targetValue, false, this.selectedItems[0])\r\n            e.stopPropagation();\r\n          }\r\n      \r\n    }\r\n}"],"names":[],"sourceRoot":""}