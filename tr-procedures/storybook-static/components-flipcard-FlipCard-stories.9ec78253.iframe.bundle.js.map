{"version":3,"file":"components-flipcard-FlipCard-stories.9ec78253.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AAGA;;AAuDA;;;;AAIA;;;AAGA;;;;;;AAMA;;AAEA;AACA;;AAEA;AACA;;;;AAIA;AACA;;;;AAIA;;;AAGA;;;;;;AAMA;AAEA;AACA;;;;;;AAMA;AACA;;;;;;;AAQA;ACnFA;AAGA","sources":["webpack://@trazit/tr-procedures/./src/components/flipcard/flipcard.js","webpack://@trazit/tr-procedures/./src/components/flipcard/FlipCard.stories.js"],"sourcesContent":["import { LitElement, html, css, nothing } from 'lit';\r\nimport { flipCardStyles } from './flipcard.css.js';\r\nimport { navigator } from \"lit-element-router\";\r\n\r\nclass FlipCard extends navigator(LitElement) {\r\n  static styles = css`\r\n    ${flipCardStyles}\r\n  `;\r\n\r\n  static get properties() {\r\n    return {\r\n      config: { type: Object },\r\n      data: { type: Array },\r\n      lang: { type: String },\r\n      defaultImageUrl: { type: String },\r\n      defaultImageHeight: { type: String },\r\n      defaultImageWidth: { type: String },\r\n    }\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.config = {};\r\n    this.data = [];\r\n    this.defaultImageUrl = 'https://images.unsplash.com/photo-1720475376136-bf9bf6c0c782?q=80&w=1964&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D';\r\n    this.defaultImageHeight = '50px'; // Default values\r\n    this.defaultImageWidth = '100%';  // Default values\r\n  }\r\n\r\n  setConfigVariables() {\r\n    const maxCardsPerRow = this.data.length;\r\n    let cardsPerRow = 3; // Default value\r\n\r\n    if (this.config && this.config.cardsPerRow !== undefined) {\r\n      cardsPerRow = Math.min(this.config.cardsPerRow, maxCardsPerRow);\r\n    }\r\n\r\n    this.style.setProperty('--cards-per-row', cardsPerRow);\r\n\r\n    // Setting width and height from config\r\n    if (this.config && this.config.width !== undefined) {\r\n      this.style.setProperty('--flip-card-width', this.config.width);\r\n    }\r\n    if (this.config && this.config.height !== undefined) {\r\n      this.style.setProperty('--flip-card-height', this.config.height);\r\n    }\r\n    if (this.lang === undefined) { this.lang = 'en'; }\r\n  }\r\n\r\n  getClassForTextType(type) {\r\n    switch (type) {\r\n      case 'warning':\r\n        return 'text-warning';\r\n      case 'critical':\r\n        return 'text-critical';\r\n      default:\r\n        return 'text-normal';\r\n    }\r\n  }\r\n\r\n  render() {\r\n    this.setConfigVariables();\r\n    return html`\r\n      <div class=\"flip-card-container\">\r\n        ${this.data.map((item) => html`\r\n          <div class=\"flip-card\">\r\n            <div class=\"flip-card-inner\">\r\n              <div class=\"flip-card-front\">\r\n                ${item.contentOnFront === undefined || item.contentOnFront.cardTitle === undefined ? html`` : html`\r\n                  <div class=\"card-cover\">\r\n                    <h4 class=\"card-heading\">\r\n                      <span class=\"card-heading-text\">${item.contentOnFront === undefined || item.contentOnFront.cardTitle === undefined ? html`` : html`${item.contentOnFront.cardTitle[\"label_\" + this.lang]}`}</span>\r\n                    </h4>\r\n                  </div>\r\n                `}\r\n                <div class=\"card-content\">\r\n                  <div class=\"card-header\">\r\n                    ${item.contentOnFront !== undefined && item.contentOnFront.imageUrl ? html`<img src=\"${item.imageUrl}\" alt=\"Dynamic Image\" style=\"height:${item.imageHeight || this.defaultImageHeight}; width:${item.imageWidth || this.defaultImageWidth};\" />` : nothing}\r\n                  </div>\r\n                  ${item.contentOnFront === undefined || item.contentOnFront.textTop === undefined ? nothing : html`\r\n                    <p class=\"card-role ${this.getClassForTextType(item.contentOnFront.textTop.type)}\">${item.contentOnFront.textTop[\"label_\" + this.lang]}</p>\r\n                  `}\r\n                  ${item.contentOnFront === undefined || item.contentOnFront.textLow === undefined ? nothing : html`\r\n                    <p class=\"card-title ${this.getClassForTextType(item.contentOnFront.textLow.type)}\">${item.contentOnFront.textLow[\"label_\" + this.lang]}</p>\r\n                  `}\r\n                </div>\r\n                <div class=\"button-container\">\r\n                  ${item.clickLinkAllowed ? html`<button class=\"flip-button\" @click=\"${() => this._elementClicked(item)}\">Window</button>` : nothing}\r\n                  ${item.flipCardAllowed ? html`<button class=\"flip-button\" @click=\"${this.flipCard}\">Flip Card</button>` : nothing}\r\n                </div>\r\n              </div>\r\n              <div class=\"flip-card-back\">\r\n                ${item.contentOnBack === undefined || item.contentOnBack.cardTitle === undefined ? html`` : html`\r\n                  <div class=\"card-cover\">                \r\n                    <h4 class=\"card-heading\">\r\n                      <span class=\"card-heading-text\">${item.contentOnBack === undefined || item.contentOnBack.cardTitle === undefined ? html`` : html`${item.contentOnBack.cardTitle[\"label_\" + this.lang]}`}</span>\r\n                    </h4>\r\n                  </div>\r\n                `}\r\n                <div class=\"card-details\">\r\n                  <ul class=\"skills-list\">\r\n                  ${item.contentOnBack === undefined || item.contentOnBack.detail === undefined ? nothing : \r\n                  html`\r\n                    ${item.contentOnBack.detail[\"label_\" + this.lang].map((curText, index) => html`\r\n                      <li class=\"${this.getClassForTextType(item.contentOnBack.detail.types ? item.contentOnBack.detail.types[index] : 'normal')}\">${curText}</li>\r\n                    `)}\r\n                  `}\r\n                  </ul>\r\n                </div>\r\n                <div class=\"button-container\">\r\n                  ${item.clickLinkAllowed ? html`<button class=\"flip-button\" @click=\"${() => this._elementClicked(item)}\">Window</button>` : nothing}\r\n                  ${item.flipCardAllowed ? html`<button class=\"flip-button\" @click=\"${this.flipCard}\">Flip Card</button>` : nothing}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        `)}\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  flipCard(event) {\r\n    event.stopPropagation();\r\n    const flipCardElement = event.currentTarget.closest('.flip-card');\r\n    flipCardElement.classList.toggle('flipped');\r\n  }\r\n\r\n  _elementClicked(item) {\r\n    if (item.procInstanceName === undefined || item.viewName === undefined) {\r\n      alert('Procedure and view are mandatory to open one view from this card');\r\n      return;\r\n    }\r\n    let procName = item.procInstanceName;\r\n    let vwName = item.viewName;\r\n    let fltrName = item.filterName;\r\n    if (procName === undefined) {\r\n      procName = this.procName;\r\n    }\r\n    console.log(\"elementClicked\", procName, vwName, fltrName);\r\n    this._selectedMenu(\r\n      \"/dashboard/procedures?procName=\" + procName + \"&viewName=\" + vwName + \"&filterName=\" + fltrName\r\n    );\r\n  }\r\n\r\n  _selectedMenu(route) {\r\n    this.shadowRoot\r\n      .querySelectorAll(\"sp-action-menu\")\r\n      .forEach((s) => (s.open = false));\r\n    this.navigate(route);\r\n  }\r\n}\r\n\r\ncustomElements.define('flip-card', FlipCard);\r\nexport { FlipCard };","import { html } from 'lit';\r\nimport './flipcard'; // Asegúrate de que este archivo exporta `flip-card` correctamente.\r\n\r\nexport default {\r\n  title: 'Components/FlipCard',\r\n  component: 'flip-card',\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    config: {\r\n      control: 'object',\r\n      description: 'Configuración del flip-card. Incluye propiedades como `flipCardAllowed` y `cardsPerRow`.',\r\n      table: {\r\n        type: { summary: 'object' },\r\n        defaultValue: { summary: '{}' },\r\n      },\r\n    },\r\n    data: {\r\n      control: 'object',\r\n      description: 'Datos para cada tarjeta. Incluye propiedades como `textLow`, `textTop`, `flipCardAllowed`, `clickLinkAllowed` y `contentOnBack`.',\r\n      table: {\r\n        type: { summary: 'array' },\r\n        defaultValue: { summary: '[]' },\r\n      },\r\n    },\r\n    lang: {\r\n      control: 'text',\r\n      description: 'Idioma para la tarjeta.',\r\n      table: {\r\n        type: { summary: 'string' },\r\n        defaultValue: { summary: 'es' },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst Template = ({ lang, config, data }) => html`\r\n  <flip-card .lang=${lang} .config=${config} .data=${data}></flip-card>\r\n`;\r\n\r\nexport const Group1 = Template.bind({});\r\nGroup1.args = {\r\n  lang: 'es',\r\n  config: { flipCardAllowed: true, cardsPerRow: 3 },\r\n  data: [\r\n    { \r\n      textLow: \"Hola11\", \r\n      textTop: 'Hola', \r\n      flipCardAllowed: true, \r\n      clickLinkAllowed: true,\r\n      contentOnBack: {\r\n        detail: [\r\n          { label_en: 'Detail 1', label_es: 'Detalle 1' },\r\n          { label_en: 'Detail 2', label_es: 'Detalle 2' },\r\n        ]\r\n      }\r\n    },\r\n    { textLow: \"Hola12\", textTop: 'Hola', flipCardAllowed: true, clickLinkAllowed: true },\r\n    { textLow: \"Hola13\", textTop: 'Hola', flipCardAllowed: true, clickLinkAllowed: true },\r\n    { textLow: \"Hola14\", textTop: 'Hola', flipCardAllowed: true, clickLinkAllowed: true }\r\n  ],\r\n};\r\n\r\nexport const Group2 = Template.bind({});\r\nGroup2.args = {\r\n  lang: 'es',\r\n  config: { flipCardAllowed: false, cardsPerRow: 2 },\r\n  data: [\r\n    { \r\n      textLow: \"Hola222\", \r\n      textTop: 'Hola', \r\n      flipCardAllowed: true, \r\n      clickLinkAllowed: true,\r\n      contentOnFront: {\r\n        \"textTop\":{ label_en: 'Detail A', label_es: 'Detalle A', type:'warning' },\r\n        \"textLow\":{ label_en: 'Detail A', label_es: 'Detalle A', type:'critical' }\r\n      },\r\n      contentOnBack: {\r\n        detail: { \r\n          label_en: ['Detail Abb'], \r\n          label_es: ['Detalle A']         \r\n        }\r\n      }\r\n    }\r\n  ],\r\n};\r\n"],"names":[],"sourceRoot":""}