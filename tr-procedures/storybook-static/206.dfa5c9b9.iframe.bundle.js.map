{"version":3,"file":"206.dfa5c9b9.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;;;;;AC6xCA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;;;;;;;;;AAUA","sources":["webpack://@trazit/tr-procedures/./src/components/Calendar/utils.js","webpack://@trazit/tr-procedures/./src/components/Calendar/index.js"],"sourcesContent":["function getDayNames(day) {\r\n    if (day.toLowerCase() === 'monday') {\r\n        return [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\r\n    } else {\r\n        return [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n    }\r\n}\r\nfunction formatTime(hours, minutes) {\r\n    var formattedHours = hours < 10 ? \"0\" + hours : hours;\r\n    var formattedMinutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n    return formattedHours + \":\" + formattedMinutes;\r\n}\r\nfunction formatDate(dateString) {\r\n    const date = new Date(dateString);\r\n    const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    const dayOfWeek = daysOfWeek[date.getDay()];\r\n    const month = months[date.getMonth()];\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const year = date.getFullYear();\r\n    return `${dayOfWeek} ${month} ${day} ${year} 00:00:00 GMT+0530 (India Standard Time)`;\r\n}\r\nfunction formatDateString(dateString) {\r\n    const date = new Date(dateString);\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n}\r\nfunction createEventDescription(event, eventListsFields, lang) {\r\n    let eventDescriptionList = document.createElement('ul');\r\n    eventDescriptionList.classList.add('event-description-list');\r\n  \r\n    // Iterar sobre cada campo definido en la configuración\r\n    eventListsFields.forEach(fieldConfig => {\r\n      let listItem = document.createElement('li');\r\n  \r\n      // Seleccionar la etiqueta adecuada según el idioma\r\n      let label = lang === 'es' ? fieldConfig.label_es : fieldConfig.label_en;\r\n  \r\n      // Obtener el valor del campo del evento\r\n      let value = event[fieldConfig.field];\r\n  \r\n      // Establecer el contenido del elemento de lista\r\n      listItem.textContent = `${label}: ${value}`;\r\n  \r\n      // Añadir el elemento de lista a la lista de descripción\r\n      eventDescriptionList.appendChild(listItem);\r\n    });\r\n  \r\n    return eventDescriptionList;\r\n  }\r\nexport {\r\n    getDayNames,\r\n    formatTime,\r\n    formatDate,\r\n    formatDateString,\r\n    createEventDescription\r\n}","import { LitElement, html, css } from 'lit';\r\nimport { styles } from './styles/index';\r\n//import { events } from './data/event';\r\nimport { createEventDescription, getDayNames, formatTime, formatDate, formatDateString } from './utils';\r\n\r\nclass CalendarComponent extends LitElement {\r\n  static properties = {\r\n    dataAllInOneData: { type: Object },\r\n    config:{ type: Object},\r\n    showWeekView:{type: Boolean},\r\n    lang: {type: String}\r\n    // Otras propiedades que ya tienes...\r\n  };\r\n\r\n  static styles = [styles, css``];\r\n  constructor() {\r\n    super();\r\n    this.showWeekView=false // This view does not work and then it cannot displayed\r\n    this.dataAllInOneData={}\r\n    this.config={}\r\n  }\r\n  firstUpdated() {\r\n    super.firstUpdated();\r\n    if (this.dataAllInOneData.program_calendar===undefined){\r\n      this.dataAllInOneData.program_calendar={}\r\n    }\r\n    //this.dataAllInOneData=this.data\r\n    if (this.fakeData){\r\n      this.events = this.dataAllInOneData.program_calendar.dates;\r\n      this.holidays_calendar = this.dataAllInOneData.program_calendar.holidays_calendar;\r\n      this.firstDayOfWeek = this.dataAllInOneData.program_calendar.day_of_week;\r\n      this.schedule_size_unit = this.dataAllInOneData.program_calendar.schedule_size_unit\r\n      if (this.dataAllInOneData.program_calendar.viewCurrentDate.toLowerCase()==\"today\"){\r\n        this.currentDate = new Date()\r\n      }else{\r\n        this.currentDate = this.dataAllInOneData.program_calendar.start_date\r\n          ? new Date(this.dataAllInOneData.program_calendar.start_date)\r\n          : new Date();        \r\n      }\r\n      console.log('currentDate', this.currentDate)\r\n      this.firstDateOfWeek = new Date(\r\n        this.currentDate.getFullYear(),\r\n        this.currentDate.getMonth(),\r\n        this.currentDate.getDate() - (this.firstDayOfWeek === \"MONDAY\" ? (this.currentDate.getDay() === 0 ? 6 : this.currentDate.getDay() - 1) : this.currentDate.getDay())\r\n      );\r\n      console.log(this.firstDateOfWeek)\r\n      this.calendarStartDate = new Date(\r\n        new Date(this.dataAllInOneData.program_calendar.start_date).setHours(0, 0, 0)\r\n      );\r\n      this.calendarEndDate = new Date(\r\n        new Date(this.dataAllInOneData.program_calendar.end_date).setHours(0, 0, 0)\r\n      );\r\n      this.currentDisplayedYear = this.dataAllInOneData.program_calendar.start_date\r\n        ? new Date(this.dataAllInOneData.program_calendar.start_date).getFullYear()\r\n        : new Date().getFullYear();\r\n      this.currentDisplayedMonth = this.dataAllInOneData.program_calendar.start_date\r\n        ? new Date(this.dataAllInOneData.program_calendar.start_date).getMonth()\r\n        : new Date().getMonth();\r\n      this.currentYear = this.dataAllInOneData.program_calendar.start_date\r\n        ? new Date(this.dataAllInOneData.program_calendar.start_date).getFullYear()\r\n        : new Date().getFullYear();\r\n    }else{\r\n      this.events = []\r\n      if (this.dataAllInOneData!==undefined&&this.dataAllInOneData.program_calendar!==undefined&&this.dataAllInOneData.program_calendar.dates!==undefined){\r\n        this.events = this.dataAllInOneData.program_calendar.dates;\r\n      }\r\n      this.holidays_calendar = []\r\n      if (this.dataAllInOneData!==undefined&&this.dataAllInOneData.program_calendar!==undefined&&this.dataAllInOneData.program_calendar.holidays_calendar!==undefined){\r\n        this.holidays_calendar = this.dataAllInOneData.program_calendar.holidays_calendar;\r\n      }\r\n      this.firstDayOfWeek = \"MONDAY\"\r\n      if (this.dataAllInOneData!==undefined&&this.dataAllInOneData.program_calendar!==undefined&&this.dataAllInOneData.program_calendar.day_of_week!==undefined){\r\n        this.firstDayOfWeek = this.dataAllInOneData.program_calendar.day_of_week;\r\n      }\r\n      this.schedule_size_unit = \"MONTHS\"\r\n      if (this.dataAllInOneData!==undefined&&this.dataAllInOneData.program_calendar!==undefined&&this.dataAllInOneData.program_calendar.schedule_size_unit!==undefined){\r\n        this.schedule_size_unit = this.dataAllInOneData.program_calendar.schedule_size_unit\r\n      }\r\n      if (this.dataAllInOneData.program_calendar.viewCurrentDate===undefined){\r\n        this.dataAllInOneData.program_calendar.viewCurrentDate=\"today\"\r\n      }\r\n      if (this.dataAllInOneData.program_calendar.viewCurrentDate.toLowerCase()==\"today\"){\r\n        this.currentDate = new Date()\r\n      }else{\r\n        this.currentDate = this.dataAllInOneData.program_calendar.start_date\r\n          ? new Date(this.dataAllInOneData.program_calendar.start_date)\r\n          : new Date();        \r\n      }\r\n      console.log('currentDate', this.currentDate)\r\n      this.firstDateOfWeek = new Date(\r\n        this.currentDate.getFullYear(),\r\n        this.currentDate.getMonth(),\r\n        this.currentDate.getDate() - (this.firstDayOfWeek === \"MONDAY\" ? (this.currentDate.getDay() === 0 ? 6 : this.currentDate.getDay() - 1) : this.currentDate.getDay())\r\n      );\r\n      console.log(this.firstDateOfWeek)\r\n      this.calendarStartDate = new Date(\r\n        new Date(this.dataAllInOneData.program_calendar.start_date).setHours(0, 0, 0)\r\n      );\r\n      this.calendarEndDate = new Date(\r\n        new Date(this.dataAllInOneData.program_calendar.end_date).setHours(0, 0, 0)\r\n      );\r\n      this.currentDisplayedYear = this.dataAllInOneData.program_calendar.start_date\r\n        ? new Date(this.dataAllInOneData.program_calendar.start_date).getFullYear()\r\n        : new Date().getFullYear();\r\n      this.currentDisplayedMonth = this.dataAllInOneData.program_calendar.start_date\r\n        ? new Date(this.dataAllInOneData.program_calendar.start_date).getMonth()\r\n        : new Date().getMonth();\r\n      this.currentYear = this.dataAllInOneData.program_calendar.start_date\r\n        ? new Date(this.dataAllInOneData.program_calendar.start_date).getFullYear()\r\n        : new Date().getFullYear();      \r\n    }\r\n    this.setDayBasedOnStartWeek =\r\n      (this.firstDayOfWeek.toLowerCase() || 'SUNDAY') === 'monday' ? 1 : 2;\r\n    this.dayNames = getDayNames(this.firstDayOfWeek || 'SUNDAY');\r\n    this.calendar = this.shadowRoot.getElementById('calendar');\r\n    this.allEvents = this.shadowRoot.getElementById('allEvents');\r\n    this.selectedDateView = this.shadowRoot.getElementById('selectedDateView');\r\n    this.dayGridView = this.shadowRoot.getElementById('dayGridView');\r\n    this.weekGridView = this.shadowRoot.getElementById('weekGridView');\r\n    this.previousButton = this.shadowRoot.getElementById('previous');\r\n    this.nextButton = this.shadowRoot.getElementById('next');\r\n    this.currentButton = this.shadowRoot.getElementById('current');\r\n    this.previousButton.addEventListener('click', this.handlePrevious);\r\n    this.nextButton.addEventListener('click', this.handleNext);\r\n    this.showCurrentMonthButton =\r\n      this.shadowRoot.getElementById('showCurrentMonth');\r\n    this.showAllMonthsButton = this.shadowRoot.getElementById('showAllMonths');\r\n    this.showDayViewButton = this.shadowRoot.getElementById('showDayView');\r\n    this.showWeekViewButton = this.shadowRoot.getElementById('showWeekView');\r\n    this.weekHourGrid = this.shadowRoot.getElementById('weekHourGrid');\r\n    this.showAllEvents = this.shadowRoot.getElementById('showAllEvents');\r\n    this.selectedWeekTitle =\r\n      this.shadowRoot.getElementById('selectedWeekTitle');\r\n    this.selectedDateTitleGrid = this.shadowRoot.getElementById(\r\n      'selectedDateTitleGrid'\r\n    );\r\n    this.addEvent = this.shadowRoot.getElementById('addEvent');\r\n    this.hourGrid = this.shadowRoot.getElementById('hourGrid');\r\n    this.eventName = this.shadowRoot.getElementById('eventName');\r\n    this.eventStartTime = this.shadowRoot.getElementById('eventStartTime');\r\n    this.eventEndTime = this.shadowRoot.getElementById('eventEndTime');\r\n    this.selectedDateTitle =\r\n      this.shadowRoot.getElementById('selectedDateTitle');\r\n    this.eventPopup = this.shadowRoot.getElementById('eventPopup');\r\n    this.days = this.shadowRoot.querySelectorAll('.day');\r\n    this.hours = this.shadowRoot.querySelectorAll('.hour');\r\n    this.sidebarButtons = this.shadowRoot.querySelectorAll('.tab-item');\r\n    this.currentButton.addEventListener('click', this.handleCurrent);\r\n    this.showAllEvents.addEventListener('click', () => {\r\n      this.allEvents.innerHTML = ''\r\n      this.allEvents.style.display = 'block';\r\n      this.calendar.style.display = 'none';\r\n      this.selectedDateView.style.display = 'none';\r\n      this.dayGridView.style.display = 'none';\r\n      this.weekGridView.style.display = 'none';\r\n\r\n      const allEventsContainer = document.createElement('div');\r\n      allEventsContainer.classList.add('event-list-container'); // Add a class for container styling\r\n      if (this.events!==undefined){\r\n        this.events.forEach((event, index) => {\r\n          let listItem = document.createElement('li');\r\n          listItem.classList.add('event-item');\r\n\r\n          let eventDate = document.createElement('p');\r\n          eventDate.textContent = `Date: ${event[this.config.datesDateField]}}`;\r\n          listItem.appendChild(eventDate);\r\n\r\n          let eventDescription = createEventDescription(event, this.config.eventListsFields, this.lang);\r\n/*          let eventDescription = document.createElement('p');\r\n          eventDescription.textContent = `${event.description_en}`;\r\n          eventDescription.classList.add('event-description');*/\r\n          listItem.appendChild(eventDescription);\r\n\r\n          if (event.is_holidays) {\r\n            let holidayLabel = document.createElement('span');\r\n            holidayLabel.textContent = 'Holiday';\r\n            holidayLabel.classList.add('event-label');\r\n            listItem.appendChild(holidayLabel);\r\n          }\r\n\r\n          if (event.conflict) {\r\n            let conflictDetail = document.createElement('p');\r\n            conflictDetail.textContent = `Conflict Detail: ${event.conflict_detail}`;\r\n            conflictDetail.classList.add('conflict-detail');\r\n            listItem.appendChild(conflictDetail);\r\n          }        \r\n          allEventsContainer.appendChild(listItem);\r\n        });\r\n      }\r\n      this.allEvents.appendChild(allEventsContainer);\r\n    });\r\n\r\n    this.sidebarButtons.forEach((button) => {\r\n      button.addEventListener('click', () => {\r\n        this.sidebarButtons.forEach((btn) => {\r\n          btn.classList.remove('active');\r\n        });\r\n        button.classList.add('active');\r\n      });\r\n    });\r\n    this.addEvent.addEventListener('click', this.addEventFunction);\r\n    this.hours.forEach((hour) => {\r\n      hour.addEventListener('drop', this.handleHourDrop);\r\n      hour.addEventListener('dragover', function (event) {\r\n        event.preventDefault();\r\n      });\r\n    });\r\n    this.showCurrentMonthButton.addEventListener('click', () => {\r\n      console.log('click Month', this.currentDisplayedMonth);\r\n      this.shadowRoot.getElementById('calendar').innerHTML = '';\r\n      console.log(this.calendarStartDate);\r\n      const currentMonth = this.calendarStartDate\r\n        ? new Date(this.calendarStartDate).getMonth()\r\n        : new Date().getMonth();\r\n      const currentYear = this.calendarStartDate\r\n        ? new Date(this.calendarStartDate).getFullYear()\r\n        : new Date().getFullYear();\r\n      const $monthNode = this.buildMonth(\r\n        currentMonth,\r\n        currentYear,\r\n        this.events,\r\n        this.holidays_calendar,\r\n        this.calendarStartDate,\r\n        this.calendarEndDate\r\n      );\r\n      this.shadowRoot.getElementById('calendar').appendChild($monthNode);\r\n      $monthNode.classList.add('full-month');\r\n      this.showCalendarView();\r\n      this.currentButton.innerText = 'Month';\r\n    });\r\n    this.showAllMonthsButton.addEventListener('click', () => {\r\n      this.shadowRoot.getElementById('calendar').innerHTML = '';\r\n      const currentYear = this.calendarStartDate\r\n        ? new Date(this.calendarStartDate).getFullYear()\r\n        : new Date().getFullYear();\r\n      this.buildYearCalendar(\r\n        this.calendar,\r\n        currentYear,\r\n        this.events,\r\n        this.holidays_calendar,\r\n        this.calendarStartDate,\r\n        this.calendarEndDate\r\n      );\r\n      this.showCalendarView();\r\n      this.currentButton.innerText = 'Year';\r\n    });\r\n    this.showDayViewButton.addEventListener('click', () => {\r\n      let selectedDate;\r\n      if (\r\n        new Date() >= new Date(this.calendarStartDate) &&\r\n        new Date() <= new Date(this.calendarEndDate)\r\n      ) {\r\n        console.log('in');\r\n        selectedDate = new Date();\r\n      } else {\r\n        console.log('else');\r\n        selectedDate = new Date(this.calendarStartDate);\r\n      }\r\n\r\n      this.showDayGridView(selectedDate);\r\n      this.currentButton.innerText = 'Day';\r\n    });\r\n\r\n    this.monthNames = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'October',\r\n      'November',\r\n      'December',\r\n    ];\r\n    if (this.schedule_size_unit === 'MONTHS') {\r\n      this.currentButton.innerText = 'Month';\r\n      console.log('click Month', this.currentDisplayedMonth);\r\n      this.shadowRoot.getElementById('calendar').innerHTML = '';\r\n      console.log(this.calendarStartDate);\r\n      const currentMonth = this.calendarStartDate\r\n        ? new Date(this.calendarStartDate).getMonth()\r\n        : new Date().getMonth();\r\n      const currentYear = this.calendarStartDate\r\n        ? new Date(this.calendarStartDate).getFullYear()\r\n        : new Date().getFullYear();\r\n      const $monthNode = this.buildMonth(\r\n        currentMonth,\r\n        currentYear,\r\n        this.events,\r\n        this.holidays_calendar,\r\n        this.calendarStartDate,\r\n        this.calendarEndDate\r\n      );\r\n      this.shadowRoot.getElementById('calendar').appendChild($monthNode);\r\n      $monthNode.classList.add('full-month');\r\n      if (this.showWeekView){\r\n        this.showWeekViewButton.addEventListener('click', () => {\r\n          console.log('click Week');\r\n          this.showWeekGridView();\r\n          this.addDoubleClickEventToWeekHours();\r\n          this.currentButton.innerText = 'Week';\r\n        });      \r\n      }\r\n      this.showCalendarView();      \r\n    } else if (this.schedule_size_unit === 'DAYS') {\r\n      let selectedDate;\r\n      if (\r\n        new Date() >= new Date(this.calendarStartDate) &&\r\n        new Date() <= new Date(this.calendarEndDate)\r\n      ) {\r\n        console.log('in');\r\n        selectedDate = new Date();\r\n      } else {\r\n        console.log('else');\r\n        selectedDate = new Date(this.calendarStartDate);\r\n      }\r\n\r\n      this.showDayGridView(selectedDate);\r\n      this.currentButton.innerText = 'Day';\r\n    } else if (this.schedule_size_unit === 'WEEKS') {\r\n      this.showWeekGridView();\r\n      this.addDoubleClickEventToWeekHours();\r\n      this.currentButton.innerText = 'Week';\r\n    } else {\r\n      this.buildYearCalendar(\r\n        this.calendar,\r\n        this.currentYear,\r\n        this.events,\r\n        this.holidays_calendar,\r\n        this.calendarStartDate,\r\n        this.calendarEndDate\r\n      );\r\n    }\r\n  }\r\n  handleCurrent = () => {\r\n    console.log(this.calendarStartDate);\r\n    console.log(this.calendarEndDate);\r\n    const innerText = this.currentButton.innerText;\r\n    if (innerText === 'Year') {\r\n      const currentYear = new Date(this.calendarStartDate).getFullYear();\r\n      const yearDifference = currentYear - this.currentDisplayedYear;\r\n      this.changeYear(yearDifference);\r\n    }\r\n    if (innerText === 'Month') {\r\n      const currentMonth = new Date(this.calendarStartDate).getMonth();\r\n      const currentYear = new Date(this.calendarStartDate).getFullYear();\r\n      this.calendar.innerHTML = '';\r\n      var $monthNode = this.buildMonth(\r\n        currentMonth,\r\n        currentYear,\r\n        this.events,\r\n        this.holidays_calendar,\r\n        this.calendarStartDate,\r\n        this.calendarEndDate\r\n      );\r\n      this.calendar.appendChild($monthNode);\r\n      $monthNode.classList.add('full-month');\r\n      this.showCalendarView();\r\n    }\r\n    if (innerText === 'Week') {\r\n      this.firstDateOfWeek = new Date(\r\n        new Date(this.calendarStartDate).getFullYear(),\r\n        new Date(this.calendarStartDate).getMonth(),\r\n        new Date(this.calendarStartDate).getDate() - new Date(this.calendarStartDate).getDay()\r\n      );\r\n      this.showWeekGridView();\r\n    }\r\n    if (innerText === 'Day') {\r\n      this.showDayGridView(new Date(this.calendarStartDate));\r\n    }\r\n  };\r\n  handlePrevious = () => {\r\n    console.log(this.currentDisplayedYear);\r\n\r\n    console.log(new Date(this.calendarStartDate).getFullYear());\r\n    console.log(new Date(this.calendarStartDate).getFullYear());    \r\n    let calendarValue = window\r\n      .getComputedStyle(this.calendar)\r\n      .getPropertyValue('display');\r\n    let dateValue = window\r\n      .getComputedStyle(this.dayGridView)\r\n      .getPropertyValue('display');\r\n    let weekValue = window\r\n      .getComputedStyle(this.weekGridView)\r\n      .getPropertyValue('display');\r\n    if (calendarValue === 'block') {\r\n      if (this.shadowRoot.querySelector('.full-month')) {\r\n        const currentMonthDate = new Date(this.currentYear, this.currentDisplayedMonth);\r\n        currentMonthDate.setMonth(currentMonthDate.getMonth() - 1);\r\n        const calendarStartDate = new Date(this.calendarStartDate);\r\n        const calendarEndDate = new Date(this.calendarEndDate);\r\n        if (\r\n          currentMonthDate >= calendarStartDate &&\r\n          currentMonthDate <= calendarEndDate\r\n        ) {\r\n          this.changeMonth(-1);\r\n        }\r\n      }\r\n      else {\r\n        if (\r\n          this.currentDisplayedYear - 1 >=\r\n          new Date(this.calendarStartDate).getFullYear() &&\r\n          this.currentDisplayedYear - 1 <= new Date(this.calendarEndDate).getFullYear()\r\n        ) {\r\n          this.changeYear(-1);\r\n        }\r\n      }\r\n    }\r\n    if (dateValue === 'block') {\r\n      var selectedDate = new Date(this.selectedDateTitleGrid.innerText);\r\n      const calendarStartDate = new Date(this.calendarStartDate);\r\n      const calendarEndDate = new Date(this.calendarEndDate);\r\n      let DayDate = new Date(this.selectedDateTitleGrid.innerText)\r\n      DayDate.setDate(selectedDate.getDate() - 1)\r\n      if (\r\n        DayDate >= calendarStartDate &&\r\n        DayDate <= calendarEndDate\r\n      ) {\r\n        selectedDate.setDate(selectedDate.getDate() - 1);\r\n        this.showDayGridView(selectedDate);\r\n      }\r\n    }\r\n    if (weekValue === 'block') {\r\n      var currentDate = new Date(this.firstDateOfWeek);\r\n      const calendarStartDate = new Date(this.calendarStartDate);\r\n      const calendarEndDate = new Date(this.calendarEndDate);\r\n      let weekDate = new Date(this.firstDateOfWeek);\r\n      weekDate.setDate(weekDate.getDate() - 1);\r\n      if (\r\n        weekDate >= calendarStartDate &&\r\n        weekDate <= calendarEndDate\r\n      ) {\r\n        currentDate.setDate(this.firstDateOfWeek.getDate() - 7);\r\n        this.firstDateOfWeek = currentDate;\r\n        this.showWeekGridView();\r\n      }\r\n    }\r\n  };\r\n  handleNext = () => {   \r\n    let calendarValue = window\r\n      .getComputedStyle(this.calendar)\r\n      .getPropertyValue('display');\r\n    let dateValue = window\r\n      .getComputedStyle(this.dayGridView)\r\n      .getPropertyValue('display');\r\n    let weekValue = window\r\n      .getComputedStyle(this.weekGridView)\r\n      .getPropertyValue('display');\r\n    if (calendarValue === 'block') {\r\n      if (this.shadowRoot.querySelector('.full-month')) {\r\n        const currentMonthDate = new Date(this.currentYear, this.currentDisplayedMonth);\r\n        currentMonthDate.setMonth(currentMonthDate.getMonth() + 1);\r\n        const calendarStartDate = new Date(this.calendarStartDate);\r\n        const calendarEndDate = new Date(this.calendarEndDate);\r\n        if (\r\n          currentMonthDate >= calendarStartDate &&\r\n          currentMonthDate <= calendarEndDate\r\n        ) {\r\n          this.changeMonth(1);\r\n        }\r\n      }\r\n      else {\r\n        if (\r\n          this.currentDisplayedYear + 1 >=\r\n          new Date(this.calendarStartDate).getFullYear() &&\r\n          this.currentDisplayedYear + 1 <= new Date(this.calendarEndDate).getFullYear()\r\n        ) {\r\n          this.changeYear(1);\r\n        }\r\n      }\r\n    }\r\n    if (dateValue === 'block') {\r\n      var selectedDate = new Date(this.selectedDateTitleGrid.innerText);\r\n      const calendarStartDate = new Date(this.calendarStartDate);\r\n      const calendarEndDate = new Date(this.calendarEndDate);\r\n      let DayDate = new Date(this.selectedDateTitleGrid.innerText)\r\n      DayDate.setDate(selectedDate.getDate() + 1)\r\n      if (\r\n        selectedDate >= calendarStartDate &&\r\n        selectedDate <= calendarEndDate\r\n      ) {\r\n        selectedDate.setDate(selectedDate.getDate() + 1);\r\n        this.showDayGridView(selectedDate);\r\n      }\r\n    }\r\n    if (weekValue === 'block') {\r\n      var currentDate = new Date(this.firstDateOfWeek);\r\n      const calendarStartDate = new Date(this.calendarStartDate);\r\n      const calendarEndDate = new Date(this.calendarEndDate);\r\n      let weekDate = new Date(this.firstDateOfWeek);\r\n      weekDate.setDate(weekDate.getDate() + 7);\r\n      if (\r\n        weekDate >= calendarStartDate &&\r\n        weekDate <= calendarEndDate\r\n      ) {\r\n        currentDate.setDate(this.firstDateOfWeek.getDate() + 7);\r\n        this.firstDateOfWeek = currentDate;\r\n        this.showWeekGridView();\r\n      }\r\n    }\r\n  };\r\n  changeMonth(monthChange) {\r\n    this.currentDisplayedMonth += monthChange;\r\n\r\n    if (this.currentDisplayedMonth === 12) {\r\n      this.currentDisplayedMonth = 0;\r\n      this.currentYear++;\r\n    } else if (this.currentDisplayedMonth === -1) {\r\n      this.currentDisplayedMonth = 11;\r\n      this.currentYear--;\r\n    }\r\n    this.calendar.innerHTML = '';\r\n    var $monthNode = this.buildMonth(\r\n      this.currentDisplayedMonth,\r\n      this.currentYear,\r\n      this.events,\r\n      this.holidays_calendar,\r\n      this.calendarStartDate,\r\n      this.calendarEndDate\r\n    );\r\n    this.calendar.appendChild($monthNode);\r\n    $monthNode.classList.add('full-month');\r\n    this.showCalendarView();\r\n  }\r\n  handleDayHover = (event) => {\r\n    var hoveredDate = event.currentTarget.getAttribute('data-date');\r\n    var eventsForDate = []  \r\n    if (this.events!==undefined){    \r\n      let dateFieldName=this.config.datesDateField\r\n      var eventsForHoveredDate = this.events.filter(function (event) {\r\n        return (\r\n          new Date(event[dateFieldName]).toDateString() ===\r\n          new Date(hoveredDate).toDateString()\r\n        );\r\n      });\r\n    }\r\n    var existingDropdown = document.querySelector('.event-dropdown');\r\n    if (existingDropdown) {\r\n      existingDropdown.parentNode.removeChild(existingDropdown);\r\n    }\r\n\r\n    if (eventsForHoveredDate!==undefined&&eventsForHoveredDate.length > 0) {\r\n      var dropdown = document.createElement('div');\r\n      dropdown.classList.add('event-dropdown');\r\n\r\n      var header = document.createElement('div');\r\n      header.classList.add('dropdown-header');\r\n      header.textContent = 'Events for ' + hoveredDate;\r\n      dropdown.appendChild(header);\r\n\r\n      var eventList = document.createElement('ul');\r\n      eventList.classList.add('event-list');\r\n\r\n      eventsForHoveredDate.forEach((event) => {\r\n        let ListContent = document.createElement('div');\r\n        var listItem = document.createElement('div');\r\n        listItem.style.display = 'flex';\r\n        listItem.style.padding = '5px 0px';\r\n        listItem.style.justifyContent = 'space-between';\r\n        listItem.style.alignItems = 'center';\r\n        let eventTitle = document.createElement('p');\r\n        eventTitle.style.margin = '0';\r\n\r\n        if (this.config.hoverDateDialog.entryTitleFld!==undefined){\r\n          eventTitle.textContent=event[this.config.hoverDateDialog.entryTitleFld];\r\n        }else{\r\n          eventTitle.textContent=\"\"\r\n        }\r\n        let eventDescription = createEventDescription(event, this.config.hoverDateDialog.eventListsFields, this.lang);\r\n\r\n        //listItem.appendChild(eventTitle);\r\n\r\n        let eventDetails = document.createElement('div');\r\n        eventDetails.appendChild(eventTitle);\r\n        eventDetails.appendChild(eventDescription);\r\n      \r\n        listItem.appendChild(eventDetails);\r\n\r\n        var crossIcon = document.createElement('span');\r\n        crossIcon.textContent = '❌';\r\n        crossIcon.style.cursor = 'pointer';\r\n        crossIcon.style.marginLeft = '5px';\r\n        crossIcon.style.color = '#ccc';\r\n        crossIcon.style.fontSize = '12px';\r\n        crossIcon.addEventListener('click', (e) => {\r\n          e.preventDefault();\r\n          const selector = `[data-date=\"${hoveredDate}\"]`;\r\n          const $dateNode = this.shadowRoot.querySelector(selector);\r\n          if ($dateNode) {\r\n            console.log(this.events);\r\n            let dateFieldName=this.config.datesDateField\r\n            let matchedEvents = this.events.filter(\r\n              (e) => e.date === event[dateFieldName]\r\n            );\r\n            if (matchedEvents.length === 1) {\r\n              if ($dateNode.classList.contains('holidayEvent')) {\r\n                $dateNode.classList.remove('holidayWithActiveEvent');\r\n                $dateNode.classList.remove('activeEvent');\r\n              } else {\r\n                $dateNode.classList.remove('activeEvent');\r\n              }\r\n            }\r\n          }\r\n          eventList.removeChild(ListContent);\r\n\r\n          var indexToRemove = this.events.findIndex(function (evt) {\r\n            return evt === event;\r\n          });\r\n\r\n          if (indexToRemove !== -1) {\r\n            this.events.splice(indexToRemove, 1);\r\n          }\r\n        });\r\n        listItem.appendChild(crossIcon);\r\n        ListContent.appendChild(listItem);\r\n\r\n        if (event.conflict) {\r\n          let conflictContainer = document.createElement('div');\r\n          ListContent.style.backgroundColor = '#ffe6e6';\r\n          ListContent.style.padding = '5px';\r\n          // ListContent.style.marginTop = '5px';\r\n          ListContent.style.borderRadius = '3px';\r\n          let conflictDetail = document.createElement('p');\r\n          conflictDetail.style.margin = '0';\r\n          conflictDetail.innerText = event.conflict_detail;\r\n          conflictDetail.style.color = 'red';\r\n          conflictDetail.style.fontWeight = 'bold';\r\n          conflictContainer.appendChild(conflictDetail);\r\n          ListContent.appendChild(conflictContainer);\r\n        }\r\n\r\n        ListContent.addEventListener('mouseenter', function () {\r\n          if (!event.conflict) {\r\n            listItem.style.backgroundColor = '#f0f0f0';\r\n          }\r\n        });\r\n        ListContent.addEventListener('mouseleave', function () {\r\n          listItem.style.backgroundColor = 'transparent';\r\n        });\r\n        eventList.appendChild(ListContent);\r\n      });\r\n\r\n\r\n      dropdown.appendChild(eventList);\r\n      var rect = event.currentTarget.getBoundingClientRect();\r\n      dropdown.style.top = rect.top + rect.height + 'px';\r\n      dropdown.style.left = rect.left + 'px';\r\n      dropdown.style.position = 'absolute';\r\n      dropdown.style.backgroundColor = '#fff';\r\n      dropdown.style.border = '1px solid #ccc';\r\n      dropdown.style.borderRadius = '5px';\r\n      dropdown.style.boxShadow = '0 2px 5px rgba(0, 0, 0, 0.1)';\r\n      dropdown.style.padding = '5px';\r\n      dropdown.style.zIndex = '9999';\r\n      dropdown.style.maxWidth = this.config.hoverDateDialog.dialogWidth || '400px';\r\n      dropdown.style.maxHeight = this.config.hoverDateDialog.dialogHeight || '400px';\r\n      dropdown.style.overflowY = 'auto';\r\n\r\n      header.style.fontWeight = 'bold';\r\n      header.style.paddingBottom = '5px';\r\n      header.style.borderBottom = '1px solid #ccc';\r\n      header.style.marginBottom = '5px';\r\n\r\n      // Añadir estas propiedades para dividir el título en dos líneas si es necesario\r\n      header.style.wordBreak = 'break-word';\r\n      header.style.whiteSpace = 'normal';\r\n      //header.style.wordWrap = 'break-word';\r\n      header.style.width = '100%'; // Asegurarse de que el título ocupe el ancho completo del contenedor\r\n\r\n      eventList.style.listStyle = 'none';\r\n      eventList.style.padding = '0 5px';\r\n      eventList.style.margin = '0';\r\n\r\n      eventList.querySelectorAll('li').forEach(function (li) {\r\n        li.style.padding = '5px 0';\r\n        li.style.cursor = 'pointer';\r\n      });\r\n\r\n      eventList.querySelectorAll('li:hover').forEach(function (li) {\r\n        li.style.backgroundColor = '#f0f0f0';\r\n      });\r\n\r\n      document.body.appendChild(dropdown);\r\n      dropdown.addEventListener('mouseleave', function () {\r\n        dropdown.parentNode.removeChild(dropdown);\r\n      });\r\n    }\r\n  };\r\n  closePopup = () => {\r\n    this.eventPopup.style.display = 'none';\r\n  };\r\n  addDoubleClickEventToWeekHours = () => {\r\n    var hourNodes = document.querySelectorAll('.week-hour');\r\n    hourNodes.forEach((hourNode) => {\r\n      hourNode.addEventListener('dblclick', this.handleWeekHourDoubleClick);\r\n    });\r\n  };\r\n  handleWeekHourDoubleClick = (event) => {\r\n    var startTime = event.target.innerText.split(' ')[0];\r\n    // var endTime = event.target.innerText.split(\" \")[2];\r\n    var currentDate = this.selectedWeekTitle.innerText;\r\n\r\n    var currentDateString = currentDate ? currentDate.trim() : '';\r\n\r\n    var selectedDate = new Date(currentDateString + ' ' + startTime);\r\n\r\n    var rect = event.target.getBoundingClientRect();\r\n    var popup = this.eventPopup;\r\n    popup.style.display = 'block';\r\n    popup.style.top = rect.top + 'px';\r\n    popup.style.left = rect.right + 'px';\r\n\r\n    this.selectedDateTitle.innerText = selectedDate;\r\n\r\n    var defaultEndTime = formatTime(\r\n      selectedDate.getHours() + 1,\r\n      selectedDate.getMinutes()\r\n    );\r\n\r\n    this.eventStartTime.value = startTime;\r\n    this.eventEndTime.value = defaultEndTime;\r\n  };\r\n  addEventFunction = (e) => {\r\n    e.preventDefault();\r\n    var eventName = this.eventName.value;\r\n    var eventStartTime = this.eventStartTime.value;\r\n    var eventEndTime = this.eventEndTime.value;\r\n    var selectedDate = this.selectedDateTitle.innerText;\r\n    var newEvent = {\r\n      id: this.events.length + 1,\r\n      date: formatDateString(selectedDate),\r\n      description_en: eventName,\r\n      description_es: '',\r\n      is_holidays: false,\r\n      conflict: false,\r\n      conflict_detail: '',\r\n      location: '',\r\n      start_time: eventStartTime,\r\n      end_time: eventEndTime,\r\n    };\r\n    this.events.push(newEvent);\r\n    this.closeModal();\r\n    localStorage.setItem('events', JSON.stringify(events));\r\n    this.updateCalendar(new Date(selectedDate));\r\n    this.eventName.value = '';\r\n    this.eventStartTime.value = '';\r\n    this.eventEndTime.value = '';\r\n    // this.eventPopup.style.display = \"none\";\r\n  };\r\n  handleHourDrop = (event) => {\r\n    event.preventDefault();\r\n    var draggedHour = event.dataTransfer.getData('text/plain');\r\n    var newHour = event.target.innerText;\r\n    console.log('Change event time from', draggedHour, 'to', newHour);\r\n  };\r\n  updateCalendar = (date) => {\r\n    var dayNodes = this.shadowRoot.querySelectorAll('.day');\r\n    dayNodes.forEach(function (dayNode) {\r\n      var dayDate = new Date(dayNode.getAttribute('data-date'));\r\n      if (dayDate.toDateString() === date.toDateString()) {\r\n        dayNode.classList.add('activeEvent');\r\n      }\r\n    });\r\n  };\r\n  handleDrop = (event) => {\r\n    event.preventDefault();\r\n    var draggedDate = event.dataTransfer.getData('text/plain');\r\n    var newDate = event.target.dataset.date;\r\n    console.log('Move event from', draggedDate, 'to', newDate);\r\n    let dateFieldName=this.config.datesDateField\r\n    var draggedEvent = this.this.dataAllInOneData.find(function (event) {\r\n      return (\r\n        new Date(event[dateFieldName]).toDateString() ===\r\n        new Date(draggedDate).toDateString()\r\n      );\r\n    });\r\n    console.log('Event:', draggedEvent);\r\n    this.updateEventDate(draggedEvent, newDate);\r\n  };\r\n  updateEventDate = (event, newDate) => {\r\n    const index = this.events.program_calendar.dates.findIndex(\r\n      (obj) => obj.id === event.id\r\n    );\r\n\r\n    if (index !== -1) {\r\n      event[this.config.datesDateField] = new Date(newDate).toISOString().split('T')[0];\r\n      this.events.program_calendar.dates[index] = {\r\n        ...this.events.program_calendar.dates[index],\r\n        ...event,\r\n      };\r\n      console.log(\r\n        'Object updated successfully:',\r\n        this.events.program_calendar.dates[index]\r\n      );\r\n      this.updateDateColor(event[this.config.datesDateField]);\r\n    } else {\r\n      console.log('Object with ID', 'id', 'not found.');\r\n    }\r\n  };\r\n  updateDateColor = (updatedDate) => {\r\n    var dateElement = this.shadowRoot.querySelector(\r\n      '[data-date=\"' + updatedDate + '\"]'\r\n    );\r\n    console.log(updatedDate);\r\n    console.log(dateElement);\r\n    if (dateElement) {\r\n      dateElement.style.backgroundColor = 'red';\r\n    }\r\n  };\r\n  getMonthsInYear = (year) => {\r\n    var date = new Date(year, 0, 1);\r\n    var months = [];\r\n    var monthCount = 0;\r\n    while (monthCount < 12) {\r\n      months.push(new Date(date));\r\n      date.setMonth(date.getMonth() + 1);\r\n      monthCount++;\r\n    }\r\n    return months;\r\n  };\r\n  buildYearCalendar = (\r\n    el,\r\n    year,\r\n    events = this.events,\r\n    holidays_calendar = this.holidays_calendar,\r\n    calendarStartDate,\r\n    calendarEndDate\r\n  ) => {\r\n    console.log('start');\r\n    var months = this.getMonthsInYear(year);\r\n    // Calendar for check start_date and end_date\r\n    months.forEach((a, b) => {\r\n      let loadedYear = new Date(a).getFullYear();\r\n      let loadedMonth = new Date(a).getMonth() + 1;\r\n\r\n      if (\r\n        loadedYear >= new Date(this.calendarStartDate).getFullYear() &&\r\n        loadedYear <= new Date(this.calendarEndDate).getFullYear()\r\n      ) {\r\n        if (\r\n          loadedMonth >= new Date(this.calendarStartDate).getMonth() + 1 &&\r\n          loadedMonth <= new Date(this.calendarEndDate).getMonth() + 1\r\n        ) {\r\n          console.log(loadedYear, loadedMonth);\r\n          console.log(\r\n            new Date(this.calendarStartDate).getFullYear(),\r\n            new Date(this.calendarStartDate).getMonth() + 1\r\n          );\r\n          console.log(\r\n            new Date(this.calendarEndDate).getFullYear(),\r\n            new Date(this.calendarEndDate).getMonth() + 1\r\n          );\r\n        }\r\n      }\r\n\r\n      var $monthNode = this.buildMonth(\r\n        b,\r\n        year,\r\n        events,\r\n        holidays_calendar,\r\n        calendarStartDate,\r\n        calendarEndDate\r\n      );\r\n      el.appendChild($monthNode);\r\n    });\r\n  };\r\n  handleHourDragStart = (event) => {\r\n    event.dataTransfer.setData('text/plain', event.target.innerText); // store the hour being dragged\r\n  };\r\n  getDaysInMonth = (month, year) => {\r\n    var date = new Date(year, month, 1);\r\n    var days = [];\r\n    while (date.getMonth() === month) {\r\n      days.push(new Date(date));\r\n      date.setDate(date.getDate() + 1);\r\n    }\r\n    return days;\r\n  };\r\n\r\n  handleDayClick = (event) => {\r\n    var selectedDate = event.currentTarget.getAttribute('data-date');\r\n    var modal = this.shadowRoot.getElementById('eventModal');\r\n    var modalContent = this.shadowRoot.querySelector('.modal-content');\r\n\r\n    // Display the modal\r\n    modal.style.display = 'block';\r\n\r\n    // Center the modal horizontally\r\n    modalContent.style.left = '50%';\r\n    modalContent.style.transform = 'translateX(-50%)';\r\n\r\n    this.selectedDateTitle.innerText = selectedDate;\r\n    var currentTime = new Date();\r\n    var defaultStartTime = formatTime(\r\n      currentTime.getHours(),\r\n      currentTime.getMinutes()\r\n    );\r\n    var defaultEndTime = formatTime(\r\n      currentTime.getHours() + 1,\r\n      currentTime.getMinutes()\r\n    );\r\n    this.shadowRoot.getElementById('eventStartTime').value = defaultStartTime;\r\n    this.shadowRoot.getElementById('eventEndTime').value = defaultEndTime;\r\n\r\n    if (event.target.classList.contains('hour')) {\r\n      var startTime = event.target.innerText.split(' ')[0];\r\n      var endTime = event.target.innerText.split(' ')[2];\r\n      console.log('Event Start Time: ' + startTime);\r\n      console.log('Event End Time: ' + endTime);\r\n\r\n      var hourNodes = this.sh.querySelectorAll('.hour');\r\n      hourNodes.forEach(function (hourNode) {\r\n        hourNode.classList.remove('selected');\r\n      });\r\n      event.target.classList.add('selected');\r\n    }\r\n  };\r\n\r\n  closeModal = () => {\r\n    var modal = this.shadowRoot.getElementById('eventModal');\r\n    modal.style.display = 'none';\r\n  };\r\n\r\n  // handleDayClick = (event) => {\r\n  //   var selectedDate = event.currentTarget.getAttribute(\"data-date\");\r\n  //   var rect = event.currentTarget.getBoundingClientRect();\r\n  //   var popup = this.eventPopup;\r\n  //   popup.style.display = \"block\";\r\n  //   popup.style.top = \"0\"; // Set top to 0 to align with the top of the viewport\r\n  //   popup.style.left = \"50%\"; // Set left to center horizontally\r\n  //   popup.style.transform = \"translateX(-50%)\"; // Center horizontally using transform\r\n  //   this.selectedDateTitle.innerText = selectedDate;\r\n  //   var currentTime = new Date();\r\n  //   var defaultStartTime = formatTime(\r\n  //     currentTime.getHours(),\r\n  //     currentTime.getMinutes()\r\n  //   );\r\n  //   var defaultEndTime = formatTime(\r\n  //     currentTime.getHours() + 1,\r\n  //     currentTime.getMinutes()\r\n  //   );\r\n  //   this.eventStartTime.value = defaultStartTime;\r\n  //   this.eventEndTime.value = defaultEndTime;\r\n\r\n  //   if (event.target.classList.contains(\"hour\")) {\r\n  //     var startTime = event.target.innerText.split(\" \")[0];\r\n  //     var endTime = event.target.innerText.split(\" \")[2];\r\n  //     console.log(\"Event Start Time: \" + startTime);\r\n  //     console.log(\"Event End Time: \" + endTime);\r\n\r\n  //     var hourNodes = this.sh.querySelectorAll(\".hour\");\r\n  //     hourNodes.forEach(function (hourNode) {\r\n  //       hourNode.classList.remove(\"selected\");\r\n  //     });\r\n  //     event.target.classList.add(\"selected\");\r\n  //   }\r\n  // }\r\n  handleDragStart = (event) => {\r\n    event.dataTransfer.setData('text/plain', event.target.dataset.date);\r\n  };\r\n  changeYear = (yearChange) => {\r\n    this.currentDisplayedYear += yearChange;\r\n    this.calendar.innerHTML = '';\r\n    this.buildYearCalendar(\r\n      this.calendar,\r\n      this.currentDisplayedYear,\r\n      this.events,\r\n      this.holidays_calendar,\r\n      this.calendarStartDate,\r\n      this.calendarEndDate\r\n    );\r\n    this.showCalendarView();\r\n  };\r\n  showDayGridView = (selectedDate) => {\r\n    var selectedDateTitleGrid = this.selectedDateTitleGrid;\r\n    var hourGrid = this.hourGrid;\r\n    const dayHeader = this.shadowRoot.getElementById('dayHeader');\r\n    hourGrid.innerHTML = '';\r\n    var previouslySelectedHour = document.querySelector('.hour.selected');\r\n    if (previouslySelectedHour) {\r\n      previouslySelectedHour.classList.remove('selected');\r\n    }\r\n    // console.log(selectedDate);\r\n    selectedDateTitleGrid.innerText = selectedDate.toDateString();\r\n    const date = formatDateString(selectedDate);\r\n    let eventsData = []\r\n    if (this.events!==undefined){    \r\n      eventsData = this.events.filter((e) => e.date === date);\r\n    }\r\n    if (eventsData.length > 0) {\r\n      eventsData.forEach((event) => {\r\n        const eventElement = document.createElement('div');\r\n        eventElement.style.padding = '10px';\r\n        eventElement.style.marginBottom = '20px';\r\n        eventElement.style.border = '1px solid #ccc';\r\n        eventElement.style.borderRadius = '5px';\r\n\r\n        const dateElement = document.createElement('div');\r\n        dateElement.innerText = event[this.config.datesDateField];\r\n        dateElement.style.fontWeight = 'bold';\r\n        eventElement.appendChild(dateElement);\r\n\r\n        const descriptionEnElement = document.createElement('div');\r\n        descriptionEnElement.innerText = event.description_en;\r\n        descriptionEnElement.style.marginTop = '5px';\r\n        eventElement.appendChild(descriptionEnElement);\r\n        dayHeader.appendChild(eventElement);\r\n      });\r\n    } else {\r\n      while (dayHeader.firstChild) {\r\n        dayHeader.removeChild(dayHeader.firstChild);\r\n      }\r\n    }\r\n    this.populateHourGrid(hourGrid);\r\n    var hourNodes = document.querySelectorAll('.hour');\r\n    hourNodes.forEach((hourNode) => {\r\n      hourNode.addEventListener('dblclick', this.handleDayClick);\r\n    });\r\n\r\n    this.calendar.style.display = 'none';\r\n    this.selectedDateView.style.display = 'block';\r\n    this.dayGridView.style.display = 'block';\r\n    this.weekGridView.style.display = 'none';\r\n  };\r\n  populateHourGrid = (hourGrid) => {\r\n    for (var i = 0; i < 24; i++) {\r\n      var hourNode = document.createElement('div');\r\n      hourNode.classList.add('hour');\r\n      hourNode.innerText = i + ':00 - ' + (i + 1) + ':00';\r\n      hourGrid.appendChild(hourNode);\r\n    }\r\n  };\r\n  showWeekGridView = () => {\r\n    console.log('showWeekGridView week');\r\n\r\n    var selectedWeekTitle = this.selectedWeekTitle;\r\n    var weekHourGrid = this.weekHourGrid;\r\n    const weekHeader = this.shadowRoot.getElementById('weekHeader');\r\n    weekHeader.innerHTML = ''\r\n    weekHourGrid.innerHTML = '';\r\n\r\n    selectedWeekTitle.innerText =\r\n      'Week of ' + this.firstDateOfWeek.toDateString();\r\n\r\n    for (var i = 0; i < 7; i++) {\r\n      var dayNode = document.createElement('div');\r\n      dayNode.classList.add('day');\r\n      var currentDay = new Date(this.firstDateOfWeek);\r\n      currentDay.setDate(this.firstDateOfWeek.getDate() + i);\r\n      const options = { weekday: 'short' }\r\n      dayNode.innerText =\r\n      currentDay.toLocaleDateString('en-US', options) +\r\n        ', ' +\r\n        this.monthNames[currentDay.getMonth()] +\r\n        ' ' +\r\n        currentDay.getDate();\r\n\r\n      const eventsData = this.events.filter(\r\n        (e) => e.date === formatDateString(new Date(currentDay))\r\n      );\r\n      // let holidays = [];\r\n      // const holidayData = this.holidays_calendar.forEach((h) => {\r\n      //   holidays.push(\r\n      //     ...h.dates.filter(\r\n      //       (e) => e.date === formatDateString(new Date(currentDay))\r\n      //     )\r\n      //   );\r\n      // });\r\n      if (eventsData.length > 0) {\r\n        eventsData.forEach((event) => {\r\n          const eventElement = document.createElement('div');\r\n          eventElement.style.padding = '10px';\r\n          eventElement.style.marginBottom = '20px';\r\n          eventElement.style.border = '1px solid #ccc';\r\n          eventElement.style.borderRadius = '5px';\r\n\r\n          const dateElement = document.createElement('div');\r\n          dateElement.innerText = event[this.config.datesDateField];\r\n          dateElement.style.fontWeight = 'bold';\r\n          eventElement.appendChild(dateElement);\r\n\r\n          const descriptionEnElement = document.createElement('div');\r\n          descriptionEnElement.innerText = event.description_en;\r\n          descriptionEnElement.style.marginTop = '5px';\r\n          eventElement.appendChild(descriptionEnElement);\r\n          weekHeader.appendChild(eventElement);\r\n        });\r\n      }\r\n\r\n\r\n      // var eventsForDate = this.events.filter(function (event) {\r\n      //   return (\r\n      //     new Date(event[this.config.datesDateField]).getDate() === new Date(currentDay).getDate() &&\r\n      //     new Date(event[this.config.datesDateField]).getMonth() === new Date(currentDay).getMonth() &&\r\n      //     new Date(event[this.config.datesDateField]).getFullYear() === new Date(currentDay).getFullYear()\r\n      //   );\r\n      // });\r\n      // if (eventsForDate.length > 0) {\r\n      //   dayNode.classList.add(\"activeEvent\");\r\n      //   dayNode.addEventListener(\"dragstart\", this.handleDragStart);\r\n      //   dayNode.setAttribute(\"draggable\", true);\r\n      // }\r\n      // var currentDate = new Date();\r\n      // console.log(new Date(currentDay).getDate())\r\n      // if (\r\n      //   currentDate.getDate() === new Date(currentDay).getDate() &&\r\n      //   currentDate.getMonth() === new Date(currentDay).getMonth() &&\r\n      //   currentDate.getFullYear() === new Date(currentDay).getFullYear()\r\n      // ) {\r\n      //   dayNode.classList.add(\"currentDate\");\r\n      // }\r\n      // var holidayList = this.holidays_calendar.reduce(function (acc, holiday) {\r\n      //   var holidaysForDate = holiday.dates.filter(function (date) {\r\n      //     return (\r\n      //       new Date(date.date).getDate() === new Date(currentDay).getDate() &&\r\n      //       new Date(date.date).getMonth() === new Date(currentDay).getMonth() &&\r\n      //       new Date(date.date).getFullYear() === new Date(currentDay).getFullYear()\r\n      //     );\r\n      //   });\r\n      //   return acc.concat(holidaysForDate);\r\n      // }, []);\r\n      // if (holidayList.length > 0) {\r\n      //   dayNode.classList.add(\"holidayEvent\");\r\n      // }\r\n      weekHourGrid.appendChild(dayNode);\r\n\r\n      for (var j = 0; j < 24; j++) {\r\n        var hourNode = document.createElement('div');\r\n        hourNode.classList.add('week-hour');\r\n        hourNode.innerText = j + ':00 - ' + (j + 1) + ':00';\r\n        hourNode.addEventListener('dblclick', this.handleWeekHourDoubleClick);\r\n        dayNode.appendChild(hourNode);\r\n      }\r\n    }\r\n\r\n    this.calendar.style.display = 'none';\r\n    this.selectedDateView.style.display = 'none';\r\n    this.dayGridView.style.display = 'none';\r\n    this.weekGridView.style.display = 'block';\r\n  };\r\n  showCalendarView = () => {\r\n    this.calendar.style.display = 'block';\r\n    this.selectedDateView.style.display = 'none';\r\n    this.dayGridView.style.display = 'none';\r\n    this.weekGridView.style.display = 'none';\r\n    this.allEvents.style.display = 'none';\r\n  };\r\n  buildMonth = (\r\n    monthNum,\r\n    year,\r\n    events = this.events,\r\n    holidays_calendar = this.holidays_calendar,\r\n    calendarStartDate,\r\n    calendarEndDate\r\n  ) => {\r\n    var firstDayOfMonth = new Date(\r\n      year,\r\n      monthNum,\r\n      this.setDayBasedOnStartWeek\r\n    ).getDay();\r\n    var startingDay = firstDayOfMonth === 0 ? 6 : firstDayOfMonth - 1;\r\n    var daysInMonth = this.getDaysInMonth(monthNum, year);\r\n    var $monthNode = document.createElement('div');\r\n    $monthNode.classList.add('month');\r\n    var $titleNode = document.createElement('h4');\r\n    $titleNode.innerText = this.monthNames[monthNum] + ' ' + year;\r\n    $monthNode.appendChild($titleNode);\r\n    this.dayNames.forEach(function (dayName) {\r\n      var $dayNode = document.createElement('div');\r\n      $dayNode.classList.add('dow');\r\n      $dayNode.innerText = dayName;\r\n      $monthNode.appendChild($dayNode);\r\n    });\r\n    var $daysContainer = document.createElement('div');\r\n    $daysContainer.classList.add('days-container');\r\n    for (var i = 0; i < startingDay; i++) {\r\n      var $emptyDayNode = document.createElement('div');\r\n      $emptyDayNode.classList.add('day', 'empty');\r\n      var prevMonthDays = new Date(year, monthNum, 0).getDate();\r\n      var date = prevMonthDays - startingDay + i + 1;\r\n      $emptyDayNode.innerText = date;\r\n      $emptyDayNode.classList.add('privMonthDate');\r\n      $daysContainer.appendChild($emptyDayNode);\r\n    }\r\n    daysInMonth.forEach((c, d) => {\r\n      // Calendar for check start_date and end_date\r\n\r\n      //Calendar Date load\r\n      var $dayNode = document.createElement('div');\r\n      $dayNode.classList.add('day');\r\n      $dayNode.setAttribute('data-date', c);\r\n      $dayNode.innerText = d + 1;\r\n      if (c >= calendarStartDate && c <= calendarEndDate) {\r\n        $dayNode.addEventListener('dblclick', this.handleDayClick);\r\n        $dayNode.addEventListener('drop', this.handleDrop);\r\n        $dayNode.addEventListener('mouseover', this.handleDayHover);\r\n        $dayNode.addEventListener('dragover', function (event) {\r\n          event.preventDefault();\r\n        });\r\n        var currentDate = new Date();\r\n        if (\r\n          currentDate.getDate() === d + 1 &&\r\n          currentDate.getMonth() === monthNum &&\r\n          currentDate.getFullYear() === year\r\n        ) {\r\n          $dayNode.classList.add('currentDate');\r\n        }\r\n        var eventsForDate = []  \r\n        if (this.events!==undefined){\r\n          let dateFieldName=this.config.datesDateField\r\n          eventsForDate = this.events.filter(function (event) {\r\n            return (\r\n              new Date(event[dateFieldName]).getDate() === d + 1 &&\r\n              new Date(event[dateFieldName]).getMonth() === monthNum &&\r\n              new Date(event[dateFieldName]).getFullYear() === year\r\n            );\r\n          });\r\n          // var holidayList = holidays_calendar.reduce(function (acc, holiday) {\r\n          //   var holidaysForDate = holiday.dates.filter(function (date) {\r\n          //     return (\r\n          //       new Date(date.date).getDate() === d + 1 &&\r\n          //       new Date(date.date).getMonth() === monthNum &&\r\n          //       new Date(date.date).getFullYear() === year\r\n          //     );\r\n          //   });\r\n          //   return acc.concat(holidaysForDate);\r\n          // }, []);\r\n          if (eventsForDate.length > 0) {\r\n            console.log(eventsForDate)\r\n            eventsForDate.forEach(e => {\r\n              const allHolidays = eventsForDate.every(event => event.is_holidays);\r\n              const noHolidays = eventsForDate.every(event => !event.is_holidays);\r\n              const mixedEvents = !allHolidays && !noHolidays;\r\n            \r\n              // Limpiar las clases antes de aplicarlas para evitar duplicaciones no deseadas\r\n              $dayNode.classList.remove('holidayEvent', 'activeEvent', 'holidayWithActiveEvent');\r\n            \r\n              // Aplicar la clase correspondiente según las condiciones\r\n              if (allHolidays) {\r\n                $dayNode.classList.add('holidayEvent');\r\n              } else if (noHolidays) {\r\n                $dayNode.classList.add('activeEvent');\r\n              } else if (mixedEvents) {\r\n                $dayNode.classList.add('holidayWithActiveEvent');\r\n              }\r\n            \r\n              // Añadir clases adicionales según el conflicto\r\n              if (e.conflict) {\r\n                $dayNode.classList.add('holiday-match');\r\n              }\r\n\r\n/*              $dayNode.classList.add('activeEvent');\r\n              if (e.is_holidays) {\r\n                $dayNode.classList.add('holidayEvent');\r\n              }\r\n              if (e.conflict) {\r\n                $dayNode.classList.add('holidayWithActiveEvent');\r\n              } else {\r\n                $dayNode.classList.add('activeEvent');\r\n              }*/\r\n            })\r\n          }\r\n          $dayNode.addEventListener('dragstart', this.handleDragStart);\r\n          $dayNode.setAttribute('draggable', true);\r\n        }\r\n        // this.holidays_calendar.forEach((holiday) => {\r\n        //   holiday.dates.forEach((holidayDate) => {\r\n        //     const isHolidayDatePresent = this.events.some((date) => {\r\n        //       return date.date === holidayDate.date;\r\n        //     });\r\n        //     if (isHolidayDatePresent) {\r\n        //       this.events.forEach((date) => {\r\n        //         if (date.date === holidayDate.date) {\r\n        //           const dateValue = formatDate(date.date);\r\n        //           const selector = `[data-date=\"${dateValue}\"]`;\r\n        //           const $dateNode = this.shadowRoot.querySelector(selector);\r\n        //           if ($dateNode) {\r\n        //             $dateNode.classList.add('holiday-match');\r\n        //           }\r\n        //         }\r\n        //       });\r\n        //     }\r\n        //   });\r\n        // });\r\n        $daysContainer.appendChild($dayNode);\r\n      } else {\r\n        $dayNode.classList.add('privMonthDate');\r\n        $daysContainer.appendChild($dayNode);\r\n      }\r\n\r\n      // if (hasEvent(new Date(c))) {\r\n      //   var eventDot = document.createElement(\"span\");\r\n      //   eventDot.classList.add(\"event-date\");\r\n      //   $dayNode.appendChild(eventDot);\r\n      // }\r\n\r\n      // }\r\n    });\r\n\r\n    $monthNode.appendChild($daysContainer);\r\n\r\n    return $monthNode;\r\n  };\r\n\r\n  render() {\r\n    \r\n    return html`\r\n      <div class=\"body\">\r\n        <div class=\"tabs-container\">\r\n          <ul class=\"tab-list\">\r\n            <li class=\"tab-item\" id=\"showDayView\">\r\n              <button class=\"tab-button\">Day</button>\r\n            </li>\r\n            ${this.showWeekView?html`\r\n            <li class=\"tab-item\" id=\"showWeekView\">\r\n              <span class=\"tab-separator\"></span\r\n              ><button class=\"tab-button\">Week</button>\r\n            </li>\r\n            `:html``}\r\n            <li class=\"tab-item\" id=\"showCurrentMonth\">\r\n              <span class=\"tab-separator\"></span\r\n              ><button class=\"tab-button\">Month</button>\r\n            </li>\r\n            <li class=\"tab-item active\" id=\"showAllMonths\">\r\n              <span class=\"tab-separator\"></span\r\n              ><button class=\"tab-button\">Year</button>\r\n            </li>\r\n            <li class=\"tab-item\" id=\"showAllEvents\">\r\n              <span class=\"tab-separator\"></span\r\n              ><button class=\"tab-button\">Event Lists</button>\r\n            </li>\r\n          </ul>\r\n          <ul class=\"tab-list\">\r\n            <li class=\"tab-item\" id=\"previous\">\r\n              <button class=\"tab-button\">\r\n                <span class=\"previous round\">&#8249;</span>\r\n              </button>\r\n            </li>\r\n            <li class=\"tab-item\">\r\n              <span class=\"tab-separator\"></span\r\n              ><button class=\"tab-button\" id=\"current\"></button>\r\n            </li>\r\n            <li class=\"tab-item\" id=\"next\">\r\n              <span class=\"tab-separator\"></span\r\n              ><button class=\"tab-button\">\r\n                <span class=\"previous round\">&#8250;</span>\r\n              </button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div id=\"selectedDateView\">\r\n          <h2 id=\"selectedDateTitle\"></h2>\r\n        </div>\r\n        <div id=\"dayGridView\">\r\n          <h2 id=\"selectedDateTitleGrid\"></h2>\r\n          <div id=\"dayHeader\"></div>\r\n          <div id=\"hourGrid\"></div>\r\n        </div>\r\n        <div id=\"weekGridView\">\r\n          <h2 id=\"selectedWeekTitle\"></h2>\r\n          <div id=\"weekHeader\"></div>\r\n          <div id=\"weekHourGrid\"></div>\r\n        </div>\r\n\r\n        <div id=\"calendar\"></div>\r\n        <div id=\"allEvents\" style=\"display: none;\"></div>\r\n\r\n        <div id=\"eventModal\" class=\"modal\">\r\n          <div class=\"modal-content\">\r\n            <span class=\"close\" @click=\"${this.closeModal}\">&times;</span>\r\n            <h2>Add Event</h2>\r\n            <input type=\"text\" id=\"eventName\" placeholder=\"Event Name\" />\r\n            <input type=\"text\" id=\"eventStartTime\" value=\"\" />\r\n            <input type=\"text\" id=\"eventEndTime\" value=\"\" />\r\n            <button id=\"addEvent\">Add Event</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\ncustomElements.define('calendar-component', CalendarComponent);\r\n"],"names":[],"sourceRoot":""}