{"version":3,"file":"stories-CKEditor-stories.3e92a23b.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;ACyCA;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAnBA;ACtCA;ADyEA;;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;;;;;;AEpFA;ACOA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;;;;;;;;;;;;ACpBA;;ACgBA;;;AAGA;AACA;AACA;;;;AAlBA;AAIA;;;;AAuBA;;AC3BA","sources":["webpack://@trazit/tr-procedures/./src/components/Tree/treenode/index.js","webpack://@trazit/tr-procedures/./src/components/Tree/treenode/treenode.template.js","webpack://@trazit/tr-procedures/./src/components/Tree/utils/index.js","webpack://@trazit/tr-procedures/./src/components/Tree/treeview/index.js","webpack://@trazit/tr-procedures/./src/components/Tree/treeview/treeview.template.js","webpack://@trazit/tr-procedures/./src/components/Tree/app/tree-view-main.js","webpack://@trazit/tr-procedures/./src/components/Tree/app/app.template.js","webpack://@trazit/tr-procedures/./src/stories/CKEditor.stories.js"],"sourcesContent":["import {LitElement} from 'lit-element';\r\nimport {template} from './treenode.template';\r\nimport {styles} from './treenode.css';\r\n\r\nexport class TreeNode extends LitElement {\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n    // Dispatch event here if necessary\r\n  }\r\n  static get styles() {\r\n    return styles;\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      data: {type: Object},\r\n      specification: {type: Array},\r\n      selectedItems: {type: Object},\r\n      handleSelectItem: {type: Function},\r\n      handleShowChildrenItem: {type: Function},\r\n      showChildren: {type: Boolean},\r\n      level: {type: Number}\r\n    };\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.data = {};    \r\n    this.specification = [];\r\n    this.selectedItems = [];\r\n    this.showChildren = false;\r\n    this.level = 0;\r\n    this.value = '';\r\n    this.handleClickItem = this.handleClickItem.bind(this);     \r\n  }\r\n  handleClickItem = (event) => {\r\n    event.stopPropagation();\r\n    const selectedValue = this.data[this.specification[this.level].key];\r\n    this.dispatchEvent(new CustomEvent('item-selected', { detail: selectedValue, bubbles: true, composed: true }));\r\n  };\r\n\r\n  render() {\r\n    return template({\r\n      data: this.data,\r\n      specification: this.specification,\r\n      selectedItems: this.selectedItems,\r\n      handleSelectItem: this.handleSelectItem,\r\n      showChildren: this.showChildren,      \r\n      handleShowChildrenItem: this._handleShowChildrenItem,\r\n      handleShowChildren: this._handleShowChildren,\r\n      level: this.level,\r\n      handleClickItem: this.handleClickItem\r\n    });\r\n  }\r\n\r\n  \r\n\r\n  _handleShowChildren = () => {\r\n    this.showChildren = !this.showChildren;\r\n  };\r\n}\r\n\r\nwindow.customElements.define('tree-node', TreeNode);\r\n","import {html} from 'lit-element';\r\nimport {classNames} from '../utils';\r\nimport '../treeview';\r\nimport '@vaadin/accordion';\r\nimport '@vaadin/accordion/vaadin-accordion-panel';\r\nimport '@vaadin/vertical-layout';\r\n\r\n\r\nexport const template = (props) => {\r\n  const {\r\n    data,\r\n    specification,\r\n    selectedItems,\r\n    handleSelectItem,\r\n    showChildren,\r\n    handleShowChildren,\r\n    level,\r\n    handleClickItem    \r\n  } = props;\r\n  const entity = data;\r\n  const children = data[specification[level].children]\r\n  const key = data[specification[level].key];\r\n  const label = data[specification[level].label];\r\n  const selected = selectedItems[key] ? true : false;\r\n\r\n  \r\n  const handleShowChildrenItem = () =>{\r\n    handleShowChildren();    \r\n    this.dispatchEvent(new CustomEvent('item-selected', { detail: '', bubbles: true, composed: true }));\r\n  }\r\n  // handleClickItem = () => {    \r\n  //   const selectedValue=data[specification[level].key] \r\n  //   alert(selectedValue)\r\n  //   this.dispatchEvent(new CustomEvent('item-selected', { detail: selectedValue, bubbles: true, composed: true }));\r\n  //   //handleShowChildren();\r\n  //   //if (!children) handleSelectItem(entity, data);\r\n  //};\r\n\r\n  const handleDragStart = (event) => {    \r\n    event.dataTransfer.setData('item', JSON.stringify(data));\r\n  };\r\n\r\n  \r\n\r\n  return html`\r\n  <vaadin-accordion-panel summary=${label} @click=${handleShowChildrenItem}\r\n  draggable=\"true\"      \r\n  >\r\n    <vaadin-vertical-layout>\r\n    <ul>\r\n      ${showChildren && children\r\n        ? html`<tree-view\r\n            .data=${children}\r\n            .selectedItems=${selectedItems}\r\n            .handleSelectItem=${handleSelectItem}\r\n            .specification=${specification}\r\n            .level=${level + 1}\r\n          ></tree-view>`\r\n        : ''}\r\n    </ul>\r\n    </vaadin-vertical-layout>\r\n  </vaadin-accordion-panel>  \r\n</vaadin-accordion>\r\n\r\n   <!-- <div\r\n      draggable=\"true\"\r\n      @dragstart=${handleDragStart}\r\n      class=\"${classNames(\r\n        'label',\r\n        selected ? 'selected' : '',\r\n        children && children.length > 0 ? 'hasChildren' : '',\r\n        showChildren ? 'opened' : 'closed'\r\n      )}\" \r\n      @click=${handleShowChildrenItem}\r\n    >\r\n      <span @click=${handleClickItem}>${label}</span>\r\n    </div>\r\n    <ul>\r\n      ${showChildren && children\r\n        ? html`<tree-view\r\n            .data=${children}\r\n            .selectedItems=${selectedItems}\r\n            .handleSelectItem=${handleSelectItem}\r\n            .specification=${specification}\r\n            .level=${level + 1}\r\n          ></tree-view>`\r\n        : ''}\r\n    </ul> --> \r\n  `;\r\n};\r\n","export const classNames = (...names) => {\r\n  return names.join(\" \");\r\n}","import {LitElement} from 'lit-element';\r\nimport {template} from './treeview.template';\r\nimport {styles} from './treeview.css';\r\n\r\nexport class TreeView extends LitElement {\r\n  static get styles() {\r\n    return styles;\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      data: {type: Array},\r\n      specification: {type: Array},\r\n      selectedItems: {type: Object},\r\n      handleSelectItem: {type: Function},\r\n      level: {type: Number},\r\n      value: { type: String }\r\n    };\r\n  }\r\n  _handleItemSelected = (event) => {\r\n    if (this.value!==''&&this.value===event.detail){\r\n      this.value=''\r\n      return\r\n    }\r\n    this.value = event.detail;      \r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.data = [];\r\n    this.specification = [];\r\n    this.selectedItems = [];\r\n    this.level = 0;\r\n    this.value=''\r\n  }\r\n  render() {\r\n    return template({\r\n      data: this.data,\r\n      specification: this.specification,\r\n      selectedItems: this.selectedItems,\r\n      handleSelectItem: this.handleSelectItem,\r\n      level: this.level,\r\n      value: this.valuem,\r\n      handleItemSelected: this._handleItemSelected\r\n    });\r\n  }\r\n  \r\n}\r\n\r\nwindow.customElements.define('tree-view', TreeView);\r\n","import {html} from 'lit-element';\r\nimport '../treenode';\r\nimport '@vaadin/accordion';\r\n\r\n\r\nexport const template = (props) => {\r\n  const {data, specification, level, selectedItems, handleSelectItem, value, handleItemSelected} = props;\r\n\r\n\r\n  \r\n  return html`\r\n    <vaadin-accordion @item-selected=${handleItemSelected}>\r\n      ${data.map((node) => {\r\n        return html`\r\n          <tree-node\r\n            .data=${node}\r\n            .specification=${specification}\r\n            .selectedItems=${selectedItems}\r\n            .handleSelectItem=${handleSelectItem}\r\n            .level=${level}\r\n            value=${value}\r\n          ></tree-node>\r\n        `;\r\n      })}\r\n    </vaadin-accordion>\r\n  `;\r\n};\r\n","import { LitElement } from 'lit-element';\r\nimport { template } from './app.template';\r\nimport { styles } from './app.css';\r\n\r\n\r\nexport class TreeViewMain extends LitElement {\r\n  static get styles() {\r\n    return styles;\r\n  }\r\n\r\n  static get properties() {\r\n    return {\r\n      entity: { type: String },\r\n      selectedItems: { type: Object }\r\n    };\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.entity = \"\";\r\n    this.selectedItems = {};\r\n    console.log('hello')\r\n  }\r\n\r\n  render() {\r\n    return template({\r\n      selectedItems: this.selectedItems,\r\n      handleSelectItem: this._handleSelectItem,\r\n      getSelectedItems: this._getSelectedItems\r\n    });\r\n  }\r\n\r\n  _handleSelectItem = (entity, itemData) => {\r\n    if(this.entity !== entity) {\r\n      this.selectedItems = {};\r\n      this.entity = entity;\r\n    }\r\n\r\n    const { key } = itemData;\r\n    if(!this.selectedItems[key]) {\r\n      this.selectedItems[key] = itemData;\r\n    } else {\r\n      delete this.selectedItems[key];\r\n    }\r\n  }\r\n\r\n  _getSelectedItems = () => {\r\n    console.log(this.selectedItems);\r\n  }\r\n}\r\n\r\nwindow.customElements.define('tree-view-main', TreeViewMain);\r\n","import { html } from \"lit-element\";\r\nimport '../treeview/index';\r\nimport { data } from '../mock';\r\n\r\n\r\nexport const template = (props) => {\r\n  const { selectedItems, handleSelectItem, getSelectedItems } = props;\r\n\r\n  const handleAllowDrop = (event) => {\r\n    event.preventDefault();\r\n  }\r\n\r\n  const handleDrop = (event) => {\r\n    event.preventDefault();\r\n    const itemStr = event.dataTransfer.getData(\"item\");\r\n    const item = JSON.parse(itemStr);\r\n    console.log(item);\r\n  }\r\n\r\n  return html`\r\n    <div>    \r\n      <button @click=${getSelectedItems}>Selected Items</button>\r\n      <div class=\"container\">\r\n        <tree-view \r\n          .data=${data} \r\n          .selectedItems=${selectedItems}\r\n          .handleSelectItem=${handleSelectItem}\r\n        ></tree-view>\r\n        <div \r\n          class=\"dropzone\"\r\n          @dragover=${handleAllowDrop}\r\n          @drop=${handleDrop}\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  `\r\n}","import { CkEditor } from './CKEditor';\r\n\r\nexport default {\r\n  title: 'Example/CKEDITOR',\r\n  tags: ['autodocs'],\r\n  render: (args) => CkEditor(args), \r\n};\r\n\r\nexport const CKEditor = {\r\n  args: {\r\n    \r\n  },\r\n};\r\n"],"names":[],"sourceRoot":""}